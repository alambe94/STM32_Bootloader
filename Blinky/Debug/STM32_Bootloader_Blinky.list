
STM32_Bootloader_Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022c0  08008194  08008194  00008194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800a454  0800a454  0000a454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a558  0800a558  0001000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a558  0800a558  0000a558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a560  0800a560  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a560  0800a560  0000a560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a564  0800a564  0000a564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800a568  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  0800a574  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  0800a574  0001006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005a5b  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000129a  00000000  00000000  00015a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000610  00000000  00000000  00016d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000558  00000000  00000000  00017348  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000147a1  00000000  00000000  000178a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000060ba  00000000  00000000  0002c041  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f829  00000000  00000000  000320fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b1924  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016e8  00000000  00000000  000b19a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008194 <__do_global_dtors_aux>:
 8008194:	b510      	push	{r4, lr}
 8008196:	4c05      	ldr	r4, [pc, #20]	; (80081ac <__do_global_dtors_aux+0x18>)
 8008198:	7823      	ldrb	r3, [r4, #0]
 800819a:	b933      	cbnz	r3, 80081aa <__do_global_dtors_aux+0x16>
 800819c:	4b04      	ldr	r3, [pc, #16]	; (80081b0 <__do_global_dtors_aux+0x1c>)
 800819e:	b113      	cbz	r3, 80081a6 <__do_global_dtors_aux+0x12>
 80081a0:	4804      	ldr	r0, [pc, #16]	; (80081b4 <__do_global_dtors_aux+0x20>)
 80081a2:	f3af 8000 	nop.w
 80081a6:	2301      	movs	r3, #1
 80081a8:	7023      	strb	r3, [r4, #0]
 80081aa:	bd10      	pop	{r4, pc}
 80081ac:	2000000c 	.word	0x2000000c
 80081b0:	00000000 	.word	0x00000000
 80081b4:	0800a43c 	.word	0x0800a43c

080081b8 <frame_dummy>:
 80081b8:	b508      	push	{r3, lr}
 80081ba:	4b03      	ldr	r3, [pc, #12]	; (80081c8 <frame_dummy+0x10>)
 80081bc:	b11b      	cbz	r3, 80081c6 <frame_dummy+0xe>
 80081be:	4903      	ldr	r1, [pc, #12]	; (80081cc <frame_dummy+0x14>)
 80081c0:	4803      	ldr	r0, [pc, #12]	; (80081d0 <frame_dummy+0x18>)
 80081c2:	f3af 8000 	nop.w
 80081c6:	bd08      	pop	{r3, pc}
 80081c8:	00000000 	.word	0x00000000
 80081cc:	20000010 	.word	0x20000010
 80081d0:	0800a43c 	.word	0x0800a43c

080081d4 <__aeabi_uldivmod>:
 80081d4:	b953      	cbnz	r3, 80081ec <__aeabi_uldivmod+0x18>
 80081d6:	b94a      	cbnz	r2, 80081ec <__aeabi_uldivmod+0x18>
 80081d8:	2900      	cmp	r1, #0
 80081da:	bf08      	it	eq
 80081dc:	2800      	cmpeq	r0, #0
 80081de:	bf1c      	itt	ne
 80081e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80081e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80081e8:	f000 b972 	b.w	80084d0 <__aeabi_idiv0>
 80081ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80081f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081f4:	f000 f806 	bl	8008204 <__udivmoddi4>
 80081f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80081fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008200:	b004      	add	sp, #16
 8008202:	4770      	bx	lr

08008204 <__udivmoddi4>:
 8008204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008208:	9e08      	ldr	r6, [sp, #32]
 800820a:	4604      	mov	r4, r0
 800820c:	4688      	mov	r8, r1
 800820e:	2b00      	cmp	r3, #0
 8008210:	d14b      	bne.n	80082aa <__udivmoddi4+0xa6>
 8008212:	428a      	cmp	r2, r1
 8008214:	4615      	mov	r5, r2
 8008216:	d967      	bls.n	80082e8 <__udivmoddi4+0xe4>
 8008218:	fab2 f282 	clz	r2, r2
 800821c:	b14a      	cbz	r2, 8008232 <__udivmoddi4+0x2e>
 800821e:	f1c2 0720 	rsb	r7, r2, #32
 8008222:	fa01 f302 	lsl.w	r3, r1, r2
 8008226:	fa20 f707 	lsr.w	r7, r0, r7
 800822a:	4095      	lsls	r5, r2
 800822c:	ea47 0803 	orr.w	r8, r7, r3
 8008230:	4094      	lsls	r4, r2
 8008232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008236:	0c23      	lsrs	r3, r4, #16
 8008238:	fbb8 f7fe 	udiv	r7, r8, lr
 800823c:	fa1f fc85 	uxth.w	ip, r5
 8008240:	fb0e 8817 	mls	r8, lr, r7, r8
 8008244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008248:	fb07 f10c 	mul.w	r1, r7, ip
 800824c:	4299      	cmp	r1, r3
 800824e:	d909      	bls.n	8008264 <__udivmoddi4+0x60>
 8008250:	18eb      	adds	r3, r5, r3
 8008252:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8008256:	f080 811b 	bcs.w	8008490 <__udivmoddi4+0x28c>
 800825a:	4299      	cmp	r1, r3
 800825c:	f240 8118 	bls.w	8008490 <__udivmoddi4+0x28c>
 8008260:	3f02      	subs	r7, #2
 8008262:	442b      	add	r3, r5
 8008264:	1a5b      	subs	r3, r3, r1
 8008266:	b2a4      	uxth	r4, r4
 8008268:	fbb3 f0fe 	udiv	r0, r3, lr
 800826c:	fb0e 3310 	mls	r3, lr, r0, r3
 8008270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008274:	fb00 fc0c 	mul.w	ip, r0, ip
 8008278:	45a4      	cmp	ip, r4
 800827a:	d909      	bls.n	8008290 <__udivmoddi4+0x8c>
 800827c:	192c      	adds	r4, r5, r4
 800827e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008282:	f080 8107 	bcs.w	8008494 <__udivmoddi4+0x290>
 8008286:	45a4      	cmp	ip, r4
 8008288:	f240 8104 	bls.w	8008494 <__udivmoddi4+0x290>
 800828c:	3802      	subs	r0, #2
 800828e:	442c      	add	r4, r5
 8008290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008294:	eba4 040c 	sub.w	r4, r4, ip
 8008298:	2700      	movs	r7, #0
 800829a:	b11e      	cbz	r6, 80082a4 <__udivmoddi4+0xa0>
 800829c:	40d4      	lsrs	r4, r2
 800829e:	2300      	movs	r3, #0
 80082a0:	e9c6 4300 	strd	r4, r3, [r6]
 80082a4:	4639      	mov	r1, r7
 80082a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082aa:	428b      	cmp	r3, r1
 80082ac:	d909      	bls.n	80082c2 <__udivmoddi4+0xbe>
 80082ae:	2e00      	cmp	r6, #0
 80082b0:	f000 80eb 	beq.w	800848a <__udivmoddi4+0x286>
 80082b4:	2700      	movs	r7, #0
 80082b6:	e9c6 0100 	strd	r0, r1, [r6]
 80082ba:	4638      	mov	r0, r7
 80082bc:	4639      	mov	r1, r7
 80082be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c2:	fab3 f783 	clz	r7, r3
 80082c6:	2f00      	cmp	r7, #0
 80082c8:	d147      	bne.n	800835a <__udivmoddi4+0x156>
 80082ca:	428b      	cmp	r3, r1
 80082cc:	d302      	bcc.n	80082d4 <__udivmoddi4+0xd0>
 80082ce:	4282      	cmp	r2, r0
 80082d0:	f200 80fa 	bhi.w	80084c8 <__udivmoddi4+0x2c4>
 80082d4:	1a84      	subs	r4, r0, r2
 80082d6:	eb61 0303 	sbc.w	r3, r1, r3
 80082da:	2001      	movs	r0, #1
 80082dc:	4698      	mov	r8, r3
 80082de:	2e00      	cmp	r6, #0
 80082e0:	d0e0      	beq.n	80082a4 <__udivmoddi4+0xa0>
 80082e2:	e9c6 4800 	strd	r4, r8, [r6]
 80082e6:	e7dd      	b.n	80082a4 <__udivmoddi4+0xa0>
 80082e8:	b902      	cbnz	r2, 80082ec <__udivmoddi4+0xe8>
 80082ea:	deff      	udf	#255	; 0xff
 80082ec:	fab2 f282 	clz	r2, r2
 80082f0:	2a00      	cmp	r2, #0
 80082f2:	f040 808f 	bne.w	8008414 <__udivmoddi4+0x210>
 80082f6:	1b49      	subs	r1, r1, r5
 80082f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80082fc:	fa1f f885 	uxth.w	r8, r5
 8008300:	2701      	movs	r7, #1
 8008302:	fbb1 fcfe 	udiv	ip, r1, lr
 8008306:	0c23      	lsrs	r3, r4, #16
 8008308:	fb0e 111c 	mls	r1, lr, ip, r1
 800830c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008310:	fb08 f10c 	mul.w	r1, r8, ip
 8008314:	4299      	cmp	r1, r3
 8008316:	d907      	bls.n	8008328 <__udivmoddi4+0x124>
 8008318:	18eb      	adds	r3, r5, r3
 800831a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800831e:	d202      	bcs.n	8008326 <__udivmoddi4+0x122>
 8008320:	4299      	cmp	r1, r3
 8008322:	f200 80cd 	bhi.w	80084c0 <__udivmoddi4+0x2bc>
 8008326:	4684      	mov	ip, r0
 8008328:	1a59      	subs	r1, r3, r1
 800832a:	b2a3      	uxth	r3, r4
 800832c:	fbb1 f0fe 	udiv	r0, r1, lr
 8008330:	fb0e 1410 	mls	r4, lr, r0, r1
 8008334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008338:	fb08 f800 	mul.w	r8, r8, r0
 800833c:	45a0      	cmp	r8, r4
 800833e:	d907      	bls.n	8008350 <__udivmoddi4+0x14c>
 8008340:	192c      	adds	r4, r5, r4
 8008342:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008346:	d202      	bcs.n	800834e <__udivmoddi4+0x14a>
 8008348:	45a0      	cmp	r8, r4
 800834a:	f200 80b6 	bhi.w	80084ba <__udivmoddi4+0x2b6>
 800834e:	4618      	mov	r0, r3
 8008350:	eba4 0408 	sub.w	r4, r4, r8
 8008354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008358:	e79f      	b.n	800829a <__udivmoddi4+0x96>
 800835a:	f1c7 0c20 	rsb	ip, r7, #32
 800835e:	40bb      	lsls	r3, r7
 8008360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008364:	ea4e 0e03 	orr.w	lr, lr, r3
 8008368:	fa01 f407 	lsl.w	r4, r1, r7
 800836c:	fa20 f50c 	lsr.w	r5, r0, ip
 8008370:	fa21 f30c 	lsr.w	r3, r1, ip
 8008374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008378:	4325      	orrs	r5, r4
 800837a:	fbb3 f9f8 	udiv	r9, r3, r8
 800837e:	0c2c      	lsrs	r4, r5, #16
 8008380:	fb08 3319 	mls	r3, r8, r9, r3
 8008384:	fa1f fa8e 	uxth.w	sl, lr
 8008388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800838c:	fb09 f40a 	mul.w	r4, r9, sl
 8008390:	429c      	cmp	r4, r3
 8008392:	fa02 f207 	lsl.w	r2, r2, r7
 8008396:	fa00 f107 	lsl.w	r1, r0, r7
 800839a:	d90b      	bls.n	80083b4 <__udivmoddi4+0x1b0>
 800839c:	eb1e 0303 	adds.w	r3, lr, r3
 80083a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80083a4:	f080 8087 	bcs.w	80084b6 <__udivmoddi4+0x2b2>
 80083a8:	429c      	cmp	r4, r3
 80083aa:	f240 8084 	bls.w	80084b6 <__udivmoddi4+0x2b2>
 80083ae:	f1a9 0902 	sub.w	r9, r9, #2
 80083b2:	4473      	add	r3, lr
 80083b4:	1b1b      	subs	r3, r3, r4
 80083b6:	b2ad      	uxth	r5, r5
 80083b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80083bc:	fb08 3310 	mls	r3, r8, r0, r3
 80083c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80083c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80083c8:	45a2      	cmp	sl, r4
 80083ca:	d908      	bls.n	80083de <__udivmoddi4+0x1da>
 80083cc:	eb1e 0404 	adds.w	r4, lr, r4
 80083d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80083d4:	d26b      	bcs.n	80084ae <__udivmoddi4+0x2aa>
 80083d6:	45a2      	cmp	sl, r4
 80083d8:	d969      	bls.n	80084ae <__udivmoddi4+0x2aa>
 80083da:	3802      	subs	r0, #2
 80083dc:	4474      	add	r4, lr
 80083de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80083e2:	fba0 8902 	umull	r8, r9, r0, r2
 80083e6:	eba4 040a 	sub.w	r4, r4, sl
 80083ea:	454c      	cmp	r4, r9
 80083ec:	46c2      	mov	sl, r8
 80083ee:	464b      	mov	r3, r9
 80083f0:	d354      	bcc.n	800849c <__udivmoddi4+0x298>
 80083f2:	d051      	beq.n	8008498 <__udivmoddi4+0x294>
 80083f4:	2e00      	cmp	r6, #0
 80083f6:	d069      	beq.n	80084cc <__udivmoddi4+0x2c8>
 80083f8:	ebb1 050a 	subs.w	r5, r1, sl
 80083fc:	eb64 0403 	sbc.w	r4, r4, r3
 8008400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008404:	40fd      	lsrs	r5, r7
 8008406:	40fc      	lsrs	r4, r7
 8008408:	ea4c 0505 	orr.w	r5, ip, r5
 800840c:	e9c6 5400 	strd	r5, r4, [r6]
 8008410:	2700      	movs	r7, #0
 8008412:	e747      	b.n	80082a4 <__udivmoddi4+0xa0>
 8008414:	f1c2 0320 	rsb	r3, r2, #32
 8008418:	fa20 f703 	lsr.w	r7, r0, r3
 800841c:	4095      	lsls	r5, r2
 800841e:	fa01 f002 	lsl.w	r0, r1, r2
 8008422:	fa21 f303 	lsr.w	r3, r1, r3
 8008426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800842a:	4338      	orrs	r0, r7
 800842c:	0c01      	lsrs	r1, r0, #16
 800842e:	fbb3 f7fe 	udiv	r7, r3, lr
 8008432:	fa1f f885 	uxth.w	r8, r5
 8008436:	fb0e 3317 	mls	r3, lr, r7, r3
 800843a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800843e:	fb07 f308 	mul.w	r3, r7, r8
 8008442:	428b      	cmp	r3, r1
 8008444:	fa04 f402 	lsl.w	r4, r4, r2
 8008448:	d907      	bls.n	800845a <__udivmoddi4+0x256>
 800844a:	1869      	adds	r1, r5, r1
 800844c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8008450:	d22f      	bcs.n	80084b2 <__udivmoddi4+0x2ae>
 8008452:	428b      	cmp	r3, r1
 8008454:	d92d      	bls.n	80084b2 <__udivmoddi4+0x2ae>
 8008456:	3f02      	subs	r7, #2
 8008458:	4429      	add	r1, r5
 800845a:	1acb      	subs	r3, r1, r3
 800845c:	b281      	uxth	r1, r0
 800845e:	fbb3 f0fe 	udiv	r0, r3, lr
 8008462:	fb0e 3310 	mls	r3, lr, r0, r3
 8008466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800846a:	fb00 f308 	mul.w	r3, r0, r8
 800846e:	428b      	cmp	r3, r1
 8008470:	d907      	bls.n	8008482 <__udivmoddi4+0x27e>
 8008472:	1869      	adds	r1, r5, r1
 8008474:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8008478:	d217      	bcs.n	80084aa <__udivmoddi4+0x2a6>
 800847a:	428b      	cmp	r3, r1
 800847c:	d915      	bls.n	80084aa <__udivmoddi4+0x2a6>
 800847e:	3802      	subs	r0, #2
 8008480:	4429      	add	r1, r5
 8008482:	1ac9      	subs	r1, r1, r3
 8008484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008488:	e73b      	b.n	8008302 <__udivmoddi4+0xfe>
 800848a:	4637      	mov	r7, r6
 800848c:	4630      	mov	r0, r6
 800848e:	e709      	b.n	80082a4 <__udivmoddi4+0xa0>
 8008490:	4607      	mov	r7, r0
 8008492:	e6e7      	b.n	8008264 <__udivmoddi4+0x60>
 8008494:	4618      	mov	r0, r3
 8008496:	e6fb      	b.n	8008290 <__udivmoddi4+0x8c>
 8008498:	4541      	cmp	r1, r8
 800849a:	d2ab      	bcs.n	80083f4 <__udivmoddi4+0x1f0>
 800849c:	ebb8 0a02 	subs.w	sl, r8, r2
 80084a0:	eb69 020e 	sbc.w	r2, r9, lr
 80084a4:	3801      	subs	r0, #1
 80084a6:	4613      	mov	r3, r2
 80084a8:	e7a4      	b.n	80083f4 <__udivmoddi4+0x1f0>
 80084aa:	4660      	mov	r0, ip
 80084ac:	e7e9      	b.n	8008482 <__udivmoddi4+0x27e>
 80084ae:	4618      	mov	r0, r3
 80084b0:	e795      	b.n	80083de <__udivmoddi4+0x1da>
 80084b2:	4667      	mov	r7, ip
 80084b4:	e7d1      	b.n	800845a <__udivmoddi4+0x256>
 80084b6:	4681      	mov	r9, r0
 80084b8:	e77c      	b.n	80083b4 <__udivmoddi4+0x1b0>
 80084ba:	3802      	subs	r0, #2
 80084bc:	442c      	add	r4, r5
 80084be:	e747      	b.n	8008350 <__udivmoddi4+0x14c>
 80084c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80084c4:	442b      	add	r3, r5
 80084c6:	e72f      	b.n	8008328 <__udivmoddi4+0x124>
 80084c8:	4638      	mov	r0, r7
 80084ca:	e708      	b.n	80082de <__udivmoddi4+0xda>
 80084cc:	4637      	mov	r7, r6
 80084ce:	e6e9      	b.n	80082a4 <__udivmoddi4+0xa0>

080084d0 <__aeabi_idiv0>:
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop

080084d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80084d8:	4b0e      	ldr	r3, [pc, #56]	; (8008514 <HAL_Init+0x40>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a0d      	ldr	r2, [pc, #52]	; (8008514 <HAL_Init+0x40>)
 80084de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80084e4:	4b0b      	ldr	r3, [pc, #44]	; (8008514 <HAL_Init+0x40>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a0a      	ldr	r2, [pc, #40]	; (8008514 <HAL_Init+0x40>)
 80084ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80084f0:	4b08      	ldr	r3, [pc, #32]	; (8008514 <HAL_Init+0x40>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a07      	ldr	r2, [pc, #28]	; (8008514 <HAL_Init+0x40>)
 80084f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80084fc:	2003      	movs	r0, #3
 80084fe:	f000 f92f 	bl	8008760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008502:	2000      	movs	r0, #0
 8008504:	f000 f808 	bl	8008518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008508:	f001 fe42 	bl	800a190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	40023c00 	.word	0x40023c00

08008518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008520:	4b12      	ldr	r3, [pc, #72]	; (800856c <HAL_InitTick+0x54>)
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	4b12      	ldr	r3, [pc, #72]	; (8008570 <HAL_InitTick+0x58>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	4619      	mov	r1, r3
 800852a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800852e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008532:	fbb2 f3f3 	udiv	r3, r2, r3
 8008536:	4618      	mov	r0, r3
 8008538:	f000 f95e 	bl	80087f8 <HAL_SYSTICK_Config>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e00e      	b.n	8008564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b0f      	cmp	r3, #15
 800854a:	d80a      	bhi.n	8008562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800854c:	2200      	movs	r2, #0
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008554:	f000 f924 	bl	80087a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008558:	4a06      	ldr	r2, [pc, #24]	; (8008574 <HAL_InitTick+0x5c>)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	e000      	b.n	8008564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
}
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	20000008 	.word	0x20000008
 8008570:	20000004 	.word	0x20000004
 8008574:	20000000 	.word	0x20000000

08008578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008578:	b480      	push	{r7}
 800857a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800857c:	4b06      	ldr	r3, [pc, #24]	; (8008598 <HAL_IncTick+0x20>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	461a      	mov	r2, r3
 8008582:	4b06      	ldr	r3, [pc, #24]	; (800859c <HAL_IncTick+0x24>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4413      	add	r3, r2
 8008588:	4a04      	ldr	r2, [pc, #16]	; (800859c <HAL_IncTick+0x24>)
 800858a:	6013      	str	r3, [r2, #0]
}
 800858c:	bf00      	nop
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	20000004 	.word	0x20000004
 800859c:	20000028 	.word	0x20000028

080085a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80085a0:	b480      	push	{r7}
 80085a2:	af00      	add	r7, sp, #0
  return uwTick;
 80085a4:	4b03      	ldr	r3, [pc, #12]	; (80085b4 <HAL_GetTick+0x14>)
 80085a6:	681b      	ldr	r3, [r3, #0]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	20000028 	.word	0x20000028

080085b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80085c0:	f7ff ffee 	bl	80085a0 <HAL_GetTick>
 80085c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085d0:	d005      	beq.n	80085de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80085d2:	4b09      	ldr	r3, [pc, #36]	; (80085f8 <HAL_Delay+0x40>)
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	4413      	add	r3, r2
 80085dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80085de:	bf00      	nop
 80085e0:	f7ff ffde 	bl	80085a0 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d8f7      	bhi.n	80085e0 <HAL_Delay+0x28>
  {
  }
}
 80085f0:	bf00      	nop
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	20000004 	.word	0x20000004

080085fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f003 0307 	and.w	r3, r3, #7
 800860a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800860c:	4b0c      	ldr	r3, [pc, #48]	; (8008640 <__NVIC_SetPriorityGrouping+0x44>)
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008618:	4013      	ands	r3, r2
 800861a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800862c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800862e:	4a04      	ldr	r2, [pc, #16]	; (8008640 <__NVIC_SetPriorityGrouping+0x44>)
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	60d3      	str	r3, [r2, #12]
}
 8008634:	bf00      	nop
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	e000ed00 	.word	0xe000ed00

08008644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008648:	4b04      	ldr	r3, [pc, #16]	; (800865c <__NVIC_GetPriorityGrouping+0x18>)
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	0a1b      	lsrs	r3, r3, #8
 800864e:	f003 0307 	and.w	r3, r3, #7
}
 8008652:	4618      	mov	r0, r3
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	e000ed00 	.word	0xe000ed00

08008660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	4603      	mov	r3, r0
 8008668:	6039      	str	r1, [r7, #0]
 800866a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800866c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008670:	2b00      	cmp	r3, #0
 8008672:	db0a      	blt.n	800868a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	b2da      	uxtb	r2, r3
 8008678:	490c      	ldr	r1, [pc, #48]	; (80086ac <__NVIC_SetPriority+0x4c>)
 800867a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800867e:	0112      	lsls	r2, r2, #4
 8008680:	b2d2      	uxtb	r2, r2
 8008682:	440b      	add	r3, r1
 8008684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008688:	e00a      	b.n	80086a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	b2da      	uxtb	r2, r3
 800868e:	4908      	ldr	r1, [pc, #32]	; (80086b0 <__NVIC_SetPriority+0x50>)
 8008690:	79fb      	ldrb	r3, [r7, #7]
 8008692:	f003 030f 	and.w	r3, r3, #15
 8008696:	3b04      	subs	r3, #4
 8008698:	0112      	lsls	r2, r2, #4
 800869a:	b2d2      	uxtb	r2, r2
 800869c:	440b      	add	r3, r1
 800869e:	761a      	strb	r2, [r3, #24]
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	e000e100 	.word	0xe000e100
 80086b0:	e000ed00 	.word	0xe000ed00

080086b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b089      	sub	sp, #36	; 0x24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f003 0307 	and.w	r3, r3, #7
 80086c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	f1c3 0307 	rsb	r3, r3, #7
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	bf28      	it	cs
 80086d2:	2304      	movcs	r3, #4
 80086d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	3304      	adds	r3, #4
 80086da:	2b06      	cmp	r3, #6
 80086dc:	d902      	bls.n	80086e4 <NVIC_EncodePriority+0x30>
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	3b03      	subs	r3, #3
 80086e2:	e000      	b.n	80086e6 <NVIC_EncodePriority+0x32>
 80086e4:	2300      	movs	r3, #0
 80086e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	fa02 f303 	lsl.w	r3, r2, r3
 80086f2:	43da      	mvns	r2, r3
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	401a      	ands	r2, r3
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	fa01 f303 	lsl.w	r3, r1, r3
 8008706:	43d9      	mvns	r1, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800870c:	4313      	orrs	r3, r2
         );
}
 800870e:	4618      	mov	r0, r3
 8008710:	3724      	adds	r7, #36	; 0x24
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
	...

0800871c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3b01      	subs	r3, #1
 8008728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800872c:	d301      	bcc.n	8008732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800872e:	2301      	movs	r3, #1
 8008730:	e00f      	b.n	8008752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008732:	4a0a      	ldr	r2, [pc, #40]	; (800875c <SysTick_Config+0x40>)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	3b01      	subs	r3, #1
 8008738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800873a:	210f      	movs	r1, #15
 800873c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008740:	f7ff ff8e 	bl	8008660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008744:	4b05      	ldr	r3, [pc, #20]	; (800875c <SysTick_Config+0x40>)
 8008746:	2200      	movs	r2, #0
 8008748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800874a:	4b04      	ldr	r3, [pc, #16]	; (800875c <SysTick_Config+0x40>)
 800874c:	2207      	movs	r2, #7
 800874e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	e000e010 	.word	0xe000e010

08008760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b07      	cmp	r3, #7
 800876c:	d00f      	beq.n	800878e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b06      	cmp	r3, #6
 8008772:	d00c      	beq.n	800878e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b05      	cmp	r3, #5
 8008778:	d009      	beq.n	800878e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b04      	cmp	r3, #4
 800877e:	d006      	beq.n	800878e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2b03      	cmp	r3, #3
 8008784:	d003      	beq.n	800878e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8008786:	2192      	movs	r1, #146	; 0x92
 8008788:	4804      	ldr	r0, [pc, #16]	; (800879c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800878a:	f001 fcf6 	bl	800a17a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff ff34 	bl	80085fc <__NVIC_SetPriorityGrouping>
}
 8008794:	bf00      	nop
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	0800a454 	.word	0x0800a454

080087a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	4603      	mov	r3, r0
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b0f      	cmp	r3, #15
 80087b6:	d903      	bls.n	80087c0 <HAL_NVIC_SetPriority+0x20>
 80087b8:	21aa      	movs	r1, #170	; 0xaa
 80087ba:	480e      	ldr	r0, [pc, #56]	; (80087f4 <HAL_NVIC_SetPriority+0x54>)
 80087bc:	f001 fcdd 	bl	800a17a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2b0f      	cmp	r3, #15
 80087c4:	d903      	bls.n	80087ce <HAL_NVIC_SetPriority+0x2e>
 80087c6:	21ab      	movs	r1, #171	; 0xab
 80087c8:	480a      	ldr	r0, [pc, #40]	; (80087f4 <HAL_NVIC_SetPriority+0x54>)
 80087ca:	f001 fcd6 	bl	800a17a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80087ce:	f7ff ff39 	bl	8008644 <__NVIC_GetPriorityGrouping>
 80087d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	68b9      	ldr	r1, [r7, #8]
 80087d8:	6978      	ldr	r0, [r7, #20]
 80087da:	f7ff ff6b 	bl	80086b4 <NVIC_EncodePriority>
 80087de:	4602      	mov	r2, r0
 80087e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087e4:	4611      	mov	r1, r2
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7ff ff3a 	bl	8008660 <__NVIC_SetPriority>
}
 80087ec:	bf00      	nop
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	0800a454 	.word	0x0800a454

080087f8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7ff ff8b 	bl	800871c <SysTick_Config>
 8008806:	4603      	mov	r3, r0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b088      	sub	sp, #32
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800881a:	2300      	movs	r3, #0
 800881c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800881e:	2300      	movs	r3, #0
 8008820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008822:	2300      	movs	r3, #0
 8008824:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a3b      	ldr	r2, [pc, #236]	; (8008918 <HAL_GPIO_Init+0x108>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d017      	beq.n	800885e <HAL_GPIO_Init+0x4e>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a3a      	ldr	r2, [pc, #232]	; (800891c <HAL_GPIO_Init+0x10c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d013      	beq.n	800885e <HAL_GPIO_Init+0x4e>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a39      	ldr	r2, [pc, #228]	; (8008920 <HAL_GPIO_Init+0x110>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d00f      	beq.n	800885e <HAL_GPIO_Init+0x4e>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a38      	ldr	r2, [pc, #224]	; (8008924 <HAL_GPIO_Init+0x114>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d00b      	beq.n	800885e <HAL_GPIO_Init+0x4e>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a37      	ldr	r2, [pc, #220]	; (8008928 <HAL_GPIO_Init+0x118>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d007      	beq.n	800885e <HAL_GPIO_Init+0x4e>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a36      	ldr	r2, [pc, #216]	; (800892c <HAL_GPIO_Init+0x11c>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d003      	beq.n	800885e <HAL_GPIO_Init+0x4e>
 8008856:	21b3      	movs	r1, #179	; 0xb3
 8008858:	4835      	ldr	r0, [pc, #212]	; (8008930 <HAL_GPIO_Init+0x120>)
 800885a:	f001 fc8e 	bl	800a17a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	b29b      	uxth	r3, r3
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <HAL_GPIO_Init+0x64>
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	0c1b      	lsrs	r3, r3, #16
 800886e:	041b      	lsls	r3, r3, #16
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <HAL_GPIO_Init+0x6c>
 8008874:	21b4      	movs	r1, #180	; 0xb4
 8008876:	482e      	ldr	r0, [pc, #184]	; (8008930 <HAL_GPIO_Init+0x120>)
 8008878:	f001 fc7f 	bl	800a17a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d035      	beq.n	80088f0 <HAL_GPIO_Init+0xe0>
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d031      	beq.n	80088f0 <HAL_GPIO_Init+0xe0>
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	2b11      	cmp	r3, #17
 8008892:	d02d      	beq.n	80088f0 <HAL_GPIO_Init+0xe0>
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	2b02      	cmp	r3, #2
 800889a:	d029      	beq.n	80088f0 <HAL_GPIO_Init+0xe0>
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	2b12      	cmp	r3, #18
 80088a2:	d025      	beq.n	80088f0 <HAL_GPIO_Init+0xe0>
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	4a22      	ldr	r2, [pc, #136]	; (8008934 <HAL_GPIO_Init+0x124>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d020      	beq.n	80088f0 <HAL_GPIO_Init+0xe0>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	4a21      	ldr	r2, [pc, #132]	; (8008938 <HAL_GPIO_Init+0x128>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d01b      	beq.n	80088f0 <HAL_GPIO_Init+0xe0>
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	4a1f      	ldr	r2, [pc, #124]	; (800893c <HAL_GPIO_Init+0x12c>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d016      	beq.n	80088f0 <HAL_GPIO_Init+0xe0>
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	4a1e      	ldr	r2, [pc, #120]	; (8008940 <HAL_GPIO_Init+0x130>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d011      	beq.n	80088f0 <HAL_GPIO_Init+0xe0>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	4a1c      	ldr	r2, [pc, #112]	; (8008944 <HAL_GPIO_Init+0x134>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d00c      	beq.n	80088f0 <HAL_GPIO_Init+0xe0>
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	4a1b      	ldr	r2, [pc, #108]	; (8008948 <HAL_GPIO_Init+0x138>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d007      	beq.n	80088f0 <HAL_GPIO_Init+0xe0>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d003      	beq.n	80088f0 <HAL_GPIO_Init+0xe0>
 80088e8:	21b5      	movs	r1, #181	; 0xb5
 80088ea:	4811      	ldr	r0, [pc, #68]	; (8008930 <HAL_GPIO_Init+0x120>)
 80088ec:	f001 fc45 	bl	800a17a <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00b      	beq.n	8008910 <HAL_GPIO_Init+0x100>
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d007      	beq.n	8008910 <HAL_GPIO_Init+0x100>
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	2b02      	cmp	r3, #2
 8008906:	d003      	beq.n	8008910 <HAL_GPIO_Init+0x100>
 8008908:	21b6      	movs	r1, #182	; 0xb6
 800890a:	4809      	ldr	r0, [pc, #36]	; (8008930 <HAL_GPIO_Init+0x120>)
 800890c:	f001 fc35 	bl	800a17a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008910:	2300      	movs	r3, #0
 8008912:	61fb      	str	r3, [r7, #28]
 8008914:	e201      	b.n	8008d1a <HAL_GPIO_Init+0x50a>
 8008916:	bf00      	nop
 8008918:	40020000 	.word	0x40020000
 800891c:	40020400 	.word	0x40020400
 8008920:	40020800 	.word	0x40020800
 8008924:	40020c00 	.word	0x40020c00
 8008928:	40021000 	.word	0x40021000
 800892c:	40021c00 	.word	0x40021c00
 8008930:	0800a490 	.word	0x0800a490
 8008934:	10110000 	.word	0x10110000
 8008938:	10210000 	.word	0x10210000
 800893c:	10310000 	.word	0x10310000
 8008940:	10120000 	.word	0x10120000
 8008944:	10220000 	.word	0x10220000
 8008948:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800894c:	2201      	movs	r2, #1
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	fa02 f303 	lsl.w	r3, r2, r3
 8008954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	4013      	ands	r3, r2
 800895e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	429a      	cmp	r2, r3
 8008966:	f040 81d5 	bne.w	8008d14 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	2b02      	cmp	r3, #2
 8008970:	d004      	beq.n	800897c <HAL_GPIO_Init+0x16c>
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	2b12      	cmp	r3, #18
 8008978:	f040 808c 	bne.w	8008a94 <HAL_GPIO_Init+0x284>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d063      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	2b0c      	cmp	r3, #12
 800898a:	d05f      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d05b      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d057      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d053      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d04f      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d04b      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d047      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d043      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d03f      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d03b      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	2b04      	cmp	r3, #4
 80089da:	d037      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	2b04      	cmp	r3, #4
 80089e2:	d033      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	2b04      	cmp	r3, #4
 80089ea:	d02f      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	2b05      	cmp	r3, #5
 80089f2:	d02b      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	2b05      	cmp	r3, #5
 80089fa:	d027      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	2b06      	cmp	r3, #6
 8008a02:	d023      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	2b05      	cmp	r3, #5
 8008a0a:	d01f      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	2b07      	cmp	r3, #7
 8008a12:	d01b      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	2b07      	cmp	r3, #7
 8008a1a:	d017      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	d013      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	2b0a      	cmp	r3, #10
 8008a2a:	d00f      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	2b09      	cmp	r3, #9
 8008a32:	d00b      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	2b09      	cmp	r3, #9
 8008a3a:	d007      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	2b0f      	cmp	r3, #15
 8008a42:	d003      	beq.n	8008a4c <HAL_GPIO_Init+0x23c>
 8008a44:	21c7      	movs	r1, #199	; 0xc7
 8008a46:	4879      	ldr	r0, [pc, #484]	; (8008c2c <HAL_GPIO_Init+0x41c>)
 8008a48:	f001 fb97 	bl	800a17a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	08da      	lsrs	r2, r3, #3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	3208      	adds	r2, #8
 8008a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	f003 0307 	and.w	r3, r3, #7
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	220f      	movs	r2, #15
 8008a64:	fa02 f303 	lsl.w	r3, r2, r3
 8008a68:	43db      	mvns	r3, r3
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	691a      	ldr	r2, [r3, #16]
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	08da      	lsrs	r2, r3, #3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3208      	adds	r2, #8
 8008a8e:	69b9      	ldr	r1, [r7, #24]
 8008a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	005b      	lsls	r3, r3, #1
 8008a9e:	2203      	movs	r2, #3
 8008aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa4:	43db      	mvns	r3, r3
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f003 0203 	and.w	r2, r3, #3
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	005b      	lsls	r3, r3, #1
 8008ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d00b      	beq.n	8008ae8 <HAL_GPIO_Init+0x2d8>
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d007      	beq.n	8008ae8 <HAL_GPIO_Init+0x2d8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008adc:	2b11      	cmp	r3, #17
 8008ade:	d003      	beq.n	8008ae8 <HAL_GPIO_Init+0x2d8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	2b12      	cmp	r3, #18
 8008ae6:	d144      	bne.n	8008b72 <HAL_GPIO_Init+0x362>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00f      	beq.n	8008b10 <HAL_GPIO_Init+0x300>
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d00b      	beq.n	8008b10 <HAL_GPIO_Init+0x300>
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d007      	beq.n	8008b10 <HAL_GPIO_Init+0x300>
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	2b03      	cmp	r3, #3
 8008b06:	d003      	beq.n	8008b10 <HAL_GPIO_Init+0x300>
 8008b08:	21da      	movs	r1, #218	; 0xda
 8008b0a:	4848      	ldr	r0, [pc, #288]	; (8008c2c <HAL_GPIO_Init+0x41c>)
 8008b0c:	f001 fb35 	bl	800a17a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	005b      	lsls	r3, r3, #1
 8008b1a:	2203      	movs	r2, #3
 8008b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b20:	43db      	mvns	r3, r3
 8008b22:	69ba      	ldr	r2, [r7, #24]
 8008b24:	4013      	ands	r3, r2
 8008b26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	68da      	ldr	r2, [r3, #12]
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	fa02 f303 	lsl.w	r3, r2, r3
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	69ba      	ldr	r2, [r7, #24]
 8008b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008b46:	2201      	movs	r2, #1
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4e:	43db      	mvns	r3, r3
 8008b50:	69ba      	ldr	r2, [r7, #24]
 8008b52:	4013      	ands	r3, r2
 8008b54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	091b      	lsrs	r3, r3, #4
 8008b5c:	f003 0201 	and.w	r2, r3, #1
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	fa02 f303 	lsl.w	r3, r2, r3
 8008b66:	69ba      	ldr	r2, [r7, #24]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	69ba      	ldr	r2, [r7, #24]
 8008b70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	005b      	lsls	r3, r3, #1
 8008b7c:	2203      	movs	r2, #3
 8008b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b82:	43db      	mvns	r3, r3
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	4013      	ands	r3, r2
 8008b88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	689a      	ldr	r2, [r3, #8]
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	005b      	lsls	r3, r3, #1
 8008b92:	fa02 f303 	lsl.w	r3, r2, r3
 8008b96:	69ba      	ldr	r2, [r7, #24]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 80b2 	beq.w	8008d14 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	60fb      	str	r3, [r7, #12]
 8008bb4:	4b1e      	ldr	r3, [pc, #120]	; (8008c30 <HAL_GPIO_Init+0x420>)
 8008bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb8:	4a1d      	ldr	r2, [pc, #116]	; (8008c30 <HAL_GPIO_Init+0x420>)
 8008bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bbe:	6453      	str	r3, [r2, #68]	; 0x44
 8008bc0:	4b1b      	ldr	r3, [pc, #108]	; (8008c30 <HAL_GPIO_Init+0x420>)
 8008bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008bcc:	4a19      	ldr	r2, [pc, #100]	; (8008c34 <HAL_GPIO_Init+0x424>)
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	089b      	lsrs	r3, r3, #2
 8008bd2:	3302      	adds	r3, #2
 8008bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	f003 0303 	and.w	r3, r3, #3
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	220f      	movs	r2, #15
 8008be4:	fa02 f303 	lsl.w	r3, r2, r3
 8008be8:	43db      	mvns	r3, r3
 8008bea:	69ba      	ldr	r2, [r7, #24]
 8008bec:	4013      	ands	r3, r2
 8008bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a11      	ldr	r2, [pc, #68]	; (8008c38 <HAL_GPIO_Init+0x428>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d029      	beq.n	8008c4c <HAL_GPIO_Init+0x43c>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a10      	ldr	r2, [pc, #64]	; (8008c3c <HAL_GPIO_Init+0x42c>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d013      	beq.n	8008c28 <HAL_GPIO_Init+0x418>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a0f      	ldr	r2, [pc, #60]	; (8008c40 <HAL_GPIO_Init+0x430>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d00d      	beq.n	8008c24 <HAL_GPIO_Init+0x414>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a0e      	ldr	r2, [pc, #56]	; (8008c44 <HAL_GPIO_Init+0x434>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d007      	beq.n	8008c20 <HAL_GPIO_Init+0x410>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a0d      	ldr	r2, [pc, #52]	; (8008c48 <HAL_GPIO_Init+0x438>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d101      	bne.n	8008c1c <HAL_GPIO_Init+0x40c>
 8008c18:	2304      	movs	r3, #4
 8008c1a:	e018      	b.n	8008c4e <HAL_GPIO_Init+0x43e>
 8008c1c:	2307      	movs	r3, #7
 8008c1e:	e016      	b.n	8008c4e <HAL_GPIO_Init+0x43e>
 8008c20:	2303      	movs	r3, #3
 8008c22:	e014      	b.n	8008c4e <HAL_GPIO_Init+0x43e>
 8008c24:	2302      	movs	r3, #2
 8008c26:	e012      	b.n	8008c4e <HAL_GPIO_Init+0x43e>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e010      	b.n	8008c4e <HAL_GPIO_Init+0x43e>
 8008c2c:	0800a490 	.word	0x0800a490
 8008c30:	40023800 	.word	0x40023800
 8008c34:	40013800 	.word	0x40013800
 8008c38:	40020000 	.word	0x40020000
 8008c3c:	40020400 	.word	0x40020400
 8008c40:	40020800 	.word	0x40020800
 8008c44:	40020c00 	.word	0x40020c00
 8008c48:	40021000 	.word	0x40021000
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	69fa      	ldr	r2, [r7, #28]
 8008c50:	f002 0203 	and.w	r2, r2, #3
 8008c54:	0092      	lsls	r2, r2, #2
 8008c56:	4093      	lsls	r3, r2
 8008c58:	69ba      	ldr	r2, [r7, #24]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c5e:	4933      	ldr	r1, [pc, #204]	; (8008d2c <HAL_GPIO_Init+0x51c>)
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	089b      	lsrs	r3, r3, #2
 8008c64:	3302      	adds	r3, #2
 8008c66:	69ba      	ldr	r2, [r7, #24]
 8008c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008c6c:	4b30      	ldr	r3, [pc, #192]	; (8008d30 <HAL_GPIO_Init+0x520>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	43db      	mvns	r3, r3
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	4013      	ands	r3, r2
 8008c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d003      	beq.n	8008c90 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8008c88:	69ba      	ldr	r2, [r7, #24]
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008c90:	4a27      	ldr	r2, [pc, #156]	; (8008d30 <HAL_GPIO_Init+0x520>)
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008c96:	4b26      	ldr	r3, [pc, #152]	; (8008d30 <HAL_GPIO_Init+0x520>)
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	43db      	mvns	r3, r3
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d003      	beq.n	8008cba <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8008cb2:	69ba      	ldr	r2, [r7, #24]
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008cba:	4a1d      	ldr	r2, [pc, #116]	; (8008d30 <HAL_GPIO_Init+0x520>)
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008cc0:	4b1b      	ldr	r3, [pc, #108]	; (8008d30 <HAL_GPIO_Init+0x520>)
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	43db      	mvns	r3, r3
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	4013      	ands	r3, r2
 8008cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d003      	beq.n	8008ce4 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8008cdc:	69ba      	ldr	r2, [r7, #24]
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008ce4:	4a12      	ldr	r2, [pc, #72]	; (8008d30 <HAL_GPIO_Init+0x520>)
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008cea:	4b11      	ldr	r3, [pc, #68]	; (8008d30 <HAL_GPIO_Init+0x520>)
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	43db      	mvns	r3, r3
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d003      	beq.n	8008d0e <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008d0e:	4a08      	ldr	r2, [pc, #32]	; (8008d30 <HAL_GPIO_Init+0x520>)
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	3301      	adds	r3, #1
 8008d18:	61fb      	str	r3, [r7, #28]
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	2b0f      	cmp	r3, #15
 8008d1e:	f67f ae15 	bls.w	800894c <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8008d22:	bf00      	nop
 8008d24:	3720      	adds	r7, #32
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	40013800 	.word	0x40013800
 8008d30:	40013c00 	.word	0x40013c00

08008d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	807b      	strh	r3, [r7, #2]
 8008d40:	4613      	mov	r3, r2
 8008d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8008d44:	887b      	ldrh	r3, [r7, #2]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d004      	beq.n	8008d54 <HAL_GPIO_WritePin+0x20>
 8008d4a:	887b      	ldrh	r3, [r7, #2]
 8008d4c:	0c1b      	lsrs	r3, r3, #16
 8008d4e:	041b      	lsls	r3, r3, #16
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d004      	beq.n	8008d5e <HAL_GPIO_WritePin+0x2a>
 8008d54:	f240 119f 	movw	r1, #415	; 0x19f
 8008d58:	480e      	ldr	r0, [pc, #56]	; (8008d94 <HAL_GPIO_WritePin+0x60>)
 8008d5a:	f001 fa0e 	bl	800a17a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8008d5e:	787b      	ldrb	r3, [r7, #1]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d007      	beq.n	8008d74 <HAL_GPIO_WritePin+0x40>
 8008d64:	787b      	ldrb	r3, [r7, #1]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d004      	beq.n	8008d74 <HAL_GPIO_WritePin+0x40>
 8008d6a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8008d6e:	4809      	ldr	r0, [pc, #36]	; (8008d94 <HAL_GPIO_WritePin+0x60>)
 8008d70:	f001 fa03 	bl	800a17a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8008d74:	787b      	ldrb	r3, [r7, #1]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d7a:	887a      	ldrh	r2, [r7, #2]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008d80:	e003      	b.n	8008d8a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008d82:	887b      	ldrh	r3, [r7, #2]
 8008d84:	041a      	lsls	r2, r3, #16
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	619a      	str	r2, [r3, #24]
}
 8008d8a:	bf00      	nop
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	0800a490 	.word	0x0800a490

08008d98 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8008da4:	887b      	ldrh	r3, [r7, #2]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d004      	beq.n	8008db4 <HAL_GPIO_TogglePin+0x1c>
 8008daa:	887b      	ldrh	r3, [r7, #2]
 8008dac:	0c1b      	lsrs	r3, r3, #16
 8008dae:	041b      	lsls	r3, r3, #16
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d004      	beq.n	8008dbe <HAL_GPIO_TogglePin+0x26>
 8008db4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8008db8:	480a      	ldr	r0, [pc, #40]	; (8008de4 <HAL_GPIO_TogglePin+0x4c>)
 8008dba:	f001 f9de 	bl	800a17a <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	695a      	ldr	r2, [r3, #20]
 8008dc2:	887b      	ldrh	r3, [r7, #2]
 8008dc4:	401a      	ands	r2, r3
 8008dc6:	887b      	ldrh	r3, [r7, #2]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d104      	bne.n	8008dd6 <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008dcc:	887b      	ldrh	r3, [r7, #2]
 8008dce:	041a      	lsls	r2, r3, #16
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8008dd4:	e002      	b.n	8008ddc <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8008dd6:	887a      	ldrh	r2, [r7, #2]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	619a      	str	r2, [r3, #24]
}
 8008ddc:	bf00      	nop
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	0800a490 	.word	0x0800a490

08008de8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e2e0      	b.n	80093bc <HAL_RCC_OscConfig+0x5d4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b0f      	cmp	r3, #15
 8008e00:	d903      	bls.n	8008e0a <HAL_RCC_OscConfig+0x22>
 8008e02:	21e8      	movs	r1, #232	; 0xe8
 8008e04:	48a3      	ldr	r0, [pc, #652]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008e06:	f001 f9b8 	bl	800a17a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 0301 	and.w	r3, r3, #1
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 8088 	beq.w	8008f28 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00d      	beq.n	8008e3c <HAL_RCC_OscConfig+0x54>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e28:	d008      	beq.n	8008e3c <HAL_RCC_OscConfig+0x54>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e32:	d003      	beq.n	8008e3c <HAL_RCC_OscConfig+0x54>
 8008e34:	21ed      	movs	r1, #237	; 0xed
 8008e36:	4897      	ldr	r0, [pc, #604]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008e38:	f001 f99f 	bl	800a17a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e3c:	4b96      	ldr	r3, [pc, #600]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f003 030c 	and.w	r3, r3, #12
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	d00c      	beq.n	8008e62 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e48:	4b93      	ldr	r3, [pc, #588]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e50:	2b08      	cmp	r3, #8
 8008e52:	d112      	bne.n	8008e7a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e54:	4b90      	ldr	r3, [pc, #576]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e60:	d10b      	bne.n	8008e7a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e62:	4b8d      	ldr	r3, [pc, #564]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d05b      	beq.n	8008f26 <HAL_RCC_OscConfig+0x13e>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d157      	bne.n	8008f26 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e2a0      	b.n	80093bc <HAL_RCC_OscConfig+0x5d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e82:	d106      	bne.n	8008e92 <HAL_RCC_OscConfig+0xaa>
 8008e84:	4b84      	ldr	r3, [pc, #528]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a83      	ldr	r2, [pc, #524]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	e01d      	b.n	8008ece <HAL_RCC_OscConfig+0xe6>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e9a:	d10c      	bne.n	8008eb6 <HAL_RCC_OscConfig+0xce>
 8008e9c:	4b7e      	ldr	r3, [pc, #504]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a7d      	ldr	r2, [pc, #500]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008ea2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	4b7b      	ldr	r3, [pc, #492]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a7a      	ldr	r2, [pc, #488]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008eb2:	6013      	str	r3, [r2, #0]
 8008eb4:	e00b      	b.n	8008ece <HAL_RCC_OscConfig+0xe6>
 8008eb6:	4b78      	ldr	r3, [pc, #480]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a77      	ldr	r2, [pc, #476]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ec0:	6013      	str	r3, [r2, #0]
 8008ec2:	4b75      	ldr	r3, [pc, #468]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a74      	ldr	r2, [pc, #464]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ecc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d013      	beq.n	8008efe <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ed6:	f7ff fb63 	bl	80085a0 <HAL_GetTick>
 8008eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008edc:	e008      	b.n	8008ef0 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ede:	f7ff fb5f 	bl	80085a0 <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	2b64      	cmp	r3, #100	; 0x64
 8008eea:	d901      	bls.n	8008ef0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e265      	b.n	80093bc <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ef0:	4b69      	ldr	r3, [pc, #420]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0f0      	beq.n	8008ede <HAL_RCC_OscConfig+0xf6>
 8008efc:	e014      	b.n	8008f28 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008efe:	f7ff fb4f 	bl	80085a0 <HAL_GetTick>
 8008f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f04:	e008      	b.n	8008f18 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f06:	f7ff fb4b 	bl	80085a0 <HAL_GetTick>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	2b64      	cmp	r3, #100	; 0x64
 8008f12:	d901      	bls.n	8008f18 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e251      	b.n	80093bc <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f18:	4b5f      	ldr	r3, [pc, #380]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1f0      	bne.n	8008f06 <HAL_RCC_OscConfig+0x11e>
 8008f24:	e000      	b.n	8008f28 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f26:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0302 	and.w	r3, r3, #2
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d079      	beq.n	8009028 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d008      	beq.n	8008f4e <HAL_RCC_OscConfig+0x166>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d004      	beq.n	8008f4e <HAL_RCC_OscConfig+0x166>
 8008f44:	f240 111f 	movw	r1, #287	; 0x11f
 8008f48:	4852      	ldr	r0, [pc, #328]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008f4a:	f001 f916 	bl	800a17a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	2b1f      	cmp	r3, #31
 8008f54:	d904      	bls.n	8008f60 <HAL_RCC_OscConfig+0x178>
 8008f56:	f44f 7190 	mov.w	r1, #288	; 0x120
 8008f5a:	484e      	ldr	r0, [pc, #312]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 8008f5c:	f001 f90d 	bl	800a17a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f60:	4b4d      	ldr	r3, [pc, #308]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f003 030c 	and.w	r3, r3, #12
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00b      	beq.n	8008f84 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f6c:	4b4a      	ldr	r3, [pc, #296]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f74:	2b08      	cmp	r3, #8
 8008f76:	d11c      	bne.n	8008fb2 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f78:	4b47      	ldr	r3, [pc, #284]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d116      	bne.n	8008fb2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f84:	4b44      	ldr	r3, [pc, #272]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0302 	and.w	r3, r3, #2
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d005      	beq.n	8008f9c <HAL_RCC_OscConfig+0x1b4>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d001      	beq.n	8008f9c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e20f      	b.n	80093bc <HAL_RCC_OscConfig+0x5d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f9c:	4b3e      	ldr	r3, [pc, #248]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	00db      	lsls	r3, r3, #3
 8008faa:	493b      	ldr	r1, [pc, #236]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008fac:	4313      	orrs	r3, r2
 8008fae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008fb0:	e03a      	b.n	8009028 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d020      	beq.n	8008ffc <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008fba:	4b38      	ldr	r3, [pc, #224]	; (800909c <HAL_RCC_OscConfig+0x2b4>)
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fc0:	f7ff faee 	bl	80085a0 <HAL_GetTick>
 8008fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fc6:	e008      	b.n	8008fda <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fc8:	f7ff faea 	bl	80085a0 <HAL_GetTick>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d901      	bls.n	8008fda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e1f0      	b.n	80093bc <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fda:	4b2f      	ldr	r3, [pc, #188]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d0f0      	beq.n	8008fc8 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fe6:	4b2c      	ldr	r3, [pc, #176]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	00db      	lsls	r3, r3, #3
 8008ff4:	4928      	ldr	r1, [pc, #160]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	600b      	str	r3, [r1, #0]
 8008ffa:	e015      	b.n	8009028 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ffc:	4b27      	ldr	r3, [pc, #156]	; (800909c <HAL_RCC_OscConfig+0x2b4>)
 8008ffe:	2200      	movs	r2, #0
 8009000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009002:	f7ff facd 	bl	80085a0 <HAL_GetTick>
 8009006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009008:	e008      	b.n	800901c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800900a:	f7ff fac9 	bl	80085a0 <HAL_GetTick>
 800900e:	4602      	mov	r2, r0
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	2b02      	cmp	r3, #2
 8009016:	d901      	bls.n	800901c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8009018:	2303      	movs	r3, #3
 800901a:	e1cf      	b.n	80093bc <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800901c:	4b1e      	ldr	r3, [pc, #120]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0302 	and.w	r3, r3, #2
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1f0      	bne.n	800900a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0308 	and.w	r3, r3, #8
 8009030:	2b00      	cmp	r3, #0
 8009032:	d046      	beq.n	80090c2 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d008      	beq.n	800904e <HAL_RCC_OscConfig+0x266>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	695b      	ldr	r3, [r3, #20]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d004      	beq.n	800904e <HAL_RCC_OscConfig+0x266>
 8009044:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8009048:	4812      	ldr	r0, [pc, #72]	; (8009094 <HAL_RCC_OscConfig+0x2ac>)
 800904a:	f001 f896 	bl	800a17a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d016      	beq.n	8009084 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009056:	4b12      	ldr	r3, [pc, #72]	; (80090a0 <HAL_RCC_OscConfig+0x2b8>)
 8009058:	2201      	movs	r2, #1
 800905a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800905c:	f7ff faa0 	bl	80085a0 <HAL_GetTick>
 8009060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009062:	e008      	b.n	8009076 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009064:	f7ff fa9c 	bl	80085a0 <HAL_GetTick>
 8009068:	4602      	mov	r2, r0
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	2b02      	cmp	r3, #2
 8009070:	d901      	bls.n	8009076 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8009072:	2303      	movs	r3, #3
 8009074:	e1a2      	b.n	80093bc <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009076:	4b08      	ldr	r3, [pc, #32]	; (8009098 <HAL_RCC_OscConfig+0x2b0>)
 8009078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800907a:	f003 0302 	and.w	r3, r3, #2
 800907e:	2b00      	cmp	r3, #0
 8009080:	d0f0      	beq.n	8009064 <HAL_RCC_OscConfig+0x27c>
 8009082:	e01e      	b.n	80090c2 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009084:	4b06      	ldr	r3, [pc, #24]	; (80090a0 <HAL_RCC_OscConfig+0x2b8>)
 8009086:	2200      	movs	r2, #0
 8009088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800908a:	f7ff fa89 	bl	80085a0 <HAL_GetTick>
 800908e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009090:	e011      	b.n	80090b6 <HAL_RCC_OscConfig+0x2ce>
 8009092:	bf00      	nop
 8009094:	0800a4cc 	.word	0x0800a4cc
 8009098:	40023800 	.word	0x40023800
 800909c:	42470000 	.word	0x42470000
 80090a0:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80090a4:	f7ff fa7c 	bl	80085a0 <HAL_GetTick>
 80090a8:	4602      	mov	r2, r0
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d901      	bls.n	80090b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e182      	b.n	80093bc <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80090b6:	4b97      	ldr	r3, [pc, #604]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 80090b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090ba:	f003 0302 	and.w	r3, r3, #2
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1f0      	bne.n	80090a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 0304 	and.w	r3, r3, #4
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f000 80a8 	beq.w	8009220 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090d0:	2300      	movs	r3, #0
 80090d2:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00c      	beq.n	80090f6 <HAL_RCC_OscConfig+0x30e>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d008      	beq.n	80090f6 <HAL_RCC_OscConfig+0x30e>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	2b05      	cmp	r3, #5
 80090ea:	d004      	beq.n	80090f6 <HAL_RCC_OscConfig+0x30e>
 80090ec:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80090f0:	4889      	ldr	r0, [pc, #548]	; (8009318 <HAL_RCC_OscConfig+0x530>)
 80090f2:	f001 f842 	bl	800a17a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090f6:	4b87      	ldr	r3, [pc, #540]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 80090f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10f      	bne.n	8009122 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009102:	2300      	movs	r3, #0
 8009104:	60fb      	str	r3, [r7, #12]
 8009106:	4b83      	ldr	r3, [pc, #524]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 8009108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910a:	4a82      	ldr	r2, [pc, #520]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 800910c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009110:	6413      	str	r3, [r2, #64]	; 0x40
 8009112:	4b80      	ldr	r3, [pc, #512]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 8009114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800911a:	60fb      	str	r3, [r7, #12]
 800911c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800911e:	2301      	movs	r3, #1
 8009120:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009122:	4b7e      	ldr	r3, [pc, #504]	; (800931c <HAL_RCC_OscConfig+0x534>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800912a:	2b00      	cmp	r3, #0
 800912c:	d118      	bne.n	8009160 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800912e:	4b7b      	ldr	r3, [pc, #492]	; (800931c <HAL_RCC_OscConfig+0x534>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a7a      	ldr	r2, [pc, #488]	; (800931c <HAL_RCC_OscConfig+0x534>)
 8009134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800913a:	f7ff fa31 	bl	80085a0 <HAL_GetTick>
 800913e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009140:	e008      	b.n	8009154 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009142:	f7ff fa2d 	bl	80085a0 <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	2b02      	cmp	r3, #2
 800914e:	d901      	bls.n	8009154 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e133      	b.n	80093bc <HAL_RCC_OscConfig+0x5d4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009154:	4b71      	ldr	r3, [pc, #452]	; (800931c <HAL_RCC_OscConfig+0x534>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800915c:	2b00      	cmp	r3, #0
 800915e:	d0f0      	beq.n	8009142 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d106      	bne.n	8009176 <HAL_RCC_OscConfig+0x38e>
 8009168:	4b6a      	ldr	r3, [pc, #424]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 800916a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916c:	4a69      	ldr	r2, [pc, #420]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 800916e:	f043 0301 	orr.w	r3, r3, #1
 8009172:	6713      	str	r3, [r2, #112]	; 0x70
 8009174:	e01c      	b.n	80091b0 <HAL_RCC_OscConfig+0x3c8>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	2b05      	cmp	r3, #5
 800917c:	d10c      	bne.n	8009198 <HAL_RCC_OscConfig+0x3b0>
 800917e:	4b65      	ldr	r3, [pc, #404]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 8009180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009182:	4a64      	ldr	r2, [pc, #400]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 8009184:	f043 0304 	orr.w	r3, r3, #4
 8009188:	6713      	str	r3, [r2, #112]	; 0x70
 800918a:	4b62      	ldr	r3, [pc, #392]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 800918c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918e:	4a61      	ldr	r2, [pc, #388]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 8009190:	f043 0301 	orr.w	r3, r3, #1
 8009194:	6713      	str	r3, [r2, #112]	; 0x70
 8009196:	e00b      	b.n	80091b0 <HAL_RCC_OscConfig+0x3c8>
 8009198:	4b5e      	ldr	r3, [pc, #376]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 800919a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800919c:	4a5d      	ldr	r2, [pc, #372]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 800919e:	f023 0301 	bic.w	r3, r3, #1
 80091a2:	6713      	str	r3, [r2, #112]	; 0x70
 80091a4:	4b5b      	ldr	r3, [pc, #364]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 80091a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a8:	4a5a      	ldr	r2, [pc, #360]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 80091aa:	f023 0304 	bic.w	r3, r3, #4
 80091ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d015      	beq.n	80091e4 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091b8:	f7ff f9f2 	bl	80085a0 <HAL_GetTick>
 80091bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091be:	e00a      	b.n	80091d6 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091c0:	f7ff f9ee 	bl	80085a0 <HAL_GetTick>
 80091c4:	4602      	mov	r2, r0
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d901      	bls.n	80091d6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80091d2:	2303      	movs	r3, #3
 80091d4:	e0f2      	b.n	80093bc <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091d6:	4b4f      	ldr	r3, [pc, #316]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 80091d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091da:	f003 0302 	and.w	r3, r3, #2
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0ee      	beq.n	80091c0 <HAL_RCC_OscConfig+0x3d8>
 80091e2:	e014      	b.n	800920e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091e4:	f7ff f9dc 	bl	80085a0 <HAL_GetTick>
 80091e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091ea:	e00a      	b.n	8009202 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091ec:	f7ff f9d8 	bl	80085a0 <HAL_GetTick>
 80091f0:	4602      	mov	r2, r0
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d901      	bls.n	8009202 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 80091fe:	2303      	movs	r3, #3
 8009200:	e0dc      	b.n	80093bc <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009202:	4b44      	ldr	r3, [pc, #272]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 8009204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009206:	f003 0302 	and.w	r3, r3, #2
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1ee      	bne.n	80091ec <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800920e:	7dfb      	ldrb	r3, [r7, #23]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d105      	bne.n	8009220 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009214:	4b3f      	ldr	r3, [pc, #252]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 8009216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009218:	4a3e      	ldr	r2, [pc, #248]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 800921a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800921e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00c      	beq.n	8009242 <HAL_RCC_OscConfig+0x45a>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d008      	beq.n	8009242 <HAL_RCC_OscConfig+0x45a>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	2b02      	cmp	r3, #2
 8009236:	d004      	beq.n	8009242 <HAL_RCC_OscConfig+0x45a>
 8009238:	f240 11cf 	movw	r1, #463	; 0x1cf
 800923c:	4836      	ldr	r0, [pc, #216]	; (8009318 <HAL_RCC_OscConfig+0x530>)
 800923e:	f000 ff9c 	bl	800a17a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	2b00      	cmp	r3, #0
 8009248:	f000 80b7 	beq.w	80093ba <HAL_RCC_OscConfig+0x5d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800924c:	4b31      	ldr	r3, [pc, #196]	; (8009314 <HAL_RCC_OscConfig+0x52c>)
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f003 030c 	and.w	r3, r3, #12
 8009254:	2b08      	cmp	r3, #8
 8009256:	f000 80ae 	beq.w	80093b6 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	2b02      	cmp	r3, #2
 8009260:	f040 8092 	bne.w	8009388 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	69db      	ldr	r3, [r3, #28]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d009      	beq.n	8009280 <HAL_RCC_OscConfig+0x498>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	69db      	ldr	r3, [r3, #28]
 8009270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009274:	d004      	beq.n	8009280 <HAL_RCC_OscConfig+0x498>
 8009276:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800927a:	4827      	ldr	r0, [pc, #156]	; (8009318 <HAL_RCC_OscConfig+0x530>)
 800927c:	f000 ff7d 	bl	800a17a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a1b      	ldr	r3, [r3, #32]
 8009284:	2b3f      	cmp	r3, #63	; 0x3f
 8009286:	d904      	bls.n	8009292 <HAL_RCC_OscConfig+0x4aa>
 8009288:	f240 11d9 	movw	r1, #473	; 0x1d9
 800928c:	4822      	ldr	r0, [pc, #136]	; (8009318 <HAL_RCC_OscConfig+0x530>)
 800928e:	f000 ff74 	bl	800a17a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009296:	2b31      	cmp	r3, #49	; 0x31
 8009298:	d904      	bls.n	80092a4 <HAL_RCC_OscConfig+0x4bc>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80092a2:	d904      	bls.n	80092ae <HAL_RCC_OscConfig+0x4c6>
 80092a4:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80092a8:	481b      	ldr	r0, [pc, #108]	; (8009318 <HAL_RCC_OscConfig+0x530>)
 80092aa:	f000 ff66 	bl	800a17a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d010      	beq.n	80092d8 <HAL_RCC_OscConfig+0x4f0>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	d00c      	beq.n	80092d8 <HAL_RCC_OscConfig+0x4f0>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c2:	2b06      	cmp	r3, #6
 80092c4:	d008      	beq.n	80092d8 <HAL_RCC_OscConfig+0x4f0>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ca:	2b08      	cmp	r3, #8
 80092cc:	d004      	beq.n	80092d8 <HAL_RCC_OscConfig+0x4f0>
 80092ce:	f240 11db 	movw	r1, #475	; 0x1db
 80092d2:	4811      	ldr	r0, [pc, #68]	; (8009318 <HAL_RCC_OscConfig+0x530>)
 80092d4:	f000 ff51 	bl	800a17a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d903      	bls.n	80092e8 <HAL_RCC_OscConfig+0x500>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	2b0f      	cmp	r3, #15
 80092e6:	d904      	bls.n	80092f2 <HAL_RCC_OscConfig+0x50a>
 80092e8:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80092ec:	480a      	ldr	r0, [pc, #40]	; (8009318 <HAL_RCC_OscConfig+0x530>)
 80092ee:	f000 ff44 	bl	800a17a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092f2:	4b0b      	ldr	r3, [pc, #44]	; (8009320 <HAL_RCC_OscConfig+0x538>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092f8:	f7ff f952 	bl	80085a0 <HAL_GetTick>
 80092fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092fe:	e011      	b.n	8009324 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009300:	f7ff f94e 	bl	80085a0 <HAL_GetTick>
 8009304:	4602      	mov	r2, r0
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	2b02      	cmp	r3, #2
 800930c:	d90a      	bls.n	8009324 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800930e:	2303      	movs	r3, #3
 8009310:	e054      	b.n	80093bc <HAL_RCC_OscConfig+0x5d4>
 8009312:	bf00      	nop
 8009314:	40023800 	.word	0x40023800
 8009318:	0800a4cc 	.word	0x0800a4cc
 800931c:	40007000 	.word	0x40007000
 8009320:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009324:	4b27      	ldr	r3, [pc, #156]	; (80093c4 <HAL_RCC_OscConfig+0x5dc>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1e7      	bne.n	8009300 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	69da      	ldr	r2, [r3, #28]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a1b      	ldr	r3, [r3, #32]
 8009338:	431a      	orrs	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933e:	019b      	lsls	r3, r3, #6
 8009340:	431a      	orrs	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009346:	085b      	lsrs	r3, r3, #1
 8009348:	3b01      	subs	r3, #1
 800934a:	041b      	lsls	r3, r3, #16
 800934c:	431a      	orrs	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009352:	061b      	lsls	r3, r3, #24
 8009354:	491b      	ldr	r1, [pc, #108]	; (80093c4 <HAL_RCC_OscConfig+0x5dc>)
 8009356:	4313      	orrs	r3, r2
 8009358:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800935a:	4b1b      	ldr	r3, [pc, #108]	; (80093c8 <HAL_RCC_OscConfig+0x5e0>)
 800935c:	2201      	movs	r2, #1
 800935e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009360:	f7ff f91e 	bl	80085a0 <HAL_GetTick>
 8009364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009366:	e008      	b.n	800937a <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009368:	f7ff f91a 	bl	80085a0 <HAL_GetTick>
 800936c:	4602      	mov	r2, r0
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	2b02      	cmp	r3, #2
 8009374:	d901      	bls.n	800937a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8009376:	2303      	movs	r3, #3
 8009378:	e020      	b.n	80093bc <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800937a:	4b12      	ldr	r3, [pc, #72]	; (80093c4 <HAL_RCC_OscConfig+0x5dc>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d0f0      	beq.n	8009368 <HAL_RCC_OscConfig+0x580>
 8009386:	e018      	b.n	80093ba <HAL_RCC_OscConfig+0x5d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009388:	4b0f      	ldr	r3, [pc, #60]	; (80093c8 <HAL_RCC_OscConfig+0x5e0>)
 800938a:	2200      	movs	r2, #0
 800938c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800938e:	f7ff f907 	bl	80085a0 <HAL_GetTick>
 8009392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009394:	e008      	b.n	80093a8 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009396:	f7ff f903 	bl	80085a0 <HAL_GetTick>
 800939a:	4602      	mov	r2, r0
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d901      	bls.n	80093a8 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e009      	b.n	80093bc <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093a8:	4b06      	ldr	r3, [pc, #24]	; (80093c4 <HAL_RCC_OscConfig+0x5dc>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1f0      	bne.n	8009396 <HAL_RCC_OscConfig+0x5ae>
 80093b4:	e001      	b.n	80093ba <HAL_RCC_OscConfig+0x5d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	e000      	b.n	80093bc <HAL_RCC_OscConfig+0x5d4>
    }
  }
  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3718      	adds	r7, #24
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	40023800 	.word	0x40023800
 80093c8:	42470060 	.word	0x42470060

080093cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e172      	b.n	80096c6 <HAL_RCC_ClockConfig+0x2fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d003      	beq.n	80093f0 <HAL_RCC_ClockConfig+0x24>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b0f      	cmp	r3, #15
 80093ee:	d904      	bls.n	80093fa <HAL_RCC_ClockConfig+0x2e>
 80093f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80093f4:	487b      	ldr	r0, [pc, #492]	; (80095e4 <HAL_RCC_ClockConfig+0x218>)
 80093f6:	f000 fec0 	bl	800a17a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d019      	beq.n	8009434 <HAL_RCC_ClockConfig+0x68>
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	2b01      	cmp	r3, #1
 8009404:	d016      	beq.n	8009434 <HAL_RCC_ClockConfig+0x68>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b02      	cmp	r3, #2
 800940a:	d013      	beq.n	8009434 <HAL_RCC_ClockConfig+0x68>
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2b03      	cmp	r3, #3
 8009410:	d010      	beq.n	8009434 <HAL_RCC_ClockConfig+0x68>
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	2b04      	cmp	r3, #4
 8009416:	d00d      	beq.n	8009434 <HAL_RCC_ClockConfig+0x68>
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	2b05      	cmp	r3, #5
 800941c:	d00a      	beq.n	8009434 <HAL_RCC_ClockConfig+0x68>
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2b06      	cmp	r3, #6
 8009422:	d007      	beq.n	8009434 <HAL_RCC_ClockConfig+0x68>
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	2b07      	cmp	r3, #7
 8009428:	d004      	beq.n	8009434 <HAL_RCC_ClockConfig+0x68>
 800942a:	f240 2141 	movw	r1, #577	; 0x241
 800942e:	486d      	ldr	r0, [pc, #436]	; (80095e4 <HAL_RCC_ClockConfig+0x218>)
 8009430:	f000 fea3 	bl	800a17a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009434:	4b6c      	ldr	r3, [pc, #432]	; (80095e8 <HAL_RCC_ClockConfig+0x21c>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 030f 	and.w	r3, r3, #15
 800943c:	683a      	ldr	r2, [r7, #0]
 800943e:	429a      	cmp	r2, r3
 8009440:	d90c      	bls.n	800945c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009442:	4b69      	ldr	r3, [pc, #420]	; (80095e8 <HAL_RCC_ClockConfig+0x21c>)
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	b2d2      	uxtb	r2, r2
 8009448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800944a:	4b67      	ldr	r3, [pc, #412]	; (80095e8 <HAL_RCC_ClockConfig+0x21c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 030f 	and.w	r3, r3, #15
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	429a      	cmp	r2, r3
 8009456:	d001      	beq.n	800945c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	e134      	b.n	80096c6 <HAL_RCC_ClockConfig+0x2fa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 0302 	and.w	r3, r3, #2
 8009464:	2b00      	cmp	r3, #0
 8009466:	d049      	beq.n	80094fc <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0304 	and.w	r3, r3, #4
 8009470:	2b00      	cmp	r3, #0
 8009472:	d005      	beq.n	8009480 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009474:	4b5d      	ldr	r3, [pc, #372]	; (80095ec <HAL_RCC_ClockConfig+0x220>)
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	4a5c      	ldr	r2, [pc, #368]	; (80095ec <HAL_RCC_ClockConfig+0x220>)
 800947a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800947e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 0308 	and.w	r3, r3, #8
 8009488:	2b00      	cmp	r3, #0
 800948a:	d005      	beq.n	8009498 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800948c:	4b57      	ldr	r3, [pc, #348]	; (80095ec <HAL_RCC_ClockConfig+0x220>)
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	4a56      	ldr	r2, [pc, #344]	; (80095ec <HAL_RCC_ClockConfig+0x220>)
 8009492:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d024      	beq.n	80094ea <HAL_RCC_ClockConfig+0x11e>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	2b80      	cmp	r3, #128	; 0x80
 80094a6:	d020      	beq.n	80094ea <HAL_RCC_ClockConfig+0x11e>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	2b90      	cmp	r3, #144	; 0x90
 80094ae:	d01c      	beq.n	80094ea <HAL_RCC_ClockConfig+0x11e>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	2ba0      	cmp	r3, #160	; 0xa0
 80094b6:	d018      	beq.n	80094ea <HAL_RCC_ClockConfig+0x11e>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	2bb0      	cmp	r3, #176	; 0xb0
 80094be:	d014      	beq.n	80094ea <HAL_RCC_ClockConfig+0x11e>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	2bc0      	cmp	r3, #192	; 0xc0
 80094c6:	d010      	beq.n	80094ea <HAL_RCC_ClockConfig+0x11e>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	2bd0      	cmp	r3, #208	; 0xd0
 80094ce:	d00c      	beq.n	80094ea <HAL_RCC_ClockConfig+0x11e>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	2be0      	cmp	r3, #224	; 0xe0
 80094d6:	d008      	beq.n	80094ea <HAL_RCC_ClockConfig+0x11e>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	2bf0      	cmp	r3, #240	; 0xf0
 80094de:	d004      	beq.n	80094ea <HAL_RCC_ClockConfig+0x11e>
 80094e0:	f44f 7119 	mov.w	r1, #612	; 0x264
 80094e4:	483f      	ldr	r0, [pc, #252]	; (80095e4 <HAL_RCC_ClockConfig+0x218>)
 80094e6:	f000 fe48 	bl	800a17a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094ea:	4b40      	ldr	r3, [pc, #256]	; (80095ec <HAL_RCC_ClockConfig+0x220>)
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	493d      	ldr	r1, [pc, #244]	; (80095ec <HAL_RCC_ClockConfig+0x220>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	2b00      	cmp	r3, #0
 8009506:	d059      	beq.n	80095bc <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d010      	beq.n	8009532 <HAL_RCC_ClockConfig+0x166>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d00c      	beq.n	8009532 <HAL_RCC_ClockConfig+0x166>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	2b02      	cmp	r3, #2
 800951e:	d008      	beq.n	8009532 <HAL_RCC_ClockConfig+0x166>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	2b03      	cmp	r3, #3
 8009526:	d004      	beq.n	8009532 <HAL_RCC_ClockConfig+0x166>
 8009528:	f240 216b 	movw	r1, #619	; 0x26b
 800952c:	482d      	ldr	r0, [pc, #180]	; (80095e4 <HAL_RCC_ClockConfig+0x218>)
 800952e:	f000 fe24 	bl	800a17a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d107      	bne.n	800954a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800953a:	4b2c      	ldr	r3, [pc, #176]	; (80095ec <HAL_RCC_ClockConfig+0x220>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009542:	2b00      	cmp	r3, #0
 8009544:	d119      	bne.n	800957a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e0bd      	b.n	80096c6 <HAL_RCC_ClockConfig+0x2fa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	2b02      	cmp	r3, #2
 8009550:	d003      	beq.n	800955a <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009556:	2b03      	cmp	r3, #3
 8009558:	d107      	bne.n	800956a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800955a:	4b24      	ldr	r3, [pc, #144]	; (80095ec <HAL_RCC_ClockConfig+0x220>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009562:	2b00      	cmp	r3, #0
 8009564:	d109      	bne.n	800957a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e0ad      	b.n	80096c6 <HAL_RCC_ClockConfig+0x2fa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800956a:	4b20      	ldr	r3, [pc, #128]	; (80095ec <HAL_RCC_ClockConfig+0x220>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0302 	and.w	r3, r3, #2
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	e0a5      	b.n	80096c6 <HAL_RCC_ClockConfig+0x2fa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800957a:	4b1c      	ldr	r3, [pc, #112]	; (80095ec <HAL_RCC_ClockConfig+0x220>)
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	f023 0203 	bic.w	r2, r3, #3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	4919      	ldr	r1, [pc, #100]	; (80095ec <HAL_RCC_ClockConfig+0x220>)
 8009588:	4313      	orrs	r3, r2
 800958a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800958c:	f7ff f808 	bl	80085a0 <HAL_GetTick>
 8009590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009592:	e00a      	b.n	80095aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009594:	f7ff f804 	bl	80085a0 <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	f241 3288 	movw	r2, #5000	; 0x1388
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d901      	bls.n	80095aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	e08d      	b.n	80096c6 <HAL_RCC_ClockConfig+0x2fa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095aa:	4b10      	ldr	r3, [pc, #64]	; (80095ec <HAL_RCC_ClockConfig+0x220>)
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	f003 020c 	and.w	r2, r3, #12
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d1eb      	bne.n	8009594 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80095bc:	4b0a      	ldr	r3, [pc, #40]	; (80095e8 <HAL_RCC_ClockConfig+0x21c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 030f 	and.w	r3, r3, #15
 80095c4:	683a      	ldr	r2, [r7, #0]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d212      	bcs.n	80095f0 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095ca:	4b07      	ldr	r3, [pc, #28]	; (80095e8 <HAL_RCC_ClockConfig+0x21c>)
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	b2d2      	uxtb	r2, r2
 80095d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095d2:	4b05      	ldr	r3, [pc, #20]	; (80095e8 <HAL_RCC_ClockConfig+0x21c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 030f 	and.w	r3, r3, #15
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d007      	beq.n	80095f0 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e070      	b.n	80096c6 <HAL_RCC_ClockConfig+0x2fa>
 80095e4:	0800a4cc 	.word	0x0800a4cc
 80095e8:	40023c00 	.word	0x40023c00
 80095ec:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0304 	and.w	r3, r3, #4
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d025      	beq.n	8009648 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d018      	beq.n	8009636 <HAL_RCC_ClockConfig+0x26a>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800960c:	d013      	beq.n	8009636 <HAL_RCC_ClockConfig+0x26a>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009616:	d00e      	beq.n	8009636 <HAL_RCC_ClockConfig+0x26a>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8009620:	d009      	beq.n	8009636 <HAL_RCC_ClockConfig+0x26a>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800962a:	d004      	beq.n	8009636 <HAL_RCC_ClockConfig+0x26a>
 800962c:	f240 21a9 	movw	r1, #681	; 0x2a9
 8009630:	4827      	ldr	r0, [pc, #156]	; (80096d0 <HAL_RCC_ClockConfig+0x304>)
 8009632:	f000 fda2 	bl	800a17a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009636:	4b27      	ldr	r3, [pc, #156]	; (80096d4 <HAL_RCC_ClockConfig+0x308>)
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	4924      	ldr	r1, [pc, #144]	; (80096d4 <HAL_RCC_ClockConfig+0x308>)
 8009644:	4313      	orrs	r3, r2
 8009646:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 0308 	and.w	r3, r3, #8
 8009650:	2b00      	cmp	r3, #0
 8009652:	d026      	beq.n	80096a2 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d018      	beq.n	800968e <HAL_RCC_ClockConfig+0x2c2>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009664:	d013      	beq.n	800968e <HAL_RCC_ClockConfig+0x2c2>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800966e:	d00e      	beq.n	800968e <HAL_RCC_ClockConfig+0x2c2>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8009678:	d009      	beq.n	800968e <HAL_RCC_ClockConfig+0x2c2>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8009682:	d004      	beq.n	800968e <HAL_RCC_ClockConfig+0x2c2>
 8009684:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8009688:	4811      	ldr	r0, [pc, #68]	; (80096d0 <HAL_RCC_ClockConfig+0x304>)
 800968a:	f000 fd76 	bl	800a17a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800968e:	4b11      	ldr	r3, [pc, #68]	; (80096d4 <HAL_RCC_ClockConfig+0x308>)
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	00db      	lsls	r3, r3, #3
 800969c:	490d      	ldr	r1, [pc, #52]	; (80096d4 <HAL_RCC_ClockConfig+0x308>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80096a2:	f000 f81d 	bl	80096e0 <HAL_RCC_GetSysClockFreq>
 80096a6:	4601      	mov	r1, r0
 80096a8:	4b0a      	ldr	r3, [pc, #40]	; (80096d4 <HAL_RCC_ClockConfig+0x308>)
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	091b      	lsrs	r3, r3, #4
 80096ae:	f003 030f 	and.w	r3, r3, #15
 80096b2:	4a09      	ldr	r2, [pc, #36]	; (80096d8 <HAL_RCC_ClockConfig+0x30c>)
 80096b4:	5cd3      	ldrb	r3, [r2, r3]
 80096b6:	fa21 f303 	lsr.w	r3, r1, r3
 80096ba:	4a08      	ldr	r2, [pc, #32]	; (80096dc <HAL_RCC_ClockConfig+0x310>)
 80096bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80096be:	2000      	movs	r0, #0
 80096c0:	f7fe ff2a 	bl	8008518 <HAL_InitTick>

  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	0800a4cc 	.word	0x0800a4cc
 80096d4:	40023800 	.word	0x40023800
 80096d8:	0800a540 	.word	0x0800a540
 80096dc:	20000008 	.word	0x20000008

080096e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80096e6:	2300      	movs	r3, #0
 80096e8:	607b      	str	r3, [r7, #4]
 80096ea:	2300      	movs	r3, #0
 80096ec:	60fb      	str	r3, [r7, #12]
 80096ee:	2300      	movs	r3, #0
 80096f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80096f6:	4b63      	ldr	r3, [pc, #396]	; (8009884 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	f003 030c 	and.w	r3, r3, #12
 80096fe:	2b04      	cmp	r3, #4
 8009700:	d007      	beq.n	8009712 <HAL_RCC_GetSysClockFreq+0x32>
 8009702:	2b08      	cmp	r3, #8
 8009704:	d008      	beq.n	8009718 <HAL_RCC_GetSysClockFreq+0x38>
 8009706:	2b00      	cmp	r3, #0
 8009708:	f040 80b4 	bne.w	8009874 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800970c:	4b5e      	ldr	r3, [pc, #376]	; (8009888 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800970e:	60bb      	str	r3, [r7, #8]
       break;
 8009710:	e0b3      	b.n	800987a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009712:	4b5e      	ldr	r3, [pc, #376]	; (800988c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8009714:	60bb      	str	r3, [r7, #8]
      break;
 8009716:	e0b0      	b.n	800987a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009718:	4b5a      	ldr	r3, [pc, #360]	; (8009884 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009720:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009722:	4b58      	ldr	r3, [pc, #352]	; (8009884 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800972a:	2b00      	cmp	r3, #0
 800972c:	d04a      	beq.n	80097c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800972e:	4b55      	ldr	r3, [pc, #340]	; (8009884 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	099b      	lsrs	r3, r3, #6
 8009734:	f04f 0400 	mov.w	r4, #0
 8009738:	f240 11ff 	movw	r1, #511	; 0x1ff
 800973c:	f04f 0200 	mov.w	r2, #0
 8009740:	ea03 0501 	and.w	r5, r3, r1
 8009744:	ea04 0602 	and.w	r6, r4, r2
 8009748:	4629      	mov	r1, r5
 800974a:	4632      	mov	r2, r6
 800974c:	f04f 0300 	mov.w	r3, #0
 8009750:	f04f 0400 	mov.w	r4, #0
 8009754:	0154      	lsls	r4, r2, #5
 8009756:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800975a:	014b      	lsls	r3, r1, #5
 800975c:	4619      	mov	r1, r3
 800975e:	4622      	mov	r2, r4
 8009760:	1b49      	subs	r1, r1, r5
 8009762:	eb62 0206 	sbc.w	r2, r2, r6
 8009766:	f04f 0300 	mov.w	r3, #0
 800976a:	f04f 0400 	mov.w	r4, #0
 800976e:	0194      	lsls	r4, r2, #6
 8009770:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009774:	018b      	lsls	r3, r1, #6
 8009776:	1a5b      	subs	r3, r3, r1
 8009778:	eb64 0402 	sbc.w	r4, r4, r2
 800977c:	f04f 0100 	mov.w	r1, #0
 8009780:	f04f 0200 	mov.w	r2, #0
 8009784:	00e2      	lsls	r2, r4, #3
 8009786:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800978a:	00d9      	lsls	r1, r3, #3
 800978c:	460b      	mov	r3, r1
 800978e:	4614      	mov	r4, r2
 8009790:	195b      	adds	r3, r3, r5
 8009792:	eb44 0406 	adc.w	r4, r4, r6
 8009796:	f04f 0100 	mov.w	r1, #0
 800979a:	f04f 0200 	mov.w	r2, #0
 800979e:	0262      	lsls	r2, r4, #9
 80097a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80097a4:	0259      	lsls	r1, r3, #9
 80097a6:	460b      	mov	r3, r1
 80097a8:	4614      	mov	r4, r2
 80097aa:	4618      	mov	r0, r3
 80097ac:	4621      	mov	r1, r4
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f04f 0400 	mov.w	r4, #0
 80097b4:	461a      	mov	r2, r3
 80097b6:	4623      	mov	r3, r4
 80097b8:	f7fe fd0c 	bl	80081d4 <__aeabi_uldivmod>
 80097bc:	4603      	mov	r3, r0
 80097be:	460c      	mov	r4, r1
 80097c0:	60fb      	str	r3, [r7, #12]
 80097c2:	e049      	b.n	8009858 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097c4:	4b2f      	ldr	r3, [pc, #188]	; (8009884 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	099b      	lsrs	r3, r3, #6
 80097ca:	f04f 0400 	mov.w	r4, #0
 80097ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80097d2:	f04f 0200 	mov.w	r2, #0
 80097d6:	ea03 0501 	and.w	r5, r3, r1
 80097da:	ea04 0602 	and.w	r6, r4, r2
 80097de:	4629      	mov	r1, r5
 80097e0:	4632      	mov	r2, r6
 80097e2:	f04f 0300 	mov.w	r3, #0
 80097e6:	f04f 0400 	mov.w	r4, #0
 80097ea:	0154      	lsls	r4, r2, #5
 80097ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80097f0:	014b      	lsls	r3, r1, #5
 80097f2:	4619      	mov	r1, r3
 80097f4:	4622      	mov	r2, r4
 80097f6:	1b49      	subs	r1, r1, r5
 80097f8:	eb62 0206 	sbc.w	r2, r2, r6
 80097fc:	f04f 0300 	mov.w	r3, #0
 8009800:	f04f 0400 	mov.w	r4, #0
 8009804:	0194      	lsls	r4, r2, #6
 8009806:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800980a:	018b      	lsls	r3, r1, #6
 800980c:	1a5b      	subs	r3, r3, r1
 800980e:	eb64 0402 	sbc.w	r4, r4, r2
 8009812:	f04f 0100 	mov.w	r1, #0
 8009816:	f04f 0200 	mov.w	r2, #0
 800981a:	00e2      	lsls	r2, r4, #3
 800981c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009820:	00d9      	lsls	r1, r3, #3
 8009822:	460b      	mov	r3, r1
 8009824:	4614      	mov	r4, r2
 8009826:	195b      	adds	r3, r3, r5
 8009828:	eb44 0406 	adc.w	r4, r4, r6
 800982c:	f04f 0100 	mov.w	r1, #0
 8009830:	f04f 0200 	mov.w	r2, #0
 8009834:	02a2      	lsls	r2, r4, #10
 8009836:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800983a:	0299      	lsls	r1, r3, #10
 800983c:	460b      	mov	r3, r1
 800983e:	4614      	mov	r4, r2
 8009840:	4618      	mov	r0, r3
 8009842:	4621      	mov	r1, r4
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f04f 0400 	mov.w	r4, #0
 800984a:	461a      	mov	r2, r3
 800984c:	4623      	mov	r3, r4
 800984e:	f7fe fcc1 	bl	80081d4 <__aeabi_uldivmod>
 8009852:	4603      	mov	r3, r0
 8009854:	460c      	mov	r4, r1
 8009856:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009858:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	0c1b      	lsrs	r3, r3, #16
 800985e:	f003 0303 	and.w	r3, r3, #3
 8009862:	3301      	adds	r3, #1
 8009864:	005b      	lsls	r3, r3, #1
 8009866:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009870:	60bb      	str	r3, [r7, #8]
      break;
 8009872:	e002      	b.n	800987a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009874:	4b04      	ldr	r3, [pc, #16]	; (8009888 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009876:	60bb      	str	r3, [r7, #8]
      break;
 8009878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800987a:	68bb      	ldr	r3, [r7, #8]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009884:	40023800 	.word	0x40023800
 8009888:	00f42400 	.word	0x00f42400
 800988c:	007a1200 	.word	0x007a1200

08009890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009890:	b480      	push	{r7}
 8009892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009894:	4b03      	ldr	r3, [pc, #12]	; (80098a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009896:	681b      	ldr	r3, [r3, #0]
}
 8009898:	4618      	mov	r0, r3
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20000008 	.word	0x20000008

080098a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80098ac:	f7ff fff0 	bl	8009890 <HAL_RCC_GetHCLKFreq>
 80098b0:	4601      	mov	r1, r0
 80098b2:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	0a9b      	lsrs	r3, r3, #10
 80098b8:	f003 0307 	and.w	r3, r3, #7
 80098bc:	4a03      	ldr	r2, [pc, #12]	; (80098cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80098be:	5cd3      	ldrb	r3, [r2, r3]
 80098c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	40023800 	.word	0x40023800
 80098cc:	0800a550 	.word	0x0800a550

080098d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80098d4:	f7ff ffdc 	bl	8009890 <HAL_RCC_GetHCLKFreq>
 80098d8:	4601      	mov	r1, r0
 80098da:	4b05      	ldr	r3, [pc, #20]	; (80098f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	0b5b      	lsrs	r3, r3, #13
 80098e0:	f003 0307 	and.w	r3, r3, #7
 80098e4:	4a03      	ldr	r2, [pc, #12]	; (80098f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098e6:	5cd3      	ldrb	r3, [r2, r3]
 80098e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	40023800 	.word	0x40023800
 80098f4:	0800a550 	.word	0x0800a550

080098f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e0a0      	b.n	8009a4c <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d02c      	beq.n	800996c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a4f      	ldr	r2, [pc, #316]	; (8009a54 <HAL_UART_Init+0x15c>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d00e      	beq.n	800993a <HAL_UART_Init+0x42>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a4d      	ldr	r2, [pc, #308]	; (8009a58 <HAL_UART_Init+0x160>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d009      	beq.n	800993a <HAL_UART_Init+0x42>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a4c      	ldr	r2, [pc, #304]	; (8009a5c <HAL_UART_Init+0x164>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d004      	beq.n	800993a <HAL_UART_Init+0x42>
 8009930:	f240 1149 	movw	r1, #329	; 0x149
 8009934:	484a      	ldr	r0, [pc, #296]	; (8009a60 <HAL_UART_Init+0x168>)
 8009936:	f000 fc20 	bl	800a17a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	699b      	ldr	r3, [r3, #24]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d028      	beq.n	8009994 <HAL_UART_Init+0x9c>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800994a:	d023      	beq.n	8009994 <HAL_UART_Init+0x9c>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009954:	d01e      	beq.n	8009994 <HAL_UART_Init+0x9c>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800995e:	d019      	beq.n	8009994 <HAL_UART_Init+0x9c>
 8009960:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8009964:	483e      	ldr	r0, [pc, #248]	; (8009a60 <HAL_UART_Init+0x168>)
 8009966:	f000 fc08 	bl	800a17a <assert_failed>
 800996a:	e013      	b.n	8009994 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a38      	ldr	r2, [pc, #224]	; (8009a54 <HAL_UART_Init+0x15c>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d00e      	beq.n	8009994 <HAL_UART_Init+0x9c>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a37      	ldr	r2, [pc, #220]	; (8009a58 <HAL_UART_Init+0x160>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d009      	beq.n	8009994 <HAL_UART_Init+0x9c>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a35      	ldr	r2, [pc, #212]	; (8009a5c <HAL_UART_Init+0x164>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d004      	beq.n	8009994 <HAL_UART_Init+0x9c>
 800998a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800998e:	4834      	ldr	r0, [pc, #208]	; (8009a60 <HAL_UART_Init+0x168>)
 8009990:	f000 fbf3 	bl	800a17a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d009      	beq.n	80099b0 <HAL_UART_Init+0xb8>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099a4:	d004      	beq.n	80099b0 <HAL_UART_Init+0xb8>
 80099a6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80099aa:	482d      	ldr	r0, [pc, #180]	; (8009a60 <HAL_UART_Init+0x168>)
 80099ac:	f000 fbe5 	bl	800a17a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	69db      	ldr	r3, [r3, #28]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d009      	beq.n	80099cc <HAL_UART_Init+0xd4>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	69db      	ldr	r3, [r3, #28]
 80099bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099c0:	d004      	beq.n	80099cc <HAL_UART_Init+0xd4>
 80099c2:	f240 1151 	movw	r1, #337	; 0x151
 80099c6:	4826      	ldr	r0, [pc, #152]	; (8009a60 <HAL_UART_Init+0x168>)
 80099c8:	f000 fbd7 	bl	800a17a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d106      	bne.n	80099e6 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fc8d 	bl	800a300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2224      	movs	r2, #36	; 0x24
 80099ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68da      	ldr	r2, [r3, #12]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f830 	bl	8009a64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	691a      	ldr	r2, [r3, #16]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	695a      	ldr	r2, [r3, #20]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a22:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68da      	ldr	r2, [r3, #12]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a32:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2220      	movs	r2, #32
 8009a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2220      	movs	r2, #32
 8009a46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	40011000 	.word	0x40011000
 8009a58:	40004400 	.word	0x40004400
 8009a5c:	40011400 	.word	0x40011400
 8009a60:	0800a504 	.word	0x0800a504

08009a64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a64:	b5b0      	push	{r4, r5, r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	4aa8      	ldr	r2, [pc, #672]	; (8009d14 <UART_SetConfig+0x2b0>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d904      	bls.n	8009a80 <UART_SetConfig+0x1c>
 8009a76:	f640 31e5 	movw	r1, #3045	; 0xbe5
 8009a7a:	48a7      	ldr	r0, [pc, #668]	; (8009d18 <UART_SetConfig+0x2b4>)
 8009a7c:	f000 fb7d 	bl	800a17a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d009      	beq.n	8009a9c <UART_SetConfig+0x38>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a90:	d004      	beq.n	8009a9c <UART_SetConfig+0x38>
 8009a92:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8009a96:	48a0      	ldr	r0, [pc, #640]	; (8009d18 <UART_SetConfig+0x2b4>)
 8009a98:	f000 fb6f 	bl	800a17a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00e      	beq.n	8009ac2 <UART_SetConfig+0x5e>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009aac:	d009      	beq.n	8009ac2 <UART_SetConfig+0x5e>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009ab6:	d004      	beq.n	8009ac2 <UART_SetConfig+0x5e>
 8009ab8:	f640 31e7 	movw	r1, #3047	; 0xbe7
 8009abc:	4896      	ldr	r0, [pc, #600]	; (8009d18 <UART_SetConfig+0x2b4>)
 8009abe:	f000 fb5c 	bl	800a17a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	695a      	ldr	r2, [r3, #20]
 8009ac6:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8009aca:	4013      	ands	r3, r2
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d103      	bne.n	8009ad8 <UART_SetConfig+0x74>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	695b      	ldr	r3, [r3, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d104      	bne.n	8009ae2 <UART_SetConfig+0x7e>
 8009ad8:	f640 31e8 	movw	r1, #3048	; 0xbe8
 8009adc:	488e      	ldr	r0, [pc, #568]	; (8009d18 <UART_SetConfig+0x2b4>)
 8009ade:	f000 fb4c 	bl	800a17a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68da      	ldr	r2, [r3, #12]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	430a      	orrs	r2, r1
 8009af6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	689a      	ldr	r2, [r3, #8]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	431a      	orrs	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	431a      	orrs	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	69db      	ldr	r3, [r3, #28]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009b1a:	f023 030c 	bic.w	r3, r3, #12
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	6812      	ldr	r2, [r2, #0]
 8009b22:	68f9      	ldr	r1, [r7, #12]
 8009b24:	430b      	orrs	r3, r1
 8009b26:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	695b      	ldr	r3, [r3, #20]
 8009b2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	699a      	ldr	r2, [r3, #24]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b46:	f040 80ef 	bne.w	8009d28 <UART_SetConfig+0x2c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a73      	ldr	r2, [pc, #460]	; (8009d1c <UART_SetConfig+0x2b8>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d004      	beq.n	8009b5e <UART_SetConfig+0xfa>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a71      	ldr	r2, [pc, #452]	; (8009d20 <UART_SetConfig+0x2bc>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d16c      	bne.n	8009c38 <UART_SetConfig+0x1d4>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009b5e:	f7ff feb7 	bl	80098d0 <HAL_RCC_GetPCLK2Freq>
 8009b62:	4602      	mov	r2, r0
 8009b64:	4613      	mov	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	009a      	lsls	r2, r3, #2
 8009b6c:	441a      	add	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b78:	4a6a      	ldr	r2, [pc, #424]	; (8009d24 <UART_SetConfig+0x2c0>)
 8009b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b7e:	095b      	lsrs	r3, r3, #5
 8009b80:	011c      	lsls	r4, r3, #4
 8009b82:	f7ff fea5 	bl	80098d0 <HAL_RCC_GetPCLK2Freq>
 8009b86:	4602      	mov	r2, r0
 8009b88:	4613      	mov	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4413      	add	r3, r2
 8009b8e:	009a      	lsls	r2, r3, #2
 8009b90:	441a      	add	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	005b      	lsls	r3, r3, #1
 8009b98:	fbb2 f5f3 	udiv	r5, r2, r3
 8009b9c:	f7ff fe98 	bl	80098d0 <HAL_RCC_GetPCLK2Freq>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	4413      	add	r3, r2
 8009ba8:	009a      	lsls	r2, r3, #2
 8009baa:	441a      	add	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	005b      	lsls	r3, r3, #1
 8009bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bb6:	4a5b      	ldr	r2, [pc, #364]	; (8009d24 <UART_SetConfig+0x2c0>)
 8009bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bbc:	095b      	lsrs	r3, r3, #5
 8009bbe:	2264      	movs	r2, #100	; 0x64
 8009bc0:	fb02 f303 	mul.w	r3, r2, r3
 8009bc4:	1aeb      	subs	r3, r5, r3
 8009bc6:	00db      	lsls	r3, r3, #3
 8009bc8:	3332      	adds	r3, #50	; 0x32
 8009bca:	4a56      	ldr	r2, [pc, #344]	; (8009d24 <UART_SetConfig+0x2c0>)
 8009bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd0:	095b      	lsrs	r3, r3, #5
 8009bd2:	005b      	lsls	r3, r3, #1
 8009bd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009bd8:	441c      	add	r4, r3
 8009bda:	f7ff fe79 	bl	80098d0 <HAL_RCC_GetPCLK2Freq>
 8009bde:	4602      	mov	r2, r0
 8009be0:	4613      	mov	r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	4413      	add	r3, r2
 8009be6:	009a      	lsls	r2, r3, #2
 8009be8:	441a      	add	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	005b      	lsls	r3, r3, #1
 8009bf0:	fbb2 f5f3 	udiv	r5, r2, r3
 8009bf4:	f7ff fe6c 	bl	80098d0 <HAL_RCC_GetPCLK2Freq>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4413      	add	r3, r2
 8009c00:	009a      	lsls	r2, r3, #2
 8009c02:	441a      	add	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	005b      	lsls	r3, r3, #1
 8009c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c0e:	4a45      	ldr	r2, [pc, #276]	; (8009d24 <UART_SetConfig+0x2c0>)
 8009c10:	fba2 2303 	umull	r2, r3, r2, r3
 8009c14:	095b      	lsrs	r3, r3, #5
 8009c16:	2264      	movs	r2, #100	; 0x64
 8009c18:	fb02 f303 	mul.w	r3, r2, r3
 8009c1c:	1aeb      	subs	r3, r5, r3
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	3332      	adds	r3, #50	; 0x32
 8009c22:	4a40      	ldr	r2, [pc, #256]	; (8009d24 <UART_SetConfig+0x2c0>)
 8009c24:	fba2 2303 	umull	r2, r3, r2, r3
 8009c28:	095b      	lsrs	r3, r3, #5
 8009c2a:	f003 0207 	and.w	r2, r3, #7
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4422      	add	r2, r4
 8009c34:	609a      	str	r2, [r3, #8]
 8009c36:	e159      	b.n	8009eec <UART_SetConfig+0x488>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8009c38:	f7ff fe36 	bl	80098a8 <HAL_RCC_GetPCLK1Freq>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	4613      	mov	r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4413      	add	r3, r2
 8009c44:	009a      	lsls	r2, r3, #2
 8009c46:	441a      	add	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	005b      	lsls	r3, r3, #1
 8009c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c52:	4a34      	ldr	r2, [pc, #208]	; (8009d24 <UART_SetConfig+0x2c0>)
 8009c54:	fba2 2303 	umull	r2, r3, r2, r3
 8009c58:	095b      	lsrs	r3, r3, #5
 8009c5a:	011c      	lsls	r4, r3, #4
 8009c5c:	f7ff fe24 	bl	80098a8 <HAL_RCC_GetPCLK1Freq>
 8009c60:	4602      	mov	r2, r0
 8009c62:	4613      	mov	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	009a      	lsls	r2, r3, #2
 8009c6a:	441a      	add	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	005b      	lsls	r3, r3, #1
 8009c72:	fbb2 f5f3 	udiv	r5, r2, r3
 8009c76:	f7ff fe17 	bl	80098a8 <HAL_RCC_GetPCLK1Freq>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4413      	add	r3, r2
 8009c82:	009a      	lsls	r2, r3, #2
 8009c84:	441a      	add	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	005b      	lsls	r3, r3, #1
 8009c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c90:	4a24      	ldr	r2, [pc, #144]	; (8009d24 <UART_SetConfig+0x2c0>)
 8009c92:	fba2 2303 	umull	r2, r3, r2, r3
 8009c96:	095b      	lsrs	r3, r3, #5
 8009c98:	2264      	movs	r2, #100	; 0x64
 8009c9a:	fb02 f303 	mul.w	r3, r2, r3
 8009c9e:	1aeb      	subs	r3, r5, r3
 8009ca0:	00db      	lsls	r3, r3, #3
 8009ca2:	3332      	adds	r3, #50	; 0x32
 8009ca4:	4a1f      	ldr	r2, [pc, #124]	; (8009d24 <UART_SetConfig+0x2c0>)
 8009ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8009caa:	095b      	lsrs	r3, r3, #5
 8009cac:	005b      	lsls	r3, r3, #1
 8009cae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009cb2:	441c      	add	r4, r3
 8009cb4:	f7ff fdf8 	bl	80098a8 <HAL_RCC_GetPCLK1Freq>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	4613      	mov	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	009a      	lsls	r2, r3, #2
 8009cc2:	441a      	add	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	005b      	lsls	r3, r3, #1
 8009cca:	fbb2 f5f3 	udiv	r5, r2, r3
 8009cce:	f7ff fdeb 	bl	80098a8 <HAL_RCC_GetPCLK1Freq>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4413      	add	r3, r2
 8009cda:	009a      	lsls	r2, r3, #2
 8009cdc:	441a      	add	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	005b      	lsls	r3, r3, #1
 8009ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce8:	4a0e      	ldr	r2, [pc, #56]	; (8009d24 <UART_SetConfig+0x2c0>)
 8009cea:	fba2 2303 	umull	r2, r3, r2, r3
 8009cee:	095b      	lsrs	r3, r3, #5
 8009cf0:	2264      	movs	r2, #100	; 0x64
 8009cf2:	fb02 f303 	mul.w	r3, r2, r3
 8009cf6:	1aeb      	subs	r3, r5, r3
 8009cf8:	00db      	lsls	r3, r3, #3
 8009cfa:	3332      	adds	r3, #50	; 0x32
 8009cfc:	4a09      	ldr	r2, [pc, #36]	; (8009d24 <UART_SetConfig+0x2c0>)
 8009cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8009d02:	095b      	lsrs	r3, r3, #5
 8009d04:	f003 0207 	and.w	r2, r3, #7
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4422      	add	r2, r4
 8009d0e:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8009d10:	e0ec      	b.n	8009eec <UART_SetConfig+0x488>
 8009d12:	bf00      	nop
 8009d14:	00a037a0 	.word	0x00a037a0
 8009d18:	0800a504 	.word	0x0800a504
 8009d1c:	40011000 	.word	0x40011000
 8009d20:	40011400 	.word	0x40011400
 8009d24:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a71      	ldr	r2, [pc, #452]	; (8009ef4 <UART_SetConfig+0x490>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d004      	beq.n	8009d3c <UART_SetConfig+0x2d8>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a70      	ldr	r2, [pc, #448]	; (8009ef8 <UART_SetConfig+0x494>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d16b      	bne.n	8009e14 <UART_SetConfig+0x3b0>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009d3c:	f7ff fdc8 	bl	80098d0 <HAL_RCC_GetPCLK2Freq>
 8009d40:	4602      	mov	r2, r0
 8009d42:	4613      	mov	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4413      	add	r3, r2
 8009d48:	009a      	lsls	r2, r3, #2
 8009d4a:	441a      	add	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d56:	4a69      	ldr	r2, [pc, #420]	; (8009efc <UART_SetConfig+0x498>)
 8009d58:	fba2 2303 	umull	r2, r3, r2, r3
 8009d5c:	095b      	lsrs	r3, r3, #5
 8009d5e:	011c      	lsls	r4, r3, #4
 8009d60:	f7ff fdb6 	bl	80098d0 <HAL_RCC_GetPCLK2Freq>
 8009d64:	4602      	mov	r2, r0
 8009d66:	4613      	mov	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4413      	add	r3, r2
 8009d6c:	009a      	lsls	r2, r3, #2
 8009d6e:	441a      	add	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	fbb2 f5f3 	udiv	r5, r2, r3
 8009d7a:	f7ff fda9 	bl	80098d0 <HAL_RCC_GetPCLK2Freq>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	4613      	mov	r3, r2
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	009a      	lsls	r2, r3, #2
 8009d88:	441a      	add	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d94:	4a59      	ldr	r2, [pc, #356]	; (8009efc <UART_SetConfig+0x498>)
 8009d96:	fba2 2303 	umull	r2, r3, r2, r3
 8009d9a:	095b      	lsrs	r3, r3, #5
 8009d9c:	2264      	movs	r2, #100	; 0x64
 8009d9e:	fb02 f303 	mul.w	r3, r2, r3
 8009da2:	1aeb      	subs	r3, r5, r3
 8009da4:	011b      	lsls	r3, r3, #4
 8009da6:	3332      	adds	r3, #50	; 0x32
 8009da8:	4a54      	ldr	r2, [pc, #336]	; (8009efc <UART_SetConfig+0x498>)
 8009daa:	fba2 2303 	umull	r2, r3, r2, r3
 8009dae:	095b      	lsrs	r3, r3, #5
 8009db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009db4:	441c      	add	r4, r3
 8009db6:	f7ff fd8b 	bl	80098d0 <HAL_RCC_GetPCLK2Freq>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	009a      	lsls	r2, r3, #2
 8009dc4:	441a      	add	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	fbb2 f5f3 	udiv	r5, r2, r3
 8009dd0:	f7ff fd7e 	bl	80098d0 <HAL_RCC_GetPCLK2Freq>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	009a      	lsls	r2, r3, #2
 8009dde:	441a      	add	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dea:	4a44      	ldr	r2, [pc, #272]	; (8009efc <UART_SetConfig+0x498>)
 8009dec:	fba2 2303 	umull	r2, r3, r2, r3
 8009df0:	095b      	lsrs	r3, r3, #5
 8009df2:	2264      	movs	r2, #100	; 0x64
 8009df4:	fb02 f303 	mul.w	r3, r2, r3
 8009df8:	1aeb      	subs	r3, r5, r3
 8009dfa:	011b      	lsls	r3, r3, #4
 8009dfc:	3332      	adds	r3, #50	; 0x32
 8009dfe:	4a3f      	ldr	r2, [pc, #252]	; (8009efc <UART_SetConfig+0x498>)
 8009e00:	fba2 2303 	umull	r2, r3, r2, r3
 8009e04:	095b      	lsrs	r3, r3, #5
 8009e06:	f003 020f 	and.w	r2, r3, #15
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4422      	add	r2, r4
 8009e10:	609a      	str	r2, [r3, #8]
 8009e12:	e06b      	b.n	8009eec <UART_SetConfig+0x488>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8009e14:	f7ff fd48 	bl	80098a8 <HAL_RCC_GetPCLK1Freq>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	009a      	lsls	r2, r3, #2
 8009e22:	441a      	add	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e2e:	4a33      	ldr	r2, [pc, #204]	; (8009efc <UART_SetConfig+0x498>)
 8009e30:	fba2 2303 	umull	r2, r3, r2, r3
 8009e34:	095b      	lsrs	r3, r3, #5
 8009e36:	011c      	lsls	r4, r3, #4
 8009e38:	f7ff fd36 	bl	80098a8 <HAL_RCC_GetPCLK1Freq>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	4613      	mov	r3, r2
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	4413      	add	r3, r2
 8009e44:	009a      	lsls	r2, r3, #2
 8009e46:	441a      	add	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	fbb2 f5f3 	udiv	r5, r2, r3
 8009e52:	f7ff fd29 	bl	80098a8 <HAL_RCC_GetPCLK1Freq>
 8009e56:	4602      	mov	r2, r0
 8009e58:	4613      	mov	r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4413      	add	r3, r2
 8009e5e:	009a      	lsls	r2, r3, #2
 8009e60:	441a      	add	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e6c:	4a23      	ldr	r2, [pc, #140]	; (8009efc <UART_SetConfig+0x498>)
 8009e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e72:	095b      	lsrs	r3, r3, #5
 8009e74:	2264      	movs	r2, #100	; 0x64
 8009e76:	fb02 f303 	mul.w	r3, r2, r3
 8009e7a:	1aeb      	subs	r3, r5, r3
 8009e7c:	011b      	lsls	r3, r3, #4
 8009e7e:	3332      	adds	r3, #50	; 0x32
 8009e80:	4a1e      	ldr	r2, [pc, #120]	; (8009efc <UART_SetConfig+0x498>)
 8009e82:	fba2 2303 	umull	r2, r3, r2, r3
 8009e86:	095b      	lsrs	r3, r3, #5
 8009e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e8c:	441c      	add	r4, r3
 8009e8e:	f7ff fd0b 	bl	80098a8 <HAL_RCC_GetPCLK1Freq>
 8009e92:	4602      	mov	r2, r0
 8009e94:	4613      	mov	r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	4413      	add	r3, r2
 8009e9a:	009a      	lsls	r2, r3, #2
 8009e9c:	441a      	add	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	fbb2 f5f3 	udiv	r5, r2, r3
 8009ea8:	f7ff fcfe 	bl	80098a8 <HAL_RCC_GetPCLK1Freq>
 8009eac:	4602      	mov	r2, r0
 8009eae:	4613      	mov	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	009a      	lsls	r2, r3, #2
 8009eb6:	441a      	add	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ec2:	4a0e      	ldr	r2, [pc, #56]	; (8009efc <UART_SetConfig+0x498>)
 8009ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ec8:	095b      	lsrs	r3, r3, #5
 8009eca:	2264      	movs	r2, #100	; 0x64
 8009ecc:	fb02 f303 	mul.w	r3, r2, r3
 8009ed0:	1aeb      	subs	r3, r5, r3
 8009ed2:	011b      	lsls	r3, r3, #4
 8009ed4:	3332      	adds	r3, #50	; 0x32
 8009ed6:	4a09      	ldr	r2, [pc, #36]	; (8009efc <UART_SetConfig+0x498>)
 8009ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8009edc:	095b      	lsrs	r3, r3, #5
 8009ede:	f003 020f 	and.w	r2, r3, #15
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4422      	add	r2, r4
 8009ee8:	609a      	str	r2, [r3, #8]
}
 8009eea:	e7ff      	b.n	8009eec <UART_SetConfig+0x488>
 8009eec:	bf00      	nop
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8009ef4:	40011000 	.word	0x40011000
 8009ef8:	40011400 	.word	0x40011400
 8009efc:	51eb851f 	.word	0x51eb851f

08009f00 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b08a      	sub	sp, #40	; 0x28
 8009f04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f06:	f107 0314 	add.w	r3, r7, #20
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	605a      	str	r2, [r3, #4]
 8009f10:	609a      	str	r2, [r3, #8]
 8009f12:	60da      	str	r2, [r3, #12]
 8009f14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f16:	2300      	movs	r3, #0
 8009f18:	613b      	str	r3, [r7, #16]
 8009f1a:	4b4d      	ldr	r3, [pc, #308]	; (800a050 <MX_GPIO_Init+0x150>)
 8009f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1e:	4a4c      	ldr	r2, [pc, #304]	; (800a050 <MX_GPIO_Init+0x150>)
 8009f20:	f043 0304 	orr.w	r3, r3, #4
 8009f24:	6313      	str	r3, [r2, #48]	; 0x30
 8009f26:	4b4a      	ldr	r3, [pc, #296]	; (800a050 <MX_GPIO_Init+0x150>)
 8009f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f2a:	f003 0304 	and.w	r3, r3, #4
 8009f2e:	613b      	str	r3, [r7, #16]
 8009f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009f32:	2300      	movs	r3, #0
 8009f34:	60fb      	str	r3, [r7, #12]
 8009f36:	4b46      	ldr	r3, [pc, #280]	; (800a050 <MX_GPIO_Init+0x150>)
 8009f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3a:	4a45      	ldr	r2, [pc, #276]	; (800a050 <MX_GPIO_Init+0x150>)
 8009f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f40:	6313      	str	r3, [r2, #48]	; 0x30
 8009f42:	4b43      	ldr	r3, [pc, #268]	; (800a050 <MX_GPIO_Init+0x150>)
 8009f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f4e:	2300      	movs	r3, #0
 8009f50:	60bb      	str	r3, [r7, #8]
 8009f52:	4b3f      	ldr	r3, [pc, #252]	; (800a050 <MX_GPIO_Init+0x150>)
 8009f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f56:	4a3e      	ldr	r2, [pc, #248]	; (800a050 <MX_GPIO_Init+0x150>)
 8009f58:	f043 0301 	orr.w	r3, r3, #1
 8009f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8009f5e:	4b3c      	ldr	r3, [pc, #240]	; (800a050 <MX_GPIO_Init+0x150>)
 8009f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f62:	f003 0301 	and.w	r3, r3, #1
 8009f66:	60bb      	str	r3, [r7, #8]
 8009f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	607b      	str	r3, [r7, #4]
 8009f6e:	4b38      	ldr	r3, [pc, #224]	; (800a050 <MX_GPIO_Init+0x150>)
 8009f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f72:	4a37      	ldr	r2, [pc, #220]	; (800a050 <MX_GPIO_Init+0x150>)
 8009f74:	f043 0302 	orr.w	r3, r3, #2
 8009f78:	6313      	str	r3, [r2, #48]	; 0x30
 8009f7a:	4b35      	ldr	r3, [pc, #212]	; (800a050 <MX_GPIO_Init+0x150>)
 8009f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f7e:	f003 0302 	and.w	r3, r3, #2
 8009f82:	607b      	str	r3, [r7, #4]
 8009f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009f86:	2300      	movs	r3, #0
 8009f88:	603b      	str	r3, [r7, #0]
 8009f8a:	4b31      	ldr	r3, [pc, #196]	; (800a050 <MX_GPIO_Init+0x150>)
 8009f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8e:	4a30      	ldr	r2, [pc, #192]	; (800a050 <MX_GPIO_Init+0x150>)
 8009f90:	f043 0308 	orr.w	r3, r3, #8
 8009f94:	6313      	str	r3, [r2, #48]	; 0x30
 8009f96:	4b2e      	ldr	r3, [pc, #184]	; (800a050 <MX_GPIO_Init+0x150>)
 8009f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9a:	f003 0308 	and.w	r3, r3, #8
 8009f9e:	603b      	str	r3, [r7, #0]
 8009fa0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	2120      	movs	r1, #32
 8009fa6:	482b      	ldr	r0, [pc, #172]	; (800a054 <MX_GPIO_Init+0x154>)
 8009fa8:	f7fe fec4 	bl	8008d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8009fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009fb2:	4b29      	ldr	r3, [pc, #164]	; (800a058 <MX_GPIO_Init+0x158>)
 8009fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8009fba:	f107 0314 	add.w	r3, r7, #20
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	4826      	ldr	r0, [pc, #152]	; (800a05c <MX_GPIO_Init+0x15c>)
 8009fc2:	f7fe fc25 	bl	8008810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC7 
                           PC8 PC9 PC10 PC11 
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8009fc6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8009fca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009fd4:	f107 0314 	add.w	r3, r7, #20
 8009fd8:	4619      	mov	r1, r3
 8009fda:	4820      	ldr	r0, [pc, #128]	; (800a05c <MX_GPIO_Init+0x15c>)
 8009fdc:	f7fe fc18 	bl	8008810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6 
                           PA7 PA8 PA9 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 8009fe0:	f649 73d3 	movw	r3, #40915	; 0x9fd3
 8009fe4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fea:	2300      	movs	r3, #0
 8009fec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009fee:	f107 0314 	add.w	r3, r7, #20
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	4817      	ldr	r0, [pc, #92]	; (800a054 <MX_GPIO_Init+0x154>)
 8009ff6:	f7fe fc0b 	bl	8008810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8009ffa:	2320      	movs	r3, #32
 8009ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ffe:	2301      	movs	r3, #1
 800a000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a002:	2300      	movs	r3, #0
 800a004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a006:	2300      	movs	r3, #0
 800a008:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800a00a:	f107 0314 	add.w	r3, r7, #20
 800a00e:	4619      	mov	r1, r3
 800a010:	4810      	ldr	r0, [pc, #64]	; (800a054 <MX_GPIO_Init+0x154>)
 800a012:	f7fe fbfd 	bl	8008810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB12 PB13 PB14 PB15 
                           PB4 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800a016:	f24f 73f7 	movw	r3, #63479	; 0xf7f7
 800a01a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a01c:	2303      	movs	r3, #3
 800a01e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a020:	2300      	movs	r3, #0
 800a022:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a024:	f107 0314 	add.w	r3, r7, #20
 800a028:	4619      	mov	r1, r3
 800a02a:	480d      	ldr	r0, [pc, #52]	; (800a060 <MX_GPIO_Init+0x160>)
 800a02c:	f7fe fbf0 	bl	8008810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a030:	2304      	movs	r3, #4
 800a032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a034:	2303      	movs	r3, #3
 800a036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a038:	2300      	movs	r3, #0
 800a03a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a03c:	f107 0314 	add.w	r3, r7, #20
 800a040:	4619      	mov	r1, r3
 800a042:	4808      	ldr	r0, [pc, #32]	; (800a064 <MX_GPIO_Init+0x164>)
 800a044:	f7fe fbe4 	bl	8008810 <HAL_GPIO_Init>

}
 800a048:	bf00      	nop
 800a04a:	3728      	adds	r7, #40	; 0x28
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	40023800 	.word	0x40023800
 800a054:	40020000 	.word	0x40020000
 800a058:	10210000 	.word	0x10210000
 800a05c:	40020800 	.word	0x40020800
 800a060:	40020400 	.word	0x40020400
 800a064:	40020c00 	.word	0x40020c00

0800a068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a06c:	f7fe fa32 	bl	80084d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a070:	f000 f810 	bl	800a094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a074:	f7ff ff44 	bl	8009f00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800a078:	f000 f918 	bl	800a2ac <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800a07c:	2120      	movs	r1, #32
 800a07e:	4804      	ldr	r0, [pc, #16]	; (800a090 <main+0x28>)
 800a080:	f7fe fe8a 	bl	8008d98 <HAL_GPIO_TogglePin>
      HAL_Delay(1000);
 800a084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a088:	f7fe fa96 	bl	80085b8 <HAL_Delay>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800a08c:	e7f6      	b.n	800a07c <main+0x14>
 800a08e:	bf00      	nop
 800a090:	40020000 	.word	0x40020000

0800a094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b094      	sub	sp, #80	; 0x50
 800a098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a09a:	f107 0320 	add.w	r3, r7, #32
 800a09e:	2230      	movs	r2, #48	; 0x30
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 f9c2 	bl	800a42c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a0a8:	f107 030c 	add.w	r3, r7, #12
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	601a      	str	r2, [r3, #0]
 800a0b0:	605a      	str	r2, [r3, #4]
 800a0b2:	609a      	str	r2, [r3, #8]
 800a0b4:	60da      	str	r2, [r3, #12]
 800a0b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	60bb      	str	r3, [r7, #8]
 800a0bc:	4b29      	ldr	r3, [pc, #164]	; (800a164 <SystemClock_Config+0xd0>)
 800a0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c0:	4a28      	ldr	r2, [pc, #160]	; (800a164 <SystemClock_Config+0xd0>)
 800a0c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0c6:	6413      	str	r3, [r2, #64]	; 0x40
 800a0c8:	4b26      	ldr	r3, [pc, #152]	; (800a164 <SystemClock_Config+0xd0>)
 800a0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0d0:	60bb      	str	r3, [r7, #8]
 800a0d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	607b      	str	r3, [r7, #4]
 800a0d8:	4b23      	ldr	r3, [pc, #140]	; (800a168 <SystemClock_Config+0xd4>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a0e0:	4a21      	ldr	r2, [pc, #132]	; (800a168 <SystemClock_Config+0xd4>)
 800a0e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0e6:	6013      	str	r3, [r2, #0]
 800a0e8:	4b1f      	ldr	r3, [pc, #124]	; (800a168 <SystemClock_Config+0xd4>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a0f0:	607b      	str	r3, [r7, #4]
 800a0f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a0fc:	2310      	movs	r3, #16
 800a0fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a100:	2302      	movs	r3, #2
 800a102:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a104:	2300      	movs	r3, #0
 800a106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800a108:	2310      	movs	r3, #16
 800a10a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800a10c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800a110:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800a112:	2304      	movs	r3, #4
 800a114:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800a116:	2307      	movs	r3, #7
 800a118:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a11a:	f107 0320 	add.w	r3, r7, #32
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fe fe62 	bl	8008de8 <HAL_RCC_OscConfig>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800a12a:	f000 f81f 	bl	800a16c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a12e:	230f      	movs	r3, #15
 800a130:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a132:	2302      	movs	r3, #2
 800a134:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a136:	2300      	movs	r3, #0
 800a138:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a13a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a13e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a140:	2300      	movs	r3, #0
 800a142:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a144:	f107 030c 	add.w	r3, r7, #12
 800a148:	2102      	movs	r1, #2
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7ff f93e 	bl	80093cc <HAL_RCC_ClockConfig>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800a156:	f000 f809 	bl	800a16c <Error_Handler>
  }
}
 800a15a:	bf00      	nop
 800a15c:	3750      	adds	r7, #80	; 0x50
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	40023800 	.word	0x40023800
 800a168:	40007000 	.word	0x40007000

0800a16c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a16c:	b480      	push	{r7}
 800a16e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a170:	bf00      	nop
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 800a17a:	b480      	push	{r7}
 800a17c:	b083      	sub	sp, #12
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a196:	2300      	movs	r3, #0
 800a198:	607b      	str	r3, [r7, #4]
 800a19a:	4b10      	ldr	r3, [pc, #64]	; (800a1dc <HAL_MspInit+0x4c>)
 800a19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a19e:	4a0f      	ldr	r2, [pc, #60]	; (800a1dc <HAL_MspInit+0x4c>)
 800a1a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a1a4:	6453      	str	r3, [r2, #68]	; 0x44
 800a1a6:	4b0d      	ldr	r3, [pc, #52]	; (800a1dc <HAL_MspInit+0x4c>)
 800a1a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1ae:	607b      	str	r3, [r7, #4]
 800a1b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	603b      	str	r3, [r7, #0]
 800a1b6:	4b09      	ldr	r3, [pc, #36]	; (800a1dc <HAL_MspInit+0x4c>)
 800a1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ba:	4a08      	ldr	r2, [pc, #32]	; (800a1dc <HAL_MspInit+0x4c>)
 800a1bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1c0:	6413      	str	r3, [r2, #64]	; 0x40
 800a1c2:	4b06      	ldr	r3, [pc, #24]	; (800a1dc <HAL_MspInit+0x4c>)
 800a1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1ca:	603b      	str	r3, [r7, #0]
 800a1cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800a1ce:	2007      	movs	r0, #7
 800a1d0:	f7fe fac6 	bl	8008760 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a1d4:	bf00      	nop
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	40023800 	.word	0x40023800

0800a1e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a1e4:	bf00      	nop
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a1f2:	e7fe      	b.n	800a1f2 <HardFault_Handler+0x4>

0800a1f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a1f8:	e7fe      	b.n	800a1f8 <MemManage_Handler+0x4>

0800a1fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a1fe:	e7fe      	b.n	800a1fe <BusFault_Handler+0x4>

0800a200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a200:	b480      	push	{r7}
 800a202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a204:	e7fe      	b.n	800a204 <UsageFault_Handler+0x4>

0800a206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a206:	b480      	push	{r7}
 800a208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a20a:	bf00      	nop
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a214:	b480      	push	{r7}
 800a216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a218:	bf00      	nop
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a222:	b480      	push	{r7}
 800a224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a226:	bf00      	nop
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a234:	f7fe f9a0 	bl	8008578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a238:	bf00      	nop
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a23c:	b480      	push	{r7}
 800a23e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a240:	4b16      	ldr	r3, [pc, #88]	; (800a29c <SystemInit+0x60>)
 800a242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a246:	4a15      	ldr	r2, [pc, #84]	; (800a29c <SystemInit+0x60>)
 800a248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a24c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a250:	4b13      	ldr	r3, [pc, #76]	; (800a2a0 <SystemInit+0x64>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a12      	ldr	r2, [pc, #72]	; (800a2a0 <SystemInit+0x64>)
 800a256:	f043 0301 	orr.w	r3, r3, #1
 800a25a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a25c:	4b10      	ldr	r3, [pc, #64]	; (800a2a0 <SystemInit+0x64>)
 800a25e:	2200      	movs	r2, #0
 800a260:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a262:	4b0f      	ldr	r3, [pc, #60]	; (800a2a0 <SystemInit+0x64>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a0e      	ldr	r2, [pc, #56]	; (800a2a0 <SystemInit+0x64>)
 800a268:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a26c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a270:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a272:	4b0b      	ldr	r3, [pc, #44]	; (800a2a0 <SystemInit+0x64>)
 800a274:	4a0b      	ldr	r2, [pc, #44]	; (800a2a4 <SystemInit+0x68>)
 800a276:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a278:	4b09      	ldr	r3, [pc, #36]	; (800a2a0 <SystemInit+0x64>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a08      	ldr	r2, [pc, #32]	; (800a2a0 <SystemInit+0x64>)
 800a27e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a282:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a284:	4b06      	ldr	r3, [pc, #24]	; (800a2a0 <SystemInit+0x64>)
 800a286:	2200      	movs	r2, #0
 800a288:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a28a:	4b04      	ldr	r3, [pc, #16]	; (800a29c <SystemInit+0x60>)
 800a28c:	4a06      	ldr	r2, [pc, #24]	; (800a2a8 <SystemInit+0x6c>)
 800a28e:	609a      	str	r2, [r3, #8]
#endif
}
 800a290:	bf00      	nop
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	e000ed00 	.word	0xe000ed00
 800a2a0:	40023800 	.word	0x40023800
 800a2a4:	24003010 	.word	0x24003010
 800a2a8:	08008000 	.word	0x08008000

0800a2ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800a2b0:	4b11      	ldr	r3, [pc, #68]	; (800a2f8 <MX_USART2_UART_Init+0x4c>)
 800a2b2:	4a12      	ldr	r2, [pc, #72]	; (800a2fc <MX_USART2_UART_Init+0x50>)
 800a2b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a2b6:	4b10      	ldr	r3, [pc, #64]	; (800a2f8 <MX_USART2_UART_Init+0x4c>)
 800a2b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a2bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a2be:	4b0e      	ldr	r3, [pc, #56]	; (800a2f8 <MX_USART2_UART_Init+0x4c>)
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a2c4:	4b0c      	ldr	r3, [pc, #48]	; (800a2f8 <MX_USART2_UART_Init+0x4c>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a2ca:	4b0b      	ldr	r3, [pc, #44]	; (800a2f8 <MX_USART2_UART_Init+0x4c>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a2d0:	4b09      	ldr	r3, [pc, #36]	; (800a2f8 <MX_USART2_UART_Init+0x4c>)
 800a2d2:	220c      	movs	r2, #12
 800a2d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a2d6:	4b08      	ldr	r3, [pc, #32]	; (800a2f8 <MX_USART2_UART_Init+0x4c>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a2dc:	4b06      	ldr	r3, [pc, #24]	; (800a2f8 <MX_USART2_UART_Init+0x4c>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a2e2:	4805      	ldr	r0, [pc, #20]	; (800a2f8 <MX_USART2_UART_Init+0x4c>)
 800a2e4:	f7ff fb08 	bl	80098f8 <HAL_UART_Init>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d001      	beq.n	800a2f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a2ee:	f7ff ff3d 	bl	800a16c <Error_Handler>
  }

}
 800a2f2:	bf00      	nop
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	2000002c 	.word	0x2000002c
 800a2fc:	40004400 	.word	0x40004400

0800a300 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b08a      	sub	sp, #40	; 0x28
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a308:	f107 0314 	add.w	r3, r7, #20
 800a30c:	2200      	movs	r2, #0
 800a30e:	601a      	str	r2, [r3, #0]
 800a310:	605a      	str	r2, [r3, #4]
 800a312:	609a      	str	r2, [r3, #8]
 800a314:	60da      	str	r2, [r3, #12]
 800a316:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a19      	ldr	r2, [pc, #100]	; (800a384 <HAL_UART_MspInit+0x84>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d12b      	bne.n	800a37a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a322:	2300      	movs	r3, #0
 800a324:	613b      	str	r3, [r7, #16]
 800a326:	4b18      	ldr	r3, [pc, #96]	; (800a388 <HAL_UART_MspInit+0x88>)
 800a328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32a:	4a17      	ldr	r2, [pc, #92]	; (800a388 <HAL_UART_MspInit+0x88>)
 800a32c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a330:	6413      	str	r3, [r2, #64]	; 0x40
 800a332:	4b15      	ldr	r3, [pc, #84]	; (800a388 <HAL_UART_MspInit+0x88>)
 800a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a33a:	613b      	str	r3, [r7, #16]
 800a33c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a33e:	2300      	movs	r3, #0
 800a340:	60fb      	str	r3, [r7, #12]
 800a342:	4b11      	ldr	r3, [pc, #68]	; (800a388 <HAL_UART_MspInit+0x88>)
 800a344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a346:	4a10      	ldr	r2, [pc, #64]	; (800a388 <HAL_UART_MspInit+0x88>)
 800a348:	f043 0301 	orr.w	r3, r3, #1
 800a34c:	6313      	str	r3, [r2, #48]	; 0x30
 800a34e:	4b0e      	ldr	r3, [pc, #56]	; (800a388 <HAL_UART_MspInit+0x88>)
 800a350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	60fb      	str	r3, [r7, #12]
 800a358:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800a35a:	230c      	movs	r3, #12
 800a35c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a35e:	2302      	movs	r3, #2
 800a360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a362:	2300      	movs	r3, #0
 800a364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a366:	2300      	movs	r3, #0
 800a368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a36a:	2307      	movs	r3, #7
 800a36c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a36e:	f107 0314 	add.w	r3, r7, #20
 800a372:	4619      	mov	r1, r3
 800a374:	4805      	ldr	r0, [pc, #20]	; (800a38c <HAL_UART_MspInit+0x8c>)
 800a376:	f7fe fa4b 	bl	8008810 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a37a:	bf00      	nop
 800a37c:	3728      	adds	r7, #40	; 0x28
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	40004400 	.word	0x40004400
 800a388:	40023800 	.word	0x40023800
 800a38c:	40020000 	.word	0x40020000

0800a390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800a390:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a3c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a394:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a396:	e003      	b.n	800a3a0 <LoopCopyDataInit>

0800a398 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a398:	4b0c      	ldr	r3, [pc, #48]	; (800a3cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a39a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a39c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a39e:	3104      	adds	r1, #4

0800a3a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a3a0:	480b      	ldr	r0, [pc, #44]	; (800a3d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a3a2:	4b0c      	ldr	r3, [pc, #48]	; (800a3d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a3a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a3a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a3a8:	d3f6      	bcc.n	800a398 <CopyDataInit>
  ldr  r2, =_sbss
 800a3aa:	4a0b      	ldr	r2, [pc, #44]	; (800a3d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a3ac:	e002      	b.n	800a3b4 <LoopFillZerobss>

0800a3ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a3ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a3b0:	f842 3b04 	str.w	r3, [r2], #4

0800a3b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a3b4:	4b09      	ldr	r3, [pc, #36]	; (800a3dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a3b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a3b8:	d3f9      	bcc.n	800a3ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a3ba:	f7ff ff3f 	bl	800a23c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a3be:	f000 f811 	bl	800a3e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a3c2:	f7ff fe51 	bl	800a068 <main>
  bx  lr    
 800a3c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800a3c8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800a3cc:	0800a568 	.word	0x0800a568
  ldr  r0, =_sdata
 800a3d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a3d4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800a3d8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800a3dc:	2000006c 	.word	0x2000006c

0800a3e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a3e0:	e7fe      	b.n	800a3e0 <ADC_IRQHandler>
	...

0800a3e4 <__libc_init_array>:
 800a3e4:	b570      	push	{r4, r5, r6, lr}
 800a3e6:	4e0d      	ldr	r6, [pc, #52]	; (800a41c <__libc_init_array+0x38>)
 800a3e8:	4c0d      	ldr	r4, [pc, #52]	; (800a420 <__libc_init_array+0x3c>)
 800a3ea:	1ba4      	subs	r4, r4, r6
 800a3ec:	10a4      	asrs	r4, r4, #2
 800a3ee:	2500      	movs	r5, #0
 800a3f0:	42a5      	cmp	r5, r4
 800a3f2:	d109      	bne.n	800a408 <__libc_init_array+0x24>
 800a3f4:	4e0b      	ldr	r6, [pc, #44]	; (800a424 <__libc_init_array+0x40>)
 800a3f6:	4c0c      	ldr	r4, [pc, #48]	; (800a428 <__libc_init_array+0x44>)
 800a3f8:	f000 f820 	bl	800a43c <_init>
 800a3fc:	1ba4      	subs	r4, r4, r6
 800a3fe:	10a4      	asrs	r4, r4, #2
 800a400:	2500      	movs	r5, #0
 800a402:	42a5      	cmp	r5, r4
 800a404:	d105      	bne.n	800a412 <__libc_init_array+0x2e>
 800a406:	bd70      	pop	{r4, r5, r6, pc}
 800a408:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a40c:	4798      	blx	r3
 800a40e:	3501      	adds	r5, #1
 800a410:	e7ee      	b.n	800a3f0 <__libc_init_array+0xc>
 800a412:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a416:	4798      	blx	r3
 800a418:	3501      	adds	r5, #1
 800a41a:	e7f2      	b.n	800a402 <__libc_init_array+0x1e>
 800a41c:	0800a560 	.word	0x0800a560
 800a420:	0800a560 	.word	0x0800a560
 800a424:	0800a560 	.word	0x0800a560
 800a428:	0800a564 	.word	0x0800a564

0800a42c <memset>:
 800a42c:	4402      	add	r2, r0
 800a42e:	4603      	mov	r3, r0
 800a430:	4293      	cmp	r3, r2
 800a432:	d100      	bne.n	800a436 <memset+0xa>
 800a434:	4770      	bx	lr
 800a436:	f803 1b01 	strb.w	r1, [r3], #1
 800a43a:	e7f9      	b.n	800a430 <memset+0x4>

0800a43c <_init>:
 800a43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43e:	bf00      	nop
 800a440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a442:	bc08      	pop	{r3}
 800a444:	469e      	mov	lr, r3
 800a446:	4770      	bx	lr

0800a448 <_fini>:
 800a448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44a:	bf00      	nop
 800a44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a44e:	bc08      	pop	{r3}
 800a450:	469e      	mov	lr, r3
 800a452:	4770      	bx	lr
