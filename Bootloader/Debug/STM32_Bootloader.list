
STM32_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e1c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08004fb8  08004fb8  00014fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053d8  080053d8  000202e0  2**0
                  CONTENTS
  4 .ARM          00000008  080053d8  080053d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053e0  080053e0  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e0  080053e0  000153e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053e4  080053e4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  080053e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  200002e0  080056c8  000202e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  080056c8  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4b4  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002693  00000000  00000000  0002c7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000044a0  00000000  00000000  0002ee57  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000008f0  00000000  00000000  000332f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000008d8  00000000  00000000  00033be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00016206  00000000  00000000  000344c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00009ffc  00000000  00000000  0004a6c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00084ef4  00000000  00000000  000546c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d95b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e34  00000000  00000000  000d9634  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002e0 	.word	0x200002e0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004f9c 	.word	0x08004f9c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002e4 	.word	0x200002e4
 80001d4:	08004f9c 	.word	0x08004f9c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_uldivmod>:
 8000b10:	b953      	cbnz	r3, 8000b28 <__aeabi_uldivmod+0x18>
 8000b12:	b94a      	cbnz	r2, 8000b28 <__aeabi_uldivmod+0x18>
 8000b14:	2900      	cmp	r1, #0
 8000b16:	bf08      	it	eq
 8000b18:	2800      	cmpeq	r0, #0
 8000b1a:	bf1c      	itt	ne
 8000b1c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b20:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b24:	f000 b972 	b.w	8000e0c <__aeabi_idiv0>
 8000b28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b30:	f000 f806 	bl	8000b40 <__udivmoddi4>
 8000b34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b3c:	b004      	add	sp, #16
 8000b3e:	4770      	bx	lr

08000b40 <__udivmoddi4>:
 8000b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b44:	9e08      	ldr	r6, [sp, #32]
 8000b46:	4604      	mov	r4, r0
 8000b48:	4688      	mov	r8, r1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d14b      	bne.n	8000be6 <__udivmoddi4+0xa6>
 8000b4e:	428a      	cmp	r2, r1
 8000b50:	4615      	mov	r5, r2
 8000b52:	d967      	bls.n	8000c24 <__udivmoddi4+0xe4>
 8000b54:	fab2 f282 	clz	r2, r2
 8000b58:	b14a      	cbz	r2, 8000b6e <__udivmoddi4+0x2e>
 8000b5a:	f1c2 0720 	rsb	r7, r2, #32
 8000b5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b62:	fa20 f707 	lsr.w	r7, r0, r7
 8000b66:	4095      	lsls	r5, r2
 8000b68:	ea47 0803 	orr.w	r8, r7, r3
 8000b6c:	4094      	lsls	r4, r2
 8000b6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b72:	0c23      	lsrs	r3, r4, #16
 8000b74:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b78:	fa1f fc85 	uxth.w	ip, r5
 8000b7c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b80:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b84:	fb07 f10c 	mul.w	r1, r7, ip
 8000b88:	4299      	cmp	r1, r3
 8000b8a:	d909      	bls.n	8000ba0 <__udivmoddi4+0x60>
 8000b8c:	18eb      	adds	r3, r5, r3
 8000b8e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b92:	f080 811b 	bcs.w	8000dcc <__udivmoddi4+0x28c>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 8118 	bls.w	8000dcc <__udivmoddi4+0x28c>
 8000b9c:	3f02      	subs	r7, #2
 8000b9e:	442b      	add	r3, r5
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb4:	45a4      	cmp	ip, r4
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x8c>
 8000bb8:	192c      	adds	r4, r5, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bbe:	f080 8107 	bcs.w	8000dd0 <__udivmoddi4+0x290>
 8000bc2:	45a4      	cmp	ip, r4
 8000bc4:	f240 8104 	bls.w	8000dd0 <__udivmoddi4+0x290>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	442c      	add	r4, r5
 8000bcc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd0:	eba4 040c 	sub.w	r4, r4, ip
 8000bd4:	2700      	movs	r7, #0
 8000bd6:	b11e      	cbz	r6, 8000be0 <__udivmoddi4+0xa0>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c6 4300 	strd	r4, r3, [r6]
 8000be0:	4639      	mov	r1, r7
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xbe>
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	f000 80eb 	beq.w	8000dc6 <__udivmoddi4+0x286>
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf6:	4638      	mov	r0, r7
 8000bf8:	4639      	mov	r1, r7
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f783 	clz	r7, r3
 8000c02:	2f00      	cmp	r7, #0
 8000c04:	d147      	bne.n	8000c96 <__udivmoddi4+0x156>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd0>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80fa 	bhi.w	8000e04 <__udivmoddi4+0x2c4>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	4698      	mov	r8, r3
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa0>
 8000c1e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xe8>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 808f 	bne.w	8000d50 <__udivmoddi4+0x210>
 8000c32:	1b49      	subs	r1, r1, r5
 8000c34:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c38:	fa1f f885 	uxth.w	r8, r5
 8000c3c:	2701      	movs	r7, #1
 8000c3e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d907      	bls.n	8000c64 <__udivmoddi4+0x124>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x122>
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	f200 80cd 	bhi.w	8000dfc <__udivmoddi4+0x2bc>
 8000c62:	4684      	mov	ip, r0
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	b2a3      	uxth	r3, r4
 8000c68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c70:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c74:	fb08 f800 	mul.w	r8, r8, r0
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0x14c>
 8000c7c:	192c      	adds	r4, r5, r4
 8000c7e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x14a>
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	f200 80b6 	bhi.w	8000df6 <__udivmoddi4+0x2b6>
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	eba4 0408 	sub.w	r4, r4, r8
 8000c90:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c94:	e79f      	b.n	8000bd6 <__udivmoddi4+0x96>
 8000c96:	f1c7 0c20 	rsb	ip, r7, #32
 8000c9a:	40bb      	lsls	r3, r7
 8000c9c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca4:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cac:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb4:	4325      	orrs	r5, r4
 8000cb6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cba:	0c2c      	lsrs	r4, r5, #16
 8000cbc:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc0:	fa1f fa8e 	uxth.w	sl, lr
 8000cc4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc8:	fb09 f40a 	mul.w	r4, r9, sl
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd6:	d90b      	bls.n	8000cf0 <__udivmoddi4+0x1b0>
 8000cd8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cdc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ce0:	f080 8087 	bcs.w	8000df2 <__udivmoddi4+0x2b2>
 8000ce4:	429c      	cmp	r4, r3
 8000ce6:	f240 8084 	bls.w	8000df2 <__udivmoddi4+0x2b2>
 8000cea:	f1a9 0902 	sub.w	r9, r9, #2
 8000cee:	4473      	add	r3, lr
 8000cf0:	1b1b      	subs	r3, r3, r4
 8000cf2:	b2ad      	uxth	r5, r5
 8000cf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cfc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d00:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d04:	45a2      	cmp	sl, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x1da>
 8000d08:	eb1e 0404 	adds.w	r4, lr, r4
 8000d0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d10:	d26b      	bcs.n	8000dea <__udivmoddi4+0x2aa>
 8000d12:	45a2      	cmp	sl, r4
 8000d14:	d969      	bls.n	8000dea <__udivmoddi4+0x2aa>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4474      	add	r4, lr
 8000d1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d22:	eba4 040a 	sub.w	r4, r4, sl
 8000d26:	454c      	cmp	r4, r9
 8000d28:	46c2      	mov	sl, r8
 8000d2a:	464b      	mov	r3, r9
 8000d2c:	d354      	bcc.n	8000dd8 <__udivmoddi4+0x298>
 8000d2e:	d051      	beq.n	8000dd4 <__udivmoddi4+0x294>
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d069      	beq.n	8000e08 <__udivmoddi4+0x2c8>
 8000d34:	ebb1 050a 	subs.w	r5, r1, sl
 8000d38:	eb64 0403 	sbc.w	r4, r4, r3
 8000d3c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d40:	40fd      	lsrs	r5, r7
 8000d42:	40fc      	lsrs	r4, r7
 8000d44:	ea4c 0505 	orr.w	r5, ip, r5
 8000d48:	e9c6 5400 	strd	r5, r4, [r6]
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	e747      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f703 	lsr.w	r7, r0, r3
 8000d58:	4095      	lsls	r5, r2
 8000d5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d66:	4338      	orrs	r0, r7
 8000d68:	0c01      	lsrs	r1, r0, #16
 8000d6a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6e:	fa1f f885 	uxth.w	r8, r5
 8000d72:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7a:	fb07 f308 	mul.w	r3, r7, r8
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	fa04 f402 	lsl.w	r4, r4, r2
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x256>
 8000d86:	1869      	adds	r1, r5, r1
 8000d88:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d8c:	d22f      	bcs.n	8000dee <__udivmoddi4+0x2ae>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d92d      	bls.n	8000dee <__udivmoddi4+0x2ae>
 8000d92:	3f02      	subs	r7, #2
 8000d94:	4429      	add	r1, r5
 8000d96:	1acb      	subs	r3, r1, r3
 8000d98:	b281      	uxth	r1, r0
 8000d9a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da6:	fb00 f308 	mul.w	r3, r0, r8
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x27e>
 8000dae:	1869      	adds	r1, r5, r1
 8000db0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db4:	d217      	bcs.n	8000de6 <__udivmoddi4+0x2a6>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d915      	bls.n	8000de6 <__udivmoddi4+0x2a6>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4429      	add	r1, r5
 8000dbe:	1ac9      	subs	r1, r1, r3
 8000dc0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc4:	e73b      	b.n	8000c3e <__udivmoddi4+0xfe>
 8000dc6:	4637      	mov	r7, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e709      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000dcc:	4607      	mov	r7, r0
 8000dce:	e6e7      	b.n	8000ba0 <__udivmoddi4+0x60>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6fb      	b.n	8000bcc <__udivmoddi4+0x8c>
 8000dd4:	4541      	cmp	r1, r8
 8000dd6:	d2ab      	bcs.n	8000d30 <__udivmoddi4+0x1f0>
 8000dd8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ddc:	eb69 020e 	sbc.w	r2, r9, lr
 8000de0:	3801      	subs	r0, #1
 8000de2:	4613      	mov	r3, r2
 8000de4:	e7a4      	b.n	8000d30 <__udivmoddi4+0x1f0>
 8000de6:	4660      	mov	r0, ip
 8000de8:	e7e9      	b.n	8000dbe <__udivmoddi4+0x27e>
 8000dea:	4618      	mov	r0, r3
 8000dec:	e795      	b.n	8000d1a <__udivmoddi4+0x1da>
 8000dee:	4667      	mov	r7, ip
 8000df0:	e7d1      	b.n	8000d96 <__udivmoddi4+0x256>
 8000df2:	4681      	mov	r9, r0
 8000df4:	e77c      	b.n	8000cf0 <__udivmoddi4+0x1b0>
 8000df6:	3802      	subs	r0, #2
 8000df8:	442c      	add	r4, r5
 8000dfa:	e747      	b.n	8000c8c <__udivmoddi4+0x14c>
 8000dfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e00:	442b      	add	r3, r5
 8000e02:	e72f      	b.n	8000c64 <__udivmoddi4+0x124>
 8000e04:	4638      	mov	r0, r7
 8000e06:	e708      	b.n	8000c1a <__udivmoddi4+0xda>
 8000e08:	4637      	mov	r7, r6
 8000e0a:	e6e9      	b.n	8000be0 <__udivmoddi4+0xa0>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000e10:	4770      	bx	lr
	...

08000e14 <HAL_DeInit>:
{
 8000e14:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_DeInit+0x28>)
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e1c:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000e1e:	2400      	movs	r4, #0
 8000e20:	621c      	str	r4, [r3, #32]
  __HAL_RCC_APB2_FORCE_RESET();
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000e24:	625c      	str	r4, [r3, #36]	; 0x24
  __HAL_RCC_AHB1_FORCE_RESET();
 8000e26:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000e28:	611c      	str	r4, [r3, #16]
  __HAL_RCC_AHB2_FORCE_RESET();
 8000e2a:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000e2c:	615c      	str	r4, [r3, #20]
  __HAL_RCC_AHB3_FORCE_RESET();
 8000e2e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000e30:	619c      	str	r4, [r3, #24]
  HAL_MspDeInit();
 8000e32:	f7ff ffed 	bl	8000e10 <HAL_MspDeInit>
}
 8000e36:	4620      	mov	r0, r4
 8000e38:	bd10      	pop	{r4, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b510      	push	{r4, lr}
 8000e42:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_InitTick+0x40>)
 8000e46:	7818      	ldrb	r0, [r3, #0]
 8000e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e50:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <HAL_InitTick+0x44>)
 8000e52:	6810      	ldr	r0, [r2, #0]
 8000e54:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e58:	f000 f8e6 	bl	8001028 <HAL_SYSTICK_Config>
 8000e5c:	b968      	cbnz	r0, 8000e7a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	2c0f      	cmp	r4, #15
 8000e60:	d901      	bls.n	8000e66 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000e62:	2001      	movs	r0, #1
 8000e64:	e00a      	b.n	8000e7c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e66:	2200      	movs	r2, #0
 8000e68:	4621      	mov	r1, r4
 8000e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e6e:	f000 f86b 	bl	8000f48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <HAL_InitTick+0x48>)
 8000e74:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2000      	movs	r0, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000e7a:	2001      	movs	r0, #1
}
 8000e7c:	bd10      	pop	{r4, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000000 	.word	0x20000000
 8000e84:	2000010c 	.word	0x2000010c
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_Init>:
{
 8000e8c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_Init+0x30>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e96:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e9e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ea6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 f82f 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff ffc6 	bl	8000e40 <HAL_InitTick>
  HAL_MspInit();
 8000eb4:	f002 f9fa 	bl	80032ac <HAL_MspInit>
}
 8000eb8:	2000      	movs	r0, #0
 8000eba:	bd08      	pop	{r3, pc}
 8000ebc:	40023c00 	.word	0x40023c00

08000ec0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ec0:	4a03      	ldr	r2, [pc, #12]	; (8000ed0 <HAL_IncTick+0x10>)
 8000ec2:	6811      	ldr	r1, [r2, #0]
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_IncTick+0x14>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	440b      	add	r3, r1
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000308 	.word	0x20000308
 8000ed4:	20000000 	.word	0x20000000

08000ed8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ed8:	4b01      	ldr	r3, [pc, #4]	; (8000ee0 <HAL_GetTick+0x8>)
 8000eda:	6818      	ldr	r0, [r3, #0]
}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000308 	.word	0x20000308

08000ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b538      	push	{r3, r4, r5, lr}
 8000ee6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ee8:	f7ff fff6 	bl	8000ed8 <HAL_GetTick>
 8000eec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000ef2:	d002      	beq.n	8000efa <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <HAL_Delay+0x24>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000efa:	f7ff ffed 	bl	8000ed8 <HAL_GetTick>
 8000efe:	1b40      	subs	r0, r0, r5
 8000f00:	42a0      	cmp	r0, r4
 8000f02:	d3fa      	bcc.n	8000efa <HAL_Delay+0x16>
  {
  }
}
 8000f04:	bd38      	pop	{r3, r4, r5, pc}
 8000f06:	bf00      	nop
 8000f08:	20000000 	.word	0x20000000

08000f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b510      	push	{r4, lr}
 8000f0e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000f10:	1ec3      	subs	r3, r0, #3
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d80f      	bhi.n	8000f36 <HAL_NVIC_SetPriorityGrouping+0x2a>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8000f18:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f1e:	041b      	lsls	r3, r3, #16
 8000f20:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f22:	0224      	lsls	r4, r4, #8
 8000f24:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 8000f2a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000f32:	60d3      	str	r3, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f34:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000f36:	2192      	movs	r1, #146	; 0x92
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8000f3a:	f002 f9b6 	bl	80032aa <assert_failed>
 8000f3e:	e7ea      	b.n	8000f16 <HAL_NVIC_SetPriorityGrouping+0xa>
 8000f40:	e000ed00 	.word	0xe000ed00
 8000f44:	08004fb8 	.word	0x08004fb8

08000f48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f48:	b570      	push	{r4, r5, r6, lr}
 8000f4a:	4605      	mov	r5, r0
 8000f4c:	460c      	mov	r4, r1
 8000f4e:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000f50:	2a0f      	cmp	r2, #15
 8000f52:	d825      	bhi.n	8000fa0 <HAL_NVIC_SetPriority+0x58>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000f54:	2c0f      	cmp	r4, #15
 8000f56:	d828      	bhi.n	8000faa <HAL_NVIC_SetPriority+0x62>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <HAL_NVIC_SetPriority+0x80>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	f1c3 0207 	rsb	r2, r3, #7
 8000f64:	2a04      	cmp	r2, #4
 8000f66:	bf28      	it	cs
 8000f68:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	1d19      	adds	r1, r3, #4
 8000f6c:	2906      	cmp	r1, #6
 8000f6e:	d921      	bls.n	8000fb4 <HAL_NVIC_SetPriority+0x6c>
 8000f70:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f76:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7a:	ea24 0402 	bic.w	r4, r4, r2
 8000f7e:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	ea26 0603 	bic.w	r6, r6, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4334      	orrs	r4, r6
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	2d00      	cmp	r5, #0
 8000f8c:	db14      	blt.n	8000fb8 <HAL_NVIC_SetPriority+0x70>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	0124      	lsls	r4, r4, #4
 8000f90:	b2e4      	uxtb	r4, r4
 8000f92:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8000f96:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8000f9a:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f9e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000fa0:	21aa      	movs	r1, #170	; 0xaa
 8000fa2:	480a      	ldr	r0, [pc, #40]	; (8000fcc <HAL_NVIC_SetPriority+0x84>)
 8000fa4:	f002 f981 	bl	80032aa <assert_failed>
 8000fa8:	e7d4      	b.n	8000f54 <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000faa:	21ab      	movs	r1, #171	; 0xab
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <HAL_NVIC_SetPriority+0x84>)
 8000fae:	f002 f97c 	bl	80032aa <assert_failed>
 8000fb2:	e7d1      	b.n	8000f58 <HAL_NVIC_SetPriority+0x10>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e7dc      	b.n	8000f72 <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	f005 050f 	and.w	r5, r5, #15
 8000fbc:	0124      	lsls	r4, r4, #4
 8000fbe:	b2e4      	uxtb	r4, r4
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_NVIC_SetPriority+0x88>)
 8000fc2:	555c      	strb	r4, [r3, r5]
}
 8000fc4:	e7eb      	b.n	8000f9e <HAL_NVIC_SetPriority+0x56>
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00
 8000fcc:	08004fb8 	.word	0x08004fb8
 8000fd0:	e000ed14 	.word	0xe000ed14

08000fd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000fd6:	1e04      	subs	r4, r0, #0
 8000fd8:	db0a      	blt.n	8000ff0 <HAL_NVIC_EnableIRQ+0x1c>
  if ((int32_t)(IRQn) >= 0)
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	db07      	blt.n	8000fee <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	f004 021f 	and.w	r2, r4, #31
 8000fe2:	0964      	lsrs	r4, r4, #5
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	4093      	lsls	r3, r2
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_NVIC_EnableIRQ+0x28>)
 8000fea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000fee:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000ff0:	21be      	movs	r1, #190	; 0xbe
 8000ff2:	4803      	ldr	r0, [pc, #12]	; (8001000 <HAL_NVIC_EnableIRQ+0x2c>)
 8000ff4:	f002 f959 	bl	80032aa <assert_failed>
 8000ff8:	e7ef      	b.n	8000fda <HAL_NVIC_EnableIRQ+0x6>
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100
 8001000:	08004fb8 	.word	0x08004fb8

08001004 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001004:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001008:	4905      	ldr	r1, [pc, #20]	; (8001020 <HAL_NVIC_SystemReset+0x1c>)
 800100a:	68ca      	ldr	r2, [r1, #12]
 800100c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <HAL_NVIC_SystemReset+0x20>)
 8001012:	4313      	orrs	r3, r2
 8001014:	60cb      	str	r3, [r1, #12]
 8001016:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800101a:	bf00      	nop
 800101c:	e7fd      	b.n	800101a <HAL_NVIC_SystemReset+0x16>
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00
 8001024:	05fa0004 	.word	0x05fa0004

08001028 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001028:	3801      	subs	r0, #1
 800102a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800102e:	d20a      	bcs.n	8001046 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_SYSTICK_Config+0x24>)
 8001032:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <HAL_SYSTICK_Config+0x28>)
 8001036:	21f0      	movs	r1, #240	; 0xf0
 8001038:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103c:	2000      	movs	r0, #0
 800103e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e010 	.word	0xe000e010
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001054:	b1b0      	cbz	r0, 8001084 <HAL_CRC_Init+0x30>
{
 8001056:	b510      	push	{r4, lr}
 8001058:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800105a:	6802      	ldr	r2, [r0, #0]
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_CRC_Init+0x34>)
 800105e:	429a      	cmp	r2, r3
 8001060:	d003      	beq.n	800106a <HAL_CRC_Init+0x16>
 8001062:	2168      	movs	r1, #104	; 0x68
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <HAL_CRC_Init+0x38>)
 8001066:	f002 f920 	bl	80032aa <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800106a:	7963      	ldrb	r3, [r4, #5]
 800106c:	b12b      	cbz	r3, 800107a <HAL_CRC_Init+0x26>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800106e:	2302      	movs	r3, #2
 8001070:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001072:	2301      	movs	r3, #1
 8001074:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001076:	2000      	movs	r0, #0
}
 8001078:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800107a:	7123      	strb	r3, [r4, #4]
    HAL_CRC_MspInit(hcrc);
 800107c:	4620      	mov	r0, r4
 800107e:	f001 fff5 	bl	800306c <HAL_CRC_MspInit>
 8001082:	e7f4      	b.n	800106e <HAL_CRC_Init+0x1a>
    return HAL_ERROR;
 8001084:	2001      	movs	r0, #1
}
 8001086:	4770      	bx	lr
 8001088:	40023000 	.word	0x40023000
 800108c:	08004ff4 	.word	0x08004ff4

08001090 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001090:	6802      	ldr	r2, [r0, #0]
 8001092:	b2d3      	uxtb	r3, r2
 8001094:	3b10      	subs	r3, #16
 8001096:	490b      	ldr	r1, [pc, #44]	; (80010c4 <DMA_CalcBaseAndBitshift+0x34>)
 8001098:	fba1 1303 	umull	r1, r3, r1, r3
 800109c:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800109e:	490a      	ldr	r1, [pc, #40]	; (80010c8 <DMA_CalcBaseAndBitshift+0x38>)
 80010a0:	5cc9      	ldrb	r1, [r1, r3]
 80010a2:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d806      	bhi.n	80010b6 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80010a8:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80010ac:	f022 0203 	bic.w	r2, r2, #3
 80010b0:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80010b2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80010b4:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80010b6:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80010ba:	f022 0203 	bic.w	r2, r2, #3
 80010be:	3204      	adds	r2, #4
 80010c0:	6582      	str	r2, [r0, #88]	; 0x58
 80010c2:	e7f6      	b.n	80010b2 <DMA_CalcBaseAndBitshift+0x22>
 80010c4:	aaaaaaab 	.word	0xaaaaaaab
 80010c8:	08005064 	.word	0x08005064

080010cc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80010cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80010ce:	6982      	ldr	r2, [r0, #24]
 80010d0:	b992      	cbnz	r2, 80010f8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d00a      	beq.n	80010ec <DMA_CheckFifoParam+0x20>
 80010d6:	b11b      	cbz	r3, 80010e0 <DMA_CheckFifoParam+0x14>
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d001      	beq.n	80010e0 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80010dc:	2000      	movs	r0, #0
 80010de:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80010e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80010e2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80010e6:	d12c      	bne.n	8001142 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 80010e8:	2000      	movs	r0, #0
 80010ea:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80010ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80010ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80010f2:	d028      	beq.n	8001146 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80010f4:	2000      	movs	r0, #0
 80010f6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80010f8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80010fc:	d005      	beq.n	800110a <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d929      	bls.n	8001156 <DMA_CheckFifoParam+0x8a>
 8001102:	2b03      	cmp	r3, #3
 8001104:	d015      	beq.n	8001132 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8001106:	2000      	movs	r0, #0
 8001108:	4770      	bx	lr
    switch (tmp)
 800110a:	2b03      	cmp	r3, #3
 800110c:	d803      	bhi.n	8001116 <DMA_CheckFifoParam+0x4a>
 800110e:	e8df f003 	tbb	[pc, r3]
 8001112:	041c      	.short	0x041c
 8001114:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8001116:	2000      	movs	r0, #0
 8001118:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800111a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800111c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001120:	d115      	bne.n	800114e <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8001122:	2000      	movs	r0, #0
 8001124:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001126:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001128:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800112c:	d011      	beq.n	8001152 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 800112e:	2000      	movs	r0, #0
 8001130:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001132:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001134:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001138:	d001      	beq.n	800113e <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 800113a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 800113c:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800113e:	2000      	movs	r0, #0
 8001140:	4770      	bx	lr
        status = HAL_ERROR;
 8001142:	2001      	movs	r0, #1
 8001144:	4770      	bx	lr
        status = HAL_ERROR;
 8001146:	2001      	movs	r0, #1
 8001148:	4770      	bx	lr
      status = HAL_ERROR;
 800114a:	2001      	movs	r0, #1
 800114c:	4770      	bx	lr
        status = HAL_ERROR;
 800114e:	2001      	movs	r0, #1
 8001150:	4770      	bx	lr
        status = HAL_ERROR;
 8001152:	2001      	movs	r0, #1
 8001154:	4770      	bx	lr
      status = HAL_ERROR;
 8001156:	2001      	movs	r0, #1
 8001158:	4770      	bx	lr
	...

0800115c <HAL_DMA_Init>:
{
 800115c:	b570      	push	{r4, r5, r6, lr}
 800115e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff feba 	bl	8000ed8 <HAL_GetTick>
  if(hdma == NULL)
 8001164:	2c00      	cmp	r4, #0
 8001166:	f000 8138 	beq.w	80013da <HAL_DMA_Init+0x27e>
 800116a:	4605      	mov	r5, r0
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	4a9c      	ldr	r2, [pc, #624]	; (80013e0 <HAL_DMA_Init+0x284>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d031      	beq.n	80011d8 <HAL_DMA_Init+0x7c>
 8001174:	3218      	adds	r2, #24
 8001176:	4293      	cmp	r3, r2
 8001178:	d02e      	beq.n	80011d8 <HAL_DMA_Init+0x7c>
 800117a:	3218      	adds	r2, #24
 800117c:	4293      	cmp	r3, r2
 800117e:	d02b      	beq.n	80011d8 <HAL_DMA_Init+0x7c>
 8001180:	3218      	adds	r2, #24
 8001182:	4293      	cmp	r3, r2
 8001184:	d028      	beq.n	80011d8 <HAL_DMA_Init+0x7c>
 8001186:	3218      	adds	r2, #24
 8001188:	4293      	cmp	r3, r2
 800118a:	d025      	beq.n	80011d8 <HAL_DMA_Init+0x7c>
 800118c:	3218      	adds	r2, #24
 800118e:	4293      	cmp	r3, r2
 8001190:	d022      	beq.n	80011d8 <HAL_DMA_Init+0x7c>
 8001192:	3218      	adds	r2, #24
 8001194:	4293      	cmp	r3, r2
 8001196:	d01f      	beq.n	80011d8 <HAL_DMA_Init+0x7c>
 8001198:	3218      	adds	r2, #24
 800119a:	4293      	cmp	r3, r2
 800119c:	d01c      	beq.n	80011d8 <HAL_DMA_Init+0x7c>
 800119e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d018      	beq.n	80011d8 <HAL_DMA_Init+0x7c>
 80011a6:	3218      	adds	r2, #24
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d015      	beq.n	80011d8 <HAL_DMA_Init+0x7c>
 80011ac:	3218      	adds	r2, #24
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d012      	beq.n	80011d8 <HAL_DMA_Init+0x7c>
 80011b2:	3218      	adds	r2, #24
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d00f      	beq.n	80011d8 <HAL_DMA_Init+0x7c>
 80011b8:	3218      	adds	r2, #24
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d00c      	beq.n	80011d8 <HAL_DMA_Init+0x7c>
 80011be:	3218      	adds	r2, #24
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d009      	beq.n	80011d8 <HAL_DMA_Init+0x7c>
 80011c4:	3218      	adds	r2, #24
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d006      	beq.n	80011d8 <HAL_DMA_Init+0x7c>
 80011ca:	3218      	adds	r2, #24
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d003      	beq.n	80011d8 <HAL_DMA_Init+0x7c>
 80011d0:	21b8      	movs	r1, #184	; 0xb8
 80011d2:	4884      	ldr	r0, [pc, #528]	; (80013e4 <HAL_DMA_Init+0x288>)
 80011d4:	f002 f869 	bl	80032aa <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80011d8:	6863      	ldr	r3, [r4, #4]
 80011da:	b1a3      	cbz	r3, 8001206 <HAL_DMA_Init+0xaa>
 80011dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011e0:	d011      	beq.n	8001206 <HAL_DMA_Init+0xaa>
 80011e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80011e6:	d00e      	beq.n	8001206 <HAL_DMA_Init+0xaa>
 80011e8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80011ec:	d00b      	beq.n	8001206 <HAL_DMA_Init+0xaa>
 80011ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011f2:	d008      	beq.n	8001206 <HAL_DMA_Init+0xaa>
 80011f4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80011f8:	d005      	beq.n	8001206 <HAL_DMA_Init+0xaa>
 80011fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80011fe:	d002      	beq.n	8001206 <HAL_DMA_Init+0xaa>
 8001200:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001204:	d16d      	bne.n	80012e2 <HAL_DMA_Init+0x186>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001206:	68a3      	ldr	r3, [r4, #8]
 8001208:	b11b      	cbz	r3, 8001212 <HAL_DMA_Init+0xb6>
 800120a:	2b40      	cmp	r3, #64	; 0x40
 800120c:	d001      	beq.n	8001212 <HAL_DMA_Init+0xb6>
 800120e:	2b80      	cmp	r3, #128	; 0x80
 8001210:	d16c      	bne.n	80012ec <HAL_DMA_Init+0x190>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001212:	68e3      	ldr	r3, [r4, #12]
 8001214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001218:	d001      	beq.n	800121e <HAL_DMA_Init+0xc2>
 800121a:	2b00      	cmp	r3, #0
 800121c:	d16b      	bne.n	80012f6 <HAL_DMA_Init+0x19a>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800121e:	6923      	ldr	r3, [r4, #16]
 8001220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001224:	d001      	beq.n	800122a <HAL_DMA_Init+0xce>
 8001226:	2b00      	cmp	r3, #0
 8001228:	d16a      	bne.n	8001300 <HAL_DMA_Init+0x1a4>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800122a:	6963      	ldr	r3, [r4, #20]
 800122c:	b12b      	cbz	r3, 800123a <HAL_DMA_Init+0xde>
 800122e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001232:	d002      	beq.n	800123a <HAL_DMA_Init+0xde>
 8001234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001238:	d167      	bne.n	800130a <HAL_DMA_Init+0x1ae>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800123a:	69a3      	ldr	r3, [r4, #24]
 800123c:	b12b      	cbz	r3, 800124a <HAL_DMA_Init+0xee>
 800123e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001242:	d002      	beq.n	800124a <HAL_DMA_Init+0xee>
 8001244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001248:	d164      	bne.n	8001314 <HAL_DMA_Init+0x1b8>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800124a:	69e3      	ldr	r3, [r4, #28]
 800124c:	b123      	cbz	r3, 8001258 <HAL_DMA_Init+0xfc>
 800124e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001252:	d001      	beq.n	8001258 <HAL_DMA_Init+0xfc>
 8001254:	2b20      	cmp	r3, #32
 8001256:	d162      	bne.n	800131e <HAL_DMA_Init+0x1c2>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001258:	6a23      	ldr	r3, [r4, #32]
 800125a:	b143      	cbz	r3, 800126e <HAL_DMA_Init+0x112>
 800125c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001260:	d005      	beq.n	800126e <HAL_DMA_Init+0x112>
 8001262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001266:	d002      	beq.n	800126e <HAL_DMA_Init+0x112>
 8001268:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800126c:	d15c      	bne.n	8001328 <HAL_DMA_Init+0x1cc>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800126e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001270:	b10b      	cbz	r3, 8001276 <HAL_DMA_Init+0x11a>
 8001272:	2b04      	cmp	r3, #4
 8001274:	d15d      	bne.n	8001332 <HAL_DMA_Init+0x1d6>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001278:	b1c3      	cbz	r3, 80012ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800127a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800127c:	2b03      	cmp	r3, #3
 800127e:	d85d      	bhi.n	800133c <HAL_DMA_Init+0x1e0>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001280:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001282:	b143      	cbz	r3, 8001296 <HAL_DMA_Init+0x13a>
 8001284:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001288:	d005      	beq.n	8001296 <HAL_DMA_Init+0x13a>
 800128a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800128e:	d002      	beq.n	8001296 <HAL_DMA_Init+0x13a>
 8001290:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001294:	d157      	bne.n	8001346 <HAL_DMA_Init+0x1ea>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001296:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001298:	b143      	cbz	r3, 80012ac <HAL_DMA_Init+0x150>
 800129a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800129e:	d005      	beq.n	80012ac <HAL_DMA_Init+0x150>
 80012a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012a4:	d002      	beq.n	80012ac <HAL_DMA_Init+0x150>
 80012a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80012aa:	d151      	bne.n	8001350 <HAL_DMA_Init+0x1f4>
  __HAL_UNLOCK(hdma);
 80012ac:	2300      	movs	r3, #0
 80012ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80012b2:	2302      	movs	r3, #2
 80012b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80012b8:	6822      	ldr	r2, [r4, #0]
 80012ba:	6813      	ldr	r3, [r2, #0]
 80012bc:	f023 0301 	bic.w	r3, r3, #1
 80012c0:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	f012 0f01 	tst.w	r2, #1
 80012ca:	d046      	beq.n	800135a <HAL_DMA_Init+0x1fe>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012cc:	f7ff fe04 	bl	8000ed8 <HAL_GetTick>
 80012d0:	1b40      	subs	r0, r0, r5
 80012d2:	2805      	cmp	r0, #5
 80012d4:	d9f5      	bls.n	80012c2 <HAL_DMA_Init+0x166>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012d6:	2320      	movs	r3, #32
 80012d8:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012da:	2003      	movs	r0, #3
 80012dc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80012e0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80012e2:	21b9      	movs	r1, #185	; 0xb9
 80012e4:	483f      	ldr	r0, [pc, #252]	; (80013e4 <HAL_DMA_Init+0x288>)
 80012e6:	f001 ffe0 	bl	80032aa <assert_failed>
 80012ea:	e78c      	b.n	8001206 <HAL_DMA_Init+0xaa>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80012ec:	21ba      	movs	r1, #186	; 0xba
 80012ee:	483d      	ldr	r0, [pc, #244]	; (80013e4 <HAL_DMA_Init+0x288>)
 80012f0:	f001 ffdb 	bl	80032aa <assert_failed>
 80012f4:	e78d      	b.n	8001212 <HAL_DMA_Init+0xb6>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80012f6:	21bb      	movs	r1, #187	; 0xbb
 80012f8:	483a      	ldr	r0, [pc, #232]	; (80013e4 <HAL_DMA_Init+0x288>)
 80012fa:	f001 ffd6 	bl	80032aa <assert_failed>
 80012fe:	e78e      	b.n	800121e <HAL_DMA_Init+0xc2>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001300:	21bc      	movs	r1, #188	; 0xbc
 8001302:	4838      	ldr	r0, [pc, #224]	; (80013e4 <HAL_DMA_Init+0x288>)
 8001304:	f001 ffd1 	bl	80032aa <assert_failed>
 8001308:	e78f      	b.n	800122a <HAL_DMA_Init+0xce>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800130a:	21bd      	movs	r1, #189	; 0xbd
 800130c:	4835      	ldr	r0, [pc, #212]	; (80013e4 <HAL_DMA_Init+0x288>)
 800130e:	f001 ffcc 	bl	80032aa <assert_failed>
 8001312:	e792      	b.n	800123a <HAL_DMA_Init+0xde>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001314:	21be      	movs	r1, #190	; 0xbe
 8001316:	4833      	ldr	r0, [pc, #204]	; (80013e4 <HAL_DMA_Init+0x288>)
 8001318:	f001 ffc7 	bl	80032aa <assert_failed>
 800131c:	e795      	b.n	800124a <HAL_DMA_Init+0xee>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800131e:	21bf      	movs	r1, #191	; 0xbf
 8001320:	4830      	ldr	r0, [pc, #192]	; (80013e4 <HAL_DMA_Init+0x288>)
 8001322:	f001 ffc2 	bl	80032aa <assert_failed>
 8001326:	e797      	b.n	8001258 <HAL_DMA_Init+0xfc>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001328:	21c0      	movs	r1, #192	; 0xc0
 800132a:	482e      	ldr	r0, [pc, #184]	; (80013e4 <HAL_DMA_Init+0x288>)
 800132c:	f001 ffbd 	bl	80032aa <assert_failed>
 8001330:	e79d      	b.n	800126e <HAL_DMA_Init+0x112>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001332:	21c1      	movs	r1, #193	; 0xc1
 8001334:	482b      	ldr	r0, [pc, #172]	; (80013e4 <HAL_DMA_Init+0x288>)
 8001336:	f001 ffb8 	bl	80032aa <assert_failed>
 800133a:	e79c      	b.n	8001276 <HAL_DMA_Init+0x11a>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800133c:	21c6      	movs	r1, #198	; 0xc6
 800133e:	4829      	ldr	r0, [pc, #164]	; (80013e4 <HAL_DMA_Init+0x288>)
 8001340:	f001 ffb3 	bl	80032aa <assert_failed>
 8001344:	e79c      	b.n	8001280 <HAL_DMA_Init+0x124>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001346:	21c7      	movs	r1, #199	; 0xc7
 8001348:	4826      	ldr	r0, [pc, #152]	; (80013e4 <HAL_DMA_Init+0x288>)
 800134a:	f001 ffae 	bl	80032aa <assert_failed>
 800134e:	e7a2      	b.n	8001296 <HAL_DMA_Init+0x13a>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001350:	21c8      	movs	r1, #200	; 0xc8
 8001352:	4824      	ldr	r0, [pc, #144]	; (80013e4 <HAL_DMA_Init+0x288>)
 8001354:	f001 ffa9 	bl	80032aa <assert_failed>
 8001358:	e7a8      	b.n	80012ac <HAL_DMA_Init+0x150>
  tmp = hdma->Instance->CR;
 800135a:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800135c:	4822      	ldr	r0, [pc, #136]	; (80013e8 <HAL_DMA_Init+0x28c>)
 800135e:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001360:	6861      	ldr	r1, [r4, #4]
 8001362:	68a2      	ldr	r2, [r4, #8]
 8001364:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001366:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001368:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136a:	6921      	ldr	r1, [r4, #16]
 800136c:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136e:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001370:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001372:	69a1      	ldr	r1, [r4, #24]
 8001374:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001376:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001378:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800137a:	6a21      	ldr	r1, [r4, #32]
 800137c:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800137e:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001380:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001382:	2904      	cmp	r1, #4
 8001384:	d01e      	beq.n	80013c4 <HAL_DMA_Init+0x268>
  hdma->Instance->CR = tmp;  
 8001386:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001388:	6826      	ldr	r6, [r4, #0]
 800138a:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800138c:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001392:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001394:	2b04      	cmp	r3, #4
 8001396:	d107      	bne.n	80013a8 <HAL_DMA_Init+0x24c>
    tmp |= hdma->Init.FIFOThreshold;
 8001398:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800139a:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800139c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800139e:	b11b      	cbz	r3, 80013a8 <HAL_DMA_Init+0x24c>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013a0:	4620      	mov	r0, r4
 80013a2:	f7ff fe93 	bl	80010cc <DMA_CheckFifoParam>
 80013a6:	b990      	cbnz	r0, 80013ce <HAL_DMA_Init+0x272>
  hdma->Instance->FCR = tmp;
 80013a8:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013aa:	4620      	mov	r0, r4
 80013ac:	f7ff fe70 	bl	8001090 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013b0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80013b2:	233f      	movs	r3, #63	; 0x3f
 80013b4:	4093      	lsls	r3, r2
 80013b6:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b8:	2000      	movs	r0, #0
 80013ba:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80013bc:	2301      	movs	r3, #1
 80013be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80013c2:	e78d      	b.n	80012e0 <HAL_DMA_Init+0x184>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80013c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80013c8:	4301      	orrs	r1, r0
 80013ca:	430a      	orrs	r2, r1
 80013cc:	e7db      	b.n	8001386 <HAL_DMA_Init+0x22a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013ce:	2340      	movs	r3, #64	; 0x40
 80013d0:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80013d2:	2001      	movs	r0, #1
 80013d4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80013d8:	e782      	b.n	80012e0 <HAL_DMA_Init+0x184>
    return HAL_ERROR;
 80013da:	2001      	movs	r0, #1
 80013dc:	e780      	b.n	80012e0 <HAL_DMA_Init+0x184>
 80013de:	bf00      	nop
 80013e0:	40026010 	.word	0x40026010
 80013e4:	0800502c 	.word	0x0800502c
 80013e8:	f010803f 	.word	0xf010803f

080013ec <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d003      	beq.n	80013fe <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80013fa:	2001      	movs	r0, #1
 80013fc:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80013fe:	2305      	movs	r3, #5
 8001400:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001404:	6802      	ldr	r2, [r0, #0]
 8001406:	6813      	ldr	r3, [r2, #0]
 8001408:	f023 0301 	bic.w	r3, r3, #1
 800140c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800140e:	2000      	movs	r0, #0
}
 8001410:	4770      	bx	lr
	...

08001414 <HAL_DMA_IRQHandler>:
{
 8001414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001416:	b083      	sub	sp, #12
 8001418:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800141e:	4b72      	ldr	r3, [pc, #456]	; (80015e8 <HAL_DMA_IRQHandler+0x1d4>)
 8001420:	681d      	ldr	r5, [r3, #0]
 8001422:	4b72      	ldr	r3, [pc, #456]	; (80015ec <HAL_DMA_IRQHandler+0x1d8>)
 8001424:	fba3 3505 	umull	r3, r5, r3, r5
 8001428:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800142a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 800142c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800142e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001430:	2308      	movs	r3, #8
 8001432:	4093      	lsls	r3, r2
 8001434:	4233      	tst	r3, r6
 8001436:	d010      	beq.n	800145a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001438:	6803      	ldr	r3, [r0, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	f012 0f04 	tst.w	r2, #4
 8001440:	d00b      	beq.n	800145a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	f022 0204 	bic.w	r2, r2, #4
 8001448:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800144a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800144c:	2308      	movs	r3, #8
 800144e:	4093      	lsls	r3, r2
 8001450:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001452:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800145a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800145c:	2301      	movs	r3, #1
 800145e:	4093      	lsls	r3, r2
 8001460:	4233      	tst	r3, r6
 8001462:	d009      	beq.n	8001478 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001464:	6822      	ldr	r2, [r4, #0]
 8001466:	6952      	ldr	r2, [r2, #20]
 8001468:	f012 0f80 	tst.w	r2, #128	; 0x80
 800146c:	d004      	beq.n	8001478 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800146e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001470:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001472:	f043 0302 	orr.w	r3, r3, #2
 8001476:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001478:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800147a:	2304      	movs	r3, #4
 800147c:	4093      	lsls	r3, r2
 800147e:	4233      	tst	r3, r6
 8001480:	d009      	beq.n	8001496 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001482:	6822      	ldr	r2, [r4, #0]
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	f012 0f02 	tst.w	r2, #2
 800148a:	d004      	beq.n	8001496 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800148c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800148e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001496:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001498:	2310      	movs	r3, #16
 800149a:	4093      	lsls	r3, r2
 800149c:	4233      	tst	r3, r6
 800149e:	d024      	beq.n	80014ea <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014a0:	6822      	ldr	r2, [r4, #0]
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	f012 0f08 	tst.w	r2, #8
 80014a8:	d01f      	beq.n	80014ea <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014aa:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014ac:	6823      	ldr	r3, [r4, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80014b4:	d00d      	beq.n	80014d2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80014bc:	d104      	bne.n	80014c8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80014be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014c0:	b19b      	cbz	r3, 80014ea <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80014c2:	4620      	mov	r0, r4
 80014c4:	4798      	blx	r3
 80014c6:	e010      	b.n	80014ea <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80014ca:	b173      	cbz	r3, 80014ea <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80014cc:	4620      	mov	r0, r4
 80014ce:	4798      	blx	r3
 80014d0:	e00b      	b.n	80014ea <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80014d8:	d103      	bne.n	80014e2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	f022 0208 	bic.w	r2, r2, #8
 80014e0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80014e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014e4:	b10b      	cbz	r3, 80014ea <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80014e6:	4620      	mov	r0, r4
 80014e8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80014ec:	2320      	movs	r3, #32
 80014ee:	4093      	lsls	r3, r2
 80014f0:	4233      	tst	r3, r6
 80014f2:	d055      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014f4:	6822      	ldr	r2, [r4, #0]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	f012 0f10 	tst.w	r2, #16
 80014fc:	d050      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014fe:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001500:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b05      	cmp	r3, #5
 8001508:	d00e      	beq.n	8001528 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001512:	d033      	beq.n	800157c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800151a:	d12a      	bne.n	8001572 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 800151c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800151e:	2b00      	cmp	r3, #0
 8001520:	d03e      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001522:	4620      	mov	r0, r4
 8001524:	4798      	blx	r3
 8001526:	e03b      	b.n	80015a0 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001528:	6822      	ldr	r2, [r4, #0]
 800152a:	6813      	ldr	r3, [r2, #0]
 800152c:	f023 0316 	bic.w	r3, r3, #22
 8001530:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001532:	6822      	ldr	r2, [r4, #0]
 8001534:	6953      	ldr	r3, [r2, #20]
 8001536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800153a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800153c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800153e:	b1a3      	cbz	r3, 800156a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001540:	6822      	ldr	r2, [r4, #0]
 8001542:	6813      	ldr	r3, [r2, #0]
 8001544:	f023 0308 	bic.w	r3, r3, #8
 8001548:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800154a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800154c:	233f      	movs	r3, #63	; 0x3f
 800154e:	4093      	lsls	r3, r2
 8001550:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001552:	2300      	movs	r3, #0
 8001554:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001558:	2301      	movs	r3, #1
 800155a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800155e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001560:	2b00      	cmp	r3, #0
 8001562:	d03f      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001564:	4620      	mov	r0, r4
 8001566:	4798      	blx	r3
 8001568:	e03c      	b.n	80015e4 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800156a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1e7      	bne.n	8001540 <HAL_DMA_IRQHandler+0x12c>
 8001570:	e7eb      	b.n	800154a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001572:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001574:	b1a3      	cbz	r3, 80015a0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001576:	4620      	mov	r0, r4
 8001578:	4798      	blx	r3
 800157a:	e011      	b.n	80015a0 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001582:	d109      	bne.n	8001598 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	f022 0210 	bic.w	r2, r2, #16
 800158a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 800158c:	2300      	movs	r3, #0
 800158e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001592:	2301      	movs	r3, #1
 8001594:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001598:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800159a:	b10b      	cbz	r3, 80015a0 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800159c:	4620      	mov	r0, r4
 800159e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015a2:	b1fb      	cbz	r3, 80015e4 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015a6:	f013 0f01 	tst.w	r3, #1
 80015aa:	d017      	beq.n	80015dc <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80015ac:	2305      	movs	r3, #5
 80015ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80015b2:	6822      	ldr	r2, [r4, #0]
 80015b4:	6813      	ldr	r3, [r2, #0]
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80015bc:	9b01      	ldr	r3, [sp, #4]
 80015be:	3301      	adds	r3, #1
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	42ab      	cmp	r3, r5
 80015c4:	d804      	bhi.n	80015d0 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f013 0f01 	tst.w	r3, #1
 80015ce:	d1f5      	bne.n	80015bc <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 80015d0:	2300      	movs	r3, #0
 80015d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80015d6:	2301      	movs	r3, #1
 80015d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80015dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80015de:	b10b      	cbz	r3, 80015e4 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80015e0:	4620      	mov	r0, r4
 80015e2:	4798      	blx	r3
}
 80015e4:	b003      	add	sp, #12
 80015e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e8:	2000010c 	.word	0x2000010c
 80015ec:	1b4e81b5 	.word	0x1b4e81b5

080015f0 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80015f0:	4b27      	ldr	r3, [pc, #156]	; (8001690 <FLASH_SetErrorCode+0xa0>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f013 0f10 	tst.w	r3, #16
 80015f8:	d007      	beq.n	800160a <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80015fa:	4a26      	ldr	r2, [pc, #152]	; (8001694 <FLASH_SetErrorCode+0xa4>)
 80015fc:	69d3      	ldr	r3, [r2, #28]
 80015fe:	f043 0310 	orr.w	r3, r3, #16
 8001602:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <FLASH_SetErrorCode+0xa0>)
 8001606:	2210      	movs	r2, #16
 8001608:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <FLASH_SetErrorCode+0xa0>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f013 0f20 	tst.w	r3, #32
 8001612:	d007      	beq.n	8001624 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001614:	4a1f      	ldr	r2, [pc, #124]	; (8001694 <FLASH_SetErrorCode+0xa4>)
 8001616:	69d3      	ldr	r3, [r2, #28]
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <FLASH_SetErrorCode+0xa0>)
 8001620:	2220      	movs	r2, #32
 8001622:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <FLASH_SetErrorCode+0xa0>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	f013 0f40 	tst.w	r3, #64	; 0x40
 800162c:	d007      	beq.n	800163e <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800162e:	4a19      	ldr	r2, [pc, #100]	; (8001694 <FLASH_SetErrorCode+0xa4>)
 8001630:	69d3      	ldr	r3, [r2, #28]
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <FLASH_SetErrorCode+0xa0>)
 800163a:	2240      	movs	r2, #64	; 0x40
 800163c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <FLASH_SetErrorCode+0xa0>)
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001646:	d007      	beq.n	8001658 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001648:	4a12      	ldr	r2, [pc, #72]	; (8001694 <FLASH_SetErrorCode+0xa4>)
 800164a:	69d3      	ldr	r3, [r2, #28]
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <FLASH_SetErrorCode+0xa0>)
 8001654:	2280      	movs	r2, #128	; 0x80
 8001656:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001658:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <FLASH_SetErrorCode+0xa0>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001660:	d008      	beq.n	8001674 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001662:	4a0c      	ldr	r2, [pc, #48]	; (8001694 <FLASH_SetErrorCode+0xa4>)
 8001664:	69d3      	ldr	r3, [r2, #28]
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <FLASH_SetErrorCode+0xa0>)
 800166e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001672:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <FLASH_SetErrorCode+0xa0>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f013 0f02 	tst.w	r3, #2
 800167c:	d007      	beq.n	800168e <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <FLASH_SetErrorCode+0xa4>)
 8001680:	69d3      	ldr	r3, [r2, #28]
 8001682:	f043 0320 	orr.w	r3, r3, #32
 8001686:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001688:	4b01      	ldr	r3, [pc, #4]	; (8001690 <FLASH_SetErrorCode+0xa0>)
 800168a:	2202      	movs	r2, #2
 800168c:	60da      	str	r2, [r3, #12]
  }
}
 800168e:	4770      	bx	lr
 8001690:	40023c00 	.word	0x40023c00
 8001694:	2000030c 	.word	0x2000030c

08001698 <FLASH_Program_Byte>:
{
 8001698:	b538      	push	{r3, r4, r5, lr}
 800169a:	4604      	mov	r4, r0
 800169c:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800169e:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 80016a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016a6:	d306      	bcc.n	80016b6 <FLASH_Program_Byte+0x1e>
 80016a8:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 80016ac:	f503 4308 	add.w	r3, r3, #34816	; 0x8800
 80016b0:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 80016b4:	d20c      	bcs.n	80016d0 <FLASH_Program_Byte+0x38>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <FLASH_Program_Byte+0x44>)
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80016be:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80016c0:	691a      	ldr	r2, [r3, #16]
 80016c2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 80016cc:	7025      	strb	r5, [r4, #0]
}
 80016ce:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 80016d0:	f240 21b5 	movw	r1, #693	; 0x2b5
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <FLASH_Program_Byte+0x48>)
 80016d6:	f001 fde8 	bl	80032aa <assert_failed>
 80016da:	e7ec      	b.n	80016b6 <FLASH_Program_Byte+0x1e>
 80016dc:	40023c00 	.word	0x40023c00
 80016e0:	0800506c 	.word	0x0800506c

080016e4 <FLASH_Program_HalfWord>:
{
 80016e4:	b538      	push	{r3, r4, r5, lr}
 80016e6:	4604      	mov	r4, r0
 80016e8:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 80016ea:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 80016ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016f2:	d306      	bcc.n	8001702 <FLASH_Program_HalfWord+0x1e>
 80016f4:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 80016f8:	f503 4308 	add.w	r3, r3, #34816	; 0x8800
 80016fc:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8001700:	d20e      	bcs.n	8001720 <FLASH_Program_HalfWord+0x3c>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <FLASH_Program_HalfWord+0x48>)
 8001704:	691a      	ldr	r2, [r3, #16]
 8001706:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800170a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001712:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001714:	691a      	ldr	r2, [r3, #16]
 8001716:	f042 0201 	orr.w	r2, r2, #1
 800171a:	611a      	str	r2, [r3, #16]
  *(__IO uint16_t*)Address = Data;
 800171c:	8025      	strh	r5, [r4, #0]
}
 800171e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 8001720:	f44f 7127 	mov.w	r1, #668	; 0x29c
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <FLASH_Program_HalfWord+0x4c>)
 8001726:	f001 fdc0 	bl	80032aa <assert_failed>
 800172a:	e7ea      	b.n	8001702 <FLASH_Program_HalfWord+0x1e>
 800172c:	40023c00 	.word	0x40023c00
 8001730:	0800506c 	.word	0x0800506c

08001734 <FLASH_Program_Word>:
{
 8001734:	b538      	push	{r3, r4, r5, lr}
 8001736:	4604      	mov	r4, r0
 8001738:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800173a:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800173e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001742:	d306      	bcc.n	8001752 <FLASH_Program_Word+0x1e>
 8001744:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 8001748:	f503 4308 	add.w	r3, r3, #34816	; 0x8800
 800174c:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8001750:	d20e      	bcs.n	8001770 <FLASH_Program_Word+0x3c>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <FLASH_Program_Word+0x48>)
 8001754:	691a      	ldr	r2, [r3, #16]
 8001756:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800175a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800175c:	691a      	ldr	r2, [r3, #16]
 800175e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001762:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001764:	691a      	ldr	r2, [r3, #16]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = Data;
 800176c:	6025      	str	r5, [r4, #0]
}
 800176e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 8001770:	f240 2183 	movw	r1, #643	; 0x283
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <FLASH_Program_Word+0x4c>)
 8001776:	f001 fd98 	bl	80032aa <assert_failed>
 800177a:	e7ea      	b.n	8001752 <FLASH_Program_Word+0x1e>
 800177c:	40023c00 	.word	0x40023c00
 8001780:	0800506c 	.word	0x0800506c

08001784 <FLASH_Program_DoubleWord>:
{
 8001784:	b570      	push	{r4, r5, r6, lr}
 8001786:	4604      	mov	r4, r0
 8001788:	4616      	mov	r6, r2
 800178a:	461d      	mov	r5, r3
  assert_param(IS_FLASH_ADDRESS(Address));
 800178c:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8001790:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001794:	d306      	bcc.n	80017a4 <FLASH_Program_DoubleWord+0x20>
 8001796:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 800179a:	f503 4308 	add.w	r3, r3, #34816	; 0x8800
 800179e:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 80017a2:	d20f      	bcs.n	80017c4 <FLASH_Program_DoubleWord+0x40>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <FLASH_Program_DoubleWord+0x4c>)
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80017ac:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80017b4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80017be:	6026      	str	r6, [r4, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80017c0:	6065      	str	r5, [r4, #4]
}
 80017c2:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 80017c4:	f240 2167 	movw	r1, #615	; 0x267
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <FLASH_Program_DoubleWord+0x50>)
 80017ca:	f001 fd6e 	bl	80032aa <assert_failed>
 80017ce:	e7e9      	b.n	80017a4 <FLASH_Program_DoubleWord+0x20>
 80017d0:	40023c00 	.word	0x40023c00
 80017d4:	0800506c 	.word	0x0800506c

080017d8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_FLASH_Unlock+0x28>)
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	db01      	blt.n	80017e4 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80017e0:	2000      	movs	r0, #0
 80017e2:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_FLASH_Unlock+0x28>)
 80017e6:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_FLASH_Unlock+0x2c>)
 80017e8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80017ea:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80017ee:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db01      	blt.n	80017fa <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80017f6:	2000      	movs	r0, #0
 80017f8:	4770      	bx	lr
      status = HAL_ERROR;
 80017fa:	2001      	movs	r0, #1
}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40023c00 	.word	0x40023c00
 8001804:	45670123 	.word	0x45670123

08001808 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8001808:	4a03      	ldr	r2, [pc, #12]	; (8001818 <HAL_FLASH_Lock+0x10>)
 800180a:	6913      	ldr	r3, [r2, #16]
 800180c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001810:	6113      	str	r3, [r2, #16]
}
 8001812:	2000      	movs	r0, #0
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00

0800181c <FLASH_WaitForLastOperation>:
{ 
 800181c:	b538      	push	{r3, r4, r5, lr}
 800181e:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <FLASH_WaitForLastOperation+0x5c>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8001826:	f7ff fb57 	bl	8000ed8 <HAL_GetTick>
 800182a:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <FLASH_WaitForLastOperation+0x60>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001834:	d00a      	beq.n	800184c <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8001836:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800183a:	d0f7      	beq.n	800182c <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800183c:	b1cc      	cbz	r4, 8001872 <FLASH_WaitForLastOperation+0x56>
 800183e:	f7ff fb4b 	bl	8000ed8 <HAL_GetTick>
 8001842:	1b40      	subs	r0, r0, r5
 8001844:	42a0      	cmp	r0, r4
 8001846:	d9f1      	bls.n	800182c <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8001848:	2003      	movs	r0, #3
 800184a:	e00d      	b.n	8001868 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <FLASH_WaitForLastOperation+0x60>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f013 0f01 	tst.w	r3, #1
 8001854:	d002      	beq.n	800185c <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <FLASH_WaitForLastOperation+0x60>)
 8001858:	2201      	movs	r2, #1
 800185a:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800185c:	4b07      	ldr	r3, [pc, #28]	; (800187c <FLASH_WaitForLastOperation+0x60>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 8001864:	d101      	bne.n	800186a <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 8001866:	2000      	movs	r0, #0
}  
 8001868:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 800186a:	f7ff fec1 	bl	80015f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800186e:	2001      	movs	r0, #1
 8001870:	e7fa      	b.n	8001868 <FLASH_WaitForLastOperation+0x4c>
        return HAL_TIMEOUT;
 8001872:	2003      	movs	r0, #3
 8001874:	e7f8      	b.n	8001868 <FLASH_WaitForLastOperation+0x4c>
 8001876:	bf00      	nop
 8001878:	2000030c 	.word	0x2000030c
 800187c:	40023c00 	.word	0x40023c00

08001880 <HAL_FLASH_Program>:
{
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8001882:	4c21      	ldr	r4, [pc, #132]	; (8001908 <HAL_FLASH_Program+0x88>)
 8001884:	7e24      	ldrb	r4, [r4, #24]
 8001886:	2c01      	cmp	r4, #1
 8001888:	d03b      	beq.n	8001902 <HAL_FLASH_Program+0x82>
 800188a:	461f      	mov	r7, r3
 800188c:	4616      	mov	r6, r2
 800188e:	460d      	mov	r5, r1
 8001890:	4604      	mov	r4, r0
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <HAL_FLASH_Program+0x88>)
 8001894:	2201      	movs	r2, #1
 8001896:	761a      	strb	r2, [r3, #24]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8001898:	2803      	cmp	r0, #3
 800189a:	d81e      	bhi.n	80018da <HAL_FLASH_Program+0x5a>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800189c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018a0:	f7ff ffbc 	bl	800181c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80018a4:	4601      	mov	r1, r0
 80018a6:	b998      	cbnz	r0, 80018d0 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80018a8:	b1e4      	cbz	r4, 80018e4 <HAL_FLASH_Program+0x64>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80018aa:	2c01      	cmp	r4, #1
 80018ac:	d01f      	beq.n	80018ee <HAL_FLASH_Program+0x6e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80018ae:	2c02      	cmp	r4, #2
 80018b0:	d022      	beq.n	80018f8 <HAL_FLASH_Program+0x78>
      FLASH_Program_DoubleWord(Address, Data);
 80018b2:	4632      	mov	r2, r6
 80018b4:	463b      	mov	r3, r7
 80018b6:	4628      	mov	r0, r5
 80018b8:	f7ff ff64 	bl	8001784 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018c0:	f7ff ffac 	bl	800181c <FLASH_WaitForLastOperation>
 80018c4:	4601      	mov	r1, r0
    FLASH->CR &= (~FLASH_CR_PG);  
 80018c6:	4a11      	ldr	r2, [pc, #68]	; (800190c <HAL_FLASH_Program+0x8c>)
 80018c8:	6913      	ldr	r3, [r2, #16]
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <HAL_FLASH_Program+0x88>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	761a      	strb	r2, [r3, #24]
}
 80018d6:	4608      	mov	r0, r1
 80018d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 80018da:	21a4      	movs	r1, #164	; 0xa4
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <HAL_FLASH_Program+0x90>)
 80018de:	f001 fce4 	bl	80032aa <assert_failed>
 80018e2:	e7db      	b.n	800189c <HAL_FLASH_Program+0x1c>
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80018e4:	b2f1      	uxtb	r1, r6
 80018e6:	4628      	mov	r0, r5
 80018e8:	f7ff fed6 	bl	8001698 <FLASH_Program_Byte>
 80018ec:	e7e6      	b.n	80018bc <HAL_FLASH_Program+0x3c>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80018ee:	b2b1      	uxth	r1, r6
 80018f0:	4628      	mov	r0, r5
 80018f2:	f7ff fef7 	bl	80016e4 <FLASH_Program_HalfWord>
 80018f6:	e7e1      	b.n	80018bc <HAL_FLASH_Program+0x3c>
      FLASH_Program_Word(Address, (uint32_t) Data);
 80018f8:	4631      	mov	r1, r6
 80018fa:	4628      	mov	r0, r5
 80018fc:	f7ff ff1a 	bl	8001734 <FLASH_Program_Word>
 8001900:	e7dc      	b.n	80018bc <HAL_FLASH_Program+0x3c>
  __HAL_LOCK(&pFlash);
 8001902:	2102      	movs	r1, #2
 8001904:	e7e7      	b.n	80018d6 <HAL_FLASH_Program+0x56>
 8001906:	bf00      	nop
 8001908:	2000030c 	.word	0x2000030c
 800190c:	40023c00 	.word	0x40023c00
 8001910:	0800506c 	.word	0x0800506c

08001914 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001914:	b538      	push	{r3, r4, r5, lr}
 8001916:	4604      	mov	r4, r0
 8001918:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800191a:	2803      	cmp	r0, #3
 800191c:	d816      	bhi.n	800194c <FLASH_MassErase+0x38>
  assert_param(IS_FLASH_BANK(Banks));
 800191e:	2d01      	cmp	r5, #1
 8001920:	d004      	beq.n	800192c <FLASH_MassErase+0x18>
 8001922:	f240 31bd 	movw	r1, #957	; 0x3bd
 8001926:	480c      	ldr	r0, [pc, #48]	; (8001958 <FLASH_MassErase+0x44>)
 8001928:	f001 fcbf 	bl	80032aa <assert_failed>
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <FLASH_MassErase+0x48>)
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001934:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001936:	691a      	ldr	r2, [r3, #16]
 8001938:	f042 0204 	orr.w	r2, r2, #4
 800193c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800193e:	6918      	ldr	r0, [r3, #16]
 8001940:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8001944:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8001948:	6118      	str	r0, [r3, #16]
}
 800194a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800194c:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 8001950:	4801      	ldr	r0, [pc, #4]	; (8001958 <FLASH_MassErase+0x44>)
 8001952:	f001 fcaa 	bl	80032aa <assert_failed>
 8001956:	e7e2      	b.n	800191e <FLASH_MassErase+0xa>
 8001958:	080050a8 	.word	0x080050a8
 800195c:	40023c00 	.word	0x40023c00

08001960 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001960:	b538      	push	{r3, r4, r5, lr}
 8001962:	4604      	mov	r4, r0
 8001964:	460d      	mov	r5, r1
  uint32_t tmp_psize = 0U;

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 8001966:	2807      	cmp	r0, #7
 8001968:	d809      	bhi.n	800197e <FLASH_Erase_Sector+0x1e>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800196a:	2d03      	cmp	r5, #3
 800196c:	d80d      	bhi.n	800198a <FLASH_Erase_Sector+0x2a>
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800196e:	b1ad      	cbz	r5, 800199c <FLASH_Erase_Sector+0x3c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001970:	2d01      	cmp	r5, #1
 8001972:	d02b      	beq.n	80019cc <FLASH_Erase_Sector+0x6c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001974:	2d02      	cmp	r5, #2
 8001976:	d00e      	beq.n	8001996 <FLASH_Erase_Sector+0x36>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001978:	f44f 7040 	mov.w	r0, #768	; 0x300
 800197c:	e00f      	b.n	800199e <FLASH_Erase_Sector+0x3e>
  assert_param(IS_FLASH_SECTOR(Sector));
 800197e:	f240 31db 	movw	r1, #987	; 0x3db
 8001982:	4814      	ldr	r0, [pc, #80]	; (80019d4 <FLASH_Erase_Sector+0x74>)
 8001984:	f001 fc91 	bl	80032aa <assert_failed>
 8001988:	e7ef      	b.n	800196a <FLASH_Erase_Sector+0xa>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800198a:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 800198e:	4811      	ldr	r0, [pc, #68]	; (80019d4 <FLASH_Erase_Sector+0x74>)
 8001990:	f001 fc8b 	bl	80032aa <assert_failed>
 8001994:	e7eb      	b.n	800196e <FLASH_Erase_Sector+0xe>
    tmp_psize = FLASH_PSIZE_WORD;
 8001996:	f44f 7000 	mov.w	r0, #512	; 0x200
 800199a:	e000      	b.n	800199e <FLASH_Erase_Sector+0x3e>
     tmp_psize = FLASH_PSIZE_BYTE;
 800199c:	2000      	movs	r0, #0
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <FLASH_Erase_Sector+0x78>)
 80019a0:	6919      	ldr	r1, [r3, #16]
 80019a2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80019a6:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 80019a8:	691a      	ldr	r2, [r3, #16]
 80019aa:	4302      	orrs	r2, r0
 80019ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80019b4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80019b6:	6918      	ldr	r0, [r3, #16]
 80019b8:	ea40 00c4 	orr.w	r0, r0, r4, lsl #3
 80019bc:	f040 0002 	orr.w	r0, r0, #2
 80019c0:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80019c2:	691a      	ldr	r2, [r3, #16]
 80019c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019c8:	611a      	str	r2, [r3, #16]
}
 80019ca:	bd38      	pop	{r3, r4, r5, pc}
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80019cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019d0:	e7e5      	b.n	800199e <FLASH_Erase_Sector+0x3e>
 80019d2:	bf00      	nop
 80019d4:	080050a8 	.word	0x080050a8
 80019d8:	40023c00 	.word	0x40023c00

080019dc <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80019dc:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <FLASH_FlushCaches+0x5c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f413 7f00 	tst.w	r3, #512	; 0x200
 80019e4:	d010      	beq.n	8001a08 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <FLASH_FlushCaches+0x5c>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019ee:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019fe:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a06:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <FLASH_FlushCaches+0x5c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001a10:	d010      	beq.n	8001a34 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <FLASH_FlushCaches+0x5c>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a1a:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a2a:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a32:	601a      	str	r2, [r3, #0]
  }
}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40023c00 	.word	0x40023c00

08001a3c <HAL_FLASHEx_Erase>:
{
 8001a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8001a3e:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <HAL_FLASHEx_Erase+0xb4>)
 8001a40:	7e1b      	ldrb	r3, [r3, #24]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d052      	beq.n	8001aec <HAL_FLASHEx_Erase+0xb0>
 8001a46:	460e      	mov	r6, r1
 8001a48:	4604      	mov	r4, r0
 8001a4a:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <HAL_FLASHEx_Erase+0xb4>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	761a      	strb	r2, [r3, #24]
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 8001a50:	6803      	ldr	r3, [r0, #0]
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d829      	bhi.n	8001aaa <HAL_FLASHEx_Erase+0x6e>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a56:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a5a:	f7ff fedf 	bl	800181c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001a5e:	4607      	mov	r7, r0
 8001a60:	2800      	cmp	r0, #0
 8001a62:	d13e      	bne.n	8001ae2 <HAL_FLASHEx_Erase+0xa6>
    *SectorError = 0xFFFFFFFFU;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a68:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001a6a:	6823      	ldr	r3, [r4, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d021      	beq.n	8001ab4 <HAL_FLASHEx_Erase+0x78>
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 8001a70:	68e3      	ldr	r3, [r4, #12]
 8001a72:	68a2      	ldr	r2, [r4, #8]
 8001a74:	4413      	add	r3, r2
 8001a76:	3b01      	subs	r3, #1
 8001a78:	2b07      	cmp	r3, #7
 8001a7a:	d82a      	bhi.n	8001ad2 <HAL_FLASHEx_Erase+0x96>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001a7c:	68a5      	ldr	r5, [r4, #8]
 8001a7e:	68e3      	ldr	r3, [r4, #12]
 8001a80:	68a2      	ldr	r2, [r4, #8]
 8001a82:	4413      	add	r3, r2
 8001a84:	42ab      	cmp	r3, r5
 8001a86:	d92a      	bls.n	8001ade <HAL_FLASHEx_Erase+0xa2>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001a88:	7c21      	ldrb	r1, [r4, #16]
 8001a8a:	4628      	mov	r0, r5
 8001a8c:	f7ff ff68 	bl	8001960 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a94:	f7ff fec2 	bl	800181c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001a98:	4a16      	ldr	r2, [pc, #88]	; (8001af4 <HAL_FLASHEx_Erase+0xb8>)
 8001a9a:	6913      	ldr	r3, [r2, #16]
 8001a9c:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001aa0:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 8001aa2:	4607      	mov	r7, r0
 8001aa4:	b9d0      	cbnz	r0, 8001adc <HAL_FLASHEx_Erase+0xa0>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001aa6:	3501      	adds	r5, #1
 8001aa8:	e7e9      	b.n	8001a7e <HAL_FLASHEx_Erase+0x42>
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 8001aaa:	21ab      	movs	r1, #171	; 0xab
 8001aac:	4812      	ldr	r0, [pc, #72]	; (8001af8 <HAL_FLASHEx_Erase+0xbc>)
 8001aae:	f001 fbfc 	bl	80032aa <assert_failed>
 8001ab2:	e7d0      	b.n	8001a56 <HAL_FLASHEx_Erase+0x1a>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001ab4:	6861      	ldr	r1, [r4, #4]
 8001ab6:	7c20      	ldrb	r0, [r4, #16]
 8001ab8:	f7ff ff2c 	bl	8001914 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001abc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ac0:	f7ff feac 	bl	800181c <FLASH_WaitForLastOperation>
 8001ac4:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <HAL_FLASHEx_Erase+0xb8>)
 8001ac8:	6913      	ldr	r3, [r2, #16]
 8001aca:	f023 0304 	bic.w	r3, r3, #4
 8001ace:	6113      	str	r3, [r2, #16]
 8001ad0:	e005      	b.n	8001ade <HAL_FLASHEx_Erase+0xa2>
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 8001ad2:	21c3      	movs	r1, #195	; 0xc3
 8001ad4:	4808      	ldr	r0, [pc, #32]	; (8001af8 <HAL_FLASHEx_Erase+0xbc>)
 8001ad6:	f001 fbe8 	bl	80032aa <assert_failed>
 8001ada:	e7cf      	b.n	8001a7c <HAL_FLASHEx_Erase+0x40>
          *SectorError = index;
 8001adc:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();    
 8001ade:	f7ff ff7d 	bl	80019dc <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8001ae2:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <HAL_FLASHEx_Erase+0xb4>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	4638      	mov	r0, r7
 8001aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8001aec:	2702      	movs	r7, #2
 8001aee:	e7fb      	b.n	8001ae8 <HAL_FLASHEx_Erase+0xac>
 8001af0:	2000030c 	.word	0x2000030c
 8001af4:	40023c00 	.word	0x40023c00
 8001af8:	080050a8 	.word	0x080050a8

08001afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	4680      	mov	r8, r0
 8001b04:	460e      	mov	r6, r1
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001b06:	4ba4      	ldr	r3, [pc, #656]	; (8001d98 <HAL_GPIO_Init+0x29c>)
 8001b08:	4298      	cmp	r0, r3
 8001b0a:	d017      	beq.n	8001b3c <HAL_GPIO_Init+0x40>
 8001b0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b10:	4298      	cmp	r0, r3
 8001b12:	d013      	beq.n	8001b3c <HAL_GPIO_Init+0x40>
 8001b14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b18:	4298      	cmp	r0, r3
 8001b1a:	d00f      	beq.n	8001b3c <HAL_GPIO_Init+0x40>
 8001b1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b20:	4298      	cmp	r0, r3
 8001b22:	d00b      	beq.n	8001b3c <HAL_GPIO_Init+0x40>
 8001b24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b28:	4298      	cmp	r0, r3
 8001b2a:	d007      	beq.n	8001b3c <HAL_GPIO_Init+0x40>
 8001b2c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001b30:	4298      	cmp	r0, r3
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x40>
 8001b34:	21b3      	movs	r1, #179	; 0xb3
 8001b36:	4899      	ldr	r0, [pc, #612]	; (8001d9c <HAL_GPIO_Init+0x2a0>)
 8001b38:	f001 fbb7 	bl	80032aa <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001b3c:	6833      	ldr	r3, [r6, #0]
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	b112      	cbz	r2, 8001b48 <HAL_GPIO_Init+0x4c>
 8001b42:	0c1b      	lsrs	r3, r3, #16
 8001b44:	041b      	lsls	r3, r3, #16
 8001b46:	b11b      	cbz	r3, 8001b50 <HAL_GPIO_Init+0x54>
 8001b48:	21b4      	movs	r1, #180	; 0xb4
 8001b4a:	4894      	ldr	r0, [pc, #592]	; (8001d9c <HAL_GPIO_Init+0x2a0>)
 8001b4c:	f001 fbad 	bl	80032aa <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001b50:	6873      	ldr	r3, [r6, #4]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d91e      	bls.n	8001b94 <HAL_GPIO_Init+0x98>
 8001b56:	2b11      	cmp	r3, #17
 8001b58:	d01c      	beq.n	8001b94 <HAL_GPIO_Init+0x98>
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d01a      	beq.n	8001b94 <HAL_GPIO_Init+0x98>
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d018      	beq.n	8001b94 <HAL_GPIO_Init+0x98>
 8001b62:	4a8f      	ldr	r2, [pc, #572]	; (8001da0 <HAL_GPIO_Init+0x2a4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d015      	beq.n	8001b94 <HAL_GPIO_Init+0x98>
 8001b68:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d011      	beq.n	8001b94 <HAL_GPIO_Init+0x98>
 8001b70:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d00d      	beq.n	8001b94 <HAL_GPIO_Init+0x98>
 8001b78:	f5a2 12f8 	sub.w	r2, r2, #2031616	; 0x1f0000
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d009      	beq.n	8001b94 <HAL_GPIO_Init+0x98>
 8001b80:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d005      	beq.n	8001b94 <HAL_GPIO_Init+0x98>
 8001b88:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d001      	beq.n	8001b94 <HAL_GPIO_Init+0x98>
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d104      	bne.n	8001b9e <HAL_GPIO_Init+0xa2>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001b94:	68b3      	ldr	r3, [r6, #8]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d806      	bhi.n	8001ba8 <HAL_GPIO_Init+0xac>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b9a:	2400      	movs	r4, #0
 8001b9c:	e045      	b.n	8001c2a <HAL_GPIO_Init+0x12e>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001b9e:	21b5      	movs	r1, #181	; 0xb5
 8001ba0:	487e      	ldr	r0, [pc, #504]	; (8001d9c <HAL_GPIO_Init+0x2a0>)
 8001ba2:	f001 fb82 	bl	80032aa <assert_failed>
 8001ba6:	e7f5      	b.n	8001b94 <HAL_GPIO_Init+0x98>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001ba8:	21b6      	movs	r1, #182	; 0xb6
 8001baa:	487c      	ldr	r0, [pc, #496]	; (8001d9c <HAL_GPIO_Init+0x2a0>)
 8001bac:	f001 fb7d 	bl	80032aa <assert_failed>
 8001bb0:	e7f3      	b.n	8001b9a <HAL_GPIO_Init+0x9e>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001bb2:	21da      	movs	r1, #218	; 0xda
 8001bb4:	4879      	ldr	r0, [pc, #484]	; (8001d9c <HAL_GPIO_Init+0x2a0>)
 8001bb6:	f001 fb78 	bl	80032aa <assert_failed>
 8001bba:	e090      	b.n	8001cde <HAL_GPIO_Init+0x1e2>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	e000      	b.n	8001bc2 <HAL_GPIO_Init+0xc6>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	408b      	lsls	r3, r1
 8001bc4:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc6:	3202      	adds	r2, #2
 8001bc8:	4976      	ldr	r1, [pc, #472]	; (8001da4 <HAL_GPIO_Init+0x2a8>)
 8001bca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bce:	4b76      	ldr	r3, [pc, #472]	; (8001da8 <HAL_GPIO_Init+0x2ac>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8001bd2:	43fb      	mvns	r3, r7
 8001bd4:	ea03 0102 	and.w	r1, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd8:	6870      	ldr	r0, [r6, #4]
 8001bda:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8001bde:	d001      	beq.n	8001be4 <HAL_GPIO_Init+0xe8>
        {
          temp |= iocurrent;
 8001be0:	ea47 0102 	orr.w	r1, r7, r2
        }
        EXTI->IMR = temp;
 8001be4:	4a70      	ldr	r2, [pc, #448]	; (8001da8 <HAL_GPIO_Init+0x2ac>)
 8001be6:	6011      	str	r1, [r2, #0]

        temp = EXTI->EMR;
 8001be8:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001bea:	ea03 0102 	and.w	r1, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bee:	6870      	ldr	r0, [r6, #4]
 8001bf0:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8001bf4:	d001      	beq.n	8001bfa <HAL_GPIO_Init+0xfe>
        {
          temp |= iocurrent;
 8001bf6:	ea47 0102 	orr.w	r1, r7, r2
        }
        EXTI->EMR = temp;
 8001bfa:	4a6b      	ldr	r2, [pc, #428]	; (8001da8 <HAL_GPIO_Init+0x2ac>)
 8001bfc:	6051      	str	r1, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfe:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	ea03 0102 	and.w	r1, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c04:	6870      	ldr	r0, [r6, #4]
 8001c06:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8001c0a:	d001      	beq.n	8001c10 <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 8001c0c:	ea47 0102 	orr.w	r1, r7, r2
        }
        EXTI->RTSR = temp;
 8001c10:	4a65      	ldr	r2, [pc, #404]	; (8001da8 <HAL_GPIO_Init+0x2ac>)
 8001c12:	6091      	str	r1, [r2, #8]

        temp = EXTI->FTSR;
 8001c14:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c18:	6871      	ldr	r1, [r6, #4]
 8001c1a:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8001c1e:	d001      	beq.n	8001c24 <HAL_GPIO_Init+0x128>
        {
          temp |= iocurrent;
 8001c20:	ea47 0302 	orr.w	r3, r7, r2
        }
        EXTI->FTSR = temp;
 8001c24:	4a60      	ldr	r2, [pc, #384]	; (8001da8 <HAL_GPIO_Init+0x2ac>)
 8001c26:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c28:	3401      	adds	r4, #1
 8001c2a:	2c0f      	cmp	r4, #15
 8001c2c:	f200 80b0 	bhi.w	8001d90 <HAL_GPIO_Init+0x294>
    ioposition = 0x01U << position;
 8001c30:	2501      	movs	r5, #1
 8001c32:	40a5      	lsls	r5, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c34:	6837      	ldr	r7, [r6, #0]
 8001c36:	402f      	ands	r7, r5
    if(iocurrent == ioposition)
 8001c38:	42bd      	cmp	r5, r7
 8001c3a:	d1f5      	bne.n	8001c28 <HAL_GPIO_Init+0x12c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c3c:	6873      	ldr	r3, [r6, #4]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d001      	beq.n	8001c46 <HAL_GPIO_Init+0x14a>
 8001c42:	2b12      	cmp	r3, #18
 8001c44:	d12b      	bne.n	8001c9e <HAL_GPIO_Init+0x1a2>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001c46:	6933      	ldr	r3, [r6, #16]
 8001c48:	b1cb      	cbz	r3, 8001c7e <HAL_GPIO_Init+0x182>
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d017      	beq.n	8001c7e <HAL_GPIO_Init+0x182>
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d015      	beq.n	8001c7e <HAL_GPIO_Init+0x182>
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d013      	beq.n	8001c7e <HAL_GPIO_Init+0x182>
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d011      	beq.n	8001c7e <HAL_GPIO_Init+0x182>
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	d00f      	beq.n	8001c7e <HAL_GPIO_Init+0x182>
 8001c5e:	2b06      	cmp	r3, #6
 8001c60:	d00d      	beq.n	8001c7e <HAL_GPIO_Init+0x182>
 8001c62:	2b07      	cmp	r3, #7
 8001c64:	d00b      	beq.n	8001c7e <HAL_GPIO_Init+0x182>
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d009      	beq.n	8001c7e <HAL_GPIO_Init+0x182>
 8001c6a:	2b0a      	cmp	r3, #10
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x182>
 8001c6e:	2b09      	cmp	r3, #9
 8001c70:	d005      	beq.n	8001c7e <HAL_GPIO_Init+0x182>
 8001c72:	2b0f      	cmp	r3, #15
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x182>
 8001c76:	21c7      	movs	r1, #199	; 0xc7
 8001c78:	4848      	ldr	r0, [pc, #288]	; (8001d9c <HAL_GPIO_Init+0x2a0>)
 8001c7a:	f001 fb16 	bl	80032aa <assert_failed>
        temp = GPIOx->AFR[position >> 3U];
 8001c7e:	08e2      	lsrs	r2, r4, #3
 8001c80:	3208      	adds	r2, #8
 8001c82:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c86:	f004 0307 	and.w	r3, r4, #7
 8001c8a:	0099      	lsls	r1, r3, #2
 8001c8c:	230f      	movs	r3, #15
 8001c8e:	408b      	lsls	r3, r1
 8001c90:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c94:	6933      	ldr	r3, [r6, #16]
 8001c96:	408b      	lsls	r3, r1
 8001c98:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3U] = temp;
 8001c9a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
      temp = GPIOx->MODER;
 8001c9e:	f8d8 2000 	ldr.w	r2, [r8]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ca2:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8001ca6:	f04f 0903 	mov.w	r9, #3
 8001caa:	fa09 f90a 	lsl.w	r9, r9, sl
 8001cae:	ea6f 0909 	mvn.w	r9, r9
 8001cb2:	ea09 0202 	and.w	r2, r9, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb6:	6873      	ldr	r3, [r6, #4]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	fa03 f30a 	lsl.w	r3, r3, sl
 8001cc0:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 8001cc2:	f8c8 3000 	str.w	r3, [r8]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cc6:	6873      	ldr	r3, [r6, #4]
 8001cc8:	1e5a      	subs	r2, r3, #1
 8001cca:	2a01      	cmp	r2, #1
 8001ccc:	d903      	bls.n	8001cd6 <HAL_GPIO_Init+0x1da>
 8001cce:	2b11      	cmp	r3, #17
 8001cd0:	d001      	beq.n	8001cd6 <HAL_GPIO_Init+0x1da>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd2:	2b12      	cmp	r3, #18
 8001cd4:	d118      	bne.n	8001d08 <HAL_GPIO_Init+0x20c>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001cd6:	68f3      	ldr	r3, [r6, #12]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	f63f af6a 	bhi.w	8001bb2 <HAL_GPIO_Init+0xb6>
        temp = GPIOx->OSPEEDR; 
 8001cde:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ce2:	ea09 0202 	and.w	r2, r9, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce6:	68f3      	ldr	r3, [r6, #12]
 8001ce8:	fa03 f30a 	lsl.w	r3, r3, sl
 8001cec:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8001cee:	f8c8 3008 	str.w	r3, [r8, #8]
        temp = GPIOx->OTYPER;
 8001cf2:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf6:	ea22 0205 	bic.w	r2, r2, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cfa:	6873      	ldr	r3, [r6, #4]
 8001cfc:	f3c3 1500 	ubfx	r5, r3, #4, #1
 8001d00:	40a5      	lsls	r5, r4
 8001d02:	4315      	orrs	r5, r2
        GPIOx->OTYPER = temp;
 8001d04:	f8c8 5004 	str.w	r5, [r8, #4]
      temp = GPIOx->PUPDR;
 8001d08:	f8d8 300c 	ldr.w	r3, [r8, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d0c:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d10:	68b3      	ldr	r3, [r6, #8]
 8001d12:	fa03 f30a 	lsl.w	r3, r3, sl
 8001d16:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8001d1a:	f8c8 300c 	str.w	r3, [r8, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d1e:	6873      	ldr	r3, [r6, #4]
 8001d20:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001d24:	d080      	beq.n	8001c28 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	9301      	str	r3, [sp, #4]
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_GPIO_Init+0x2b0>)
 8001d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d32:	645a      	str	r2, [r3, #68]	; 0x44
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3e:	08a2      	lsrs	r2, r4, #2
 8001d40:	1c91      	adds	r1, r2, #2
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <HAL_GPIO_Init+0x2a8>)
 8001d44:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d48:	f004 0303 	and.w	r3, r4, #3
 8001d4c:	0099      	lsls	r1, r3, #2
 8001d4e:	230f      	movs	r3, #15
 8001d50:	408b      	lsls	r3, r1
 8001d52:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_GPIO_Init+0x29c>)
 8001d58:	4598      	cmp	r8, r3
 8001d5a:	f43f af31 	beq.w	8001bc0 <HAL_GPIO_Init+0xc4>
 8001d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d62:	4598      	cmp	r8, r3
 8001d64:	d00e      	beq.n	8001d84 <HAL_GPIO_Init+0x288>
 8001d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d6a:	4598      	cmp	r8, r3
 8001d6c:	d00c      	beq.n	8001d88 <HAL_GPIO_Init+0x28c>
 8001d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d72:	4598      	cmp	r8, r3
 8001d74:	d00a      	beq.n	8001d8c <HAL_GPIO_Init+0x290>
 8001d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d7a:	4598      	cmp	r8, r3
 8001d7c:	f43f af1e 	beq.w	8001bbc <HAL_GPIO_Init+0xc0>
 8001d80:	2307      	movs	r3, #7
 8001d82:	e71e      	b.n	8001bc2 <HAL_GPIO_Init+0xc6>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e71c      	b.n	8001bc2 <HAL_GPIO_Init+0xc6>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e71a      	b.n	8001bc2 <HAL_GPIO_Init+0xc6>
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e718      	b.n	8001bc2 <HAL_GPIO_Init+0xc6>
      }
    }
  }
}
 8001d90:	b002      	add	sp, #8
 8001d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d96:	bf00      	nop
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	080050e8 	.word	0x080050e8
 8001da0:	10110000 	.word	0x10110000
 8001da4:	40013800 	.word	0x40013800
 8001da8:	40013c00 	.word	0x40013c00
 8001dac:	40023800 	.word	0x40023800

08001db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db0:	b570      	push	{r4, r5, r6, lr}
 8001db2:	4606      	mov	r6, r0
 8001db4:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001db6:	460c      	mov	r4, r1
 8001db8:	b129      	cbz	r1, 8001dc6 <HAL_GPIO_WritePin+0x16>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001dba:	2d01      	cmp	r5, #1
 8001dbc:	d809      	bhi.n	8001dd2 <HAL_GPIO_WritePin+0x22>

  if(PinState != GPIO_PIN_RESET)
 8001dbe:	b975      	cbnz	r5, 8001dde <HAL_GPIO_WritePin+0x2e>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dc0:	0424      	lsls	r4, r4, #16
 8001dc2:	61b4      	str	r4, [r6, #24]
  }
}
 8001dc4:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001dc6:	f240 119f 	movw	r1, #415	; 0x19f
 8001dca:	4806      	ldr	r0, [pc, #24]	; (8001de4 <HAL_GPIO_WritePin+0x34>)
 8001dcc:	f001 fa6d 	bl	80032aa <assert_failed>
 8001dd0:	e7f3      	b.n	8001dba <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001dd2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001dd6:	4803      	ldr	r0, [pc, #12]	; (8001de4 <HAL_GPIO_WritePin+0x34>)
 8001dd8:	f001 fa67 	bl	80032aa <assert_failed>
 8001ddc:	e7ef      	b.n	8001dbe <HAL_GPIO_WritePin+0xe>
    GPIOx->BSRR = GPIO_Pin;
 8001dde:	61b4      	str	r4, [r6, #24]
 8001de0:	e7f0      	b.n	8001dc4 <HAL_GPIO_WritePin+0x14>
 8001de2:	bf00      	nop
 8001de4:	080050e8 	.word	0x080050e8

08001de8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001de8:	2800      	cmp	r0, #0
 8001dea:	f000 823c 	beq.w	8002266 <HAL_RCC_OscConfig+0x47e>
{
 8001dee:	b570      	push	{r4, r5, r6, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001df4:	6803      	ldr	r3, [r0, #0]
 8001df6:	2b0f      	cmp	r3, #15
 8001df8:	d839      	bhi.n	8001e6e <HAL_RCC_OscConfig+0x86>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	f013 0f01 	tst.w	r3, #1
 8001e00:	d04d      	beq.n	8001e9e <HAL_RCC_OscConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001e02:	6863      	ldr	r3, [r4, #4]
 8001e04:	b12b      	cbz	r3, 8001e12 <HAL_RCC_OscConfig+0x2a>
 8001e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0a:	d002      	beq.n	8001e12 <HAL_RCC_OscConfig+0x2a>
 8001e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e10:	d132      	bne.n	8001e78 <HAL_RCC_OscConfig+0x90>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e12:	4ba5      	ldr	r3, [pc, #660]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d036      	beq.n	8001e8c <HAL_RCC_OscConfig+0xa4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e1e:	4ba2      	ldr	r3, [pc, #648]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d02b      	beq.n	8001e82 <HAL_RCC_OscConfig+0x9a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2a:	6863      	ldr	r3, [r4, #4]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e30:	d05f      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x10a>
 8001e32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e36:	d062      	beq.n	8001efe <HAL_RCC_OscConfig+0x116>
 8001e38:	4b9b      	ldr	r3, [pc, #620]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e48:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e4a:	6863      	ldr	r3, [r4, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d060      	beq.n	8001f12 <HAL_RCC_OscConfig+0x12a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7ff f842 	bl	8000ed8 <HAL_GetTick>
 8001e54:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	4b94      	ldr	r3, [pc, #592]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e5e:	d11e      	bne.n	8001e9e <HAL_RCC_OscConfig+0xb6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e60:	f7ff f83a 	bl	8000ed8 <HAL_GetTick>
 8001e64:	1b40      	subs	r0, r0, r5
 8001e66:	2864      	cmp	r0, #100	; 0x64
 8001e68:	d9f5      	bls.n	8001e56 <HAL_RCC_OscConfig+0x6e>
          {
            return HAL_TIMEOUT;
 8001e6a:	2003      	movs	r0, #3
 8001e6c:	e200      	b.n	8002270 <HAL_RCC_OscConfig+0x488>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001e6e:	21e8      	movs	r1, #232	; 0xe8
 8001e70:	488e      	ldr	r0, [pc, #568]	; (80020ac <HAL_RCC_OscConfig+0x2c4>)
 8001e72:	f001 fa1a 	bl	80032aa <assert_failed>
 8001e76:	e7c0      	b.n	8001dfa <HAL_RCC_OscConfig+0x12>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001e78:	21ed      	movs	r1, #237	; 0xed
 8001e7a:	488c      	ldr	r0, [pc, #560]	; (80020ac <HAL_RCC_OscConfig+0x2c4>)
 8001e7c:	f001 fa15 	bl	80032aa <assert_failed>
 8001e80:	e7c7      	b.n	8001e12 <HAL_RCC_OscConfig+0x2a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e82:	4b89      	ldr	r3, [pc, #548]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001e8a:	d0ce      	beq.n	8001e2a <HAL_RCC_OscConfig+0x42>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8c:	4b86      	ldr	r3, [pc, #536]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e94:	d003      	beq.n	8001e9e <HAL_RCC_OscConfig+0xb6>
 8001e96:	6863      	ldr	r3, [r4, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 81e6 	beq.w	800226a <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9e:	6823      	ldr	r3, [r4, #0]
 8001ea0:	f013 0f02 	tst.w	r3, #2
 8001ea4:	d067      	beq.n	8001f76 <HAL_RCC_OscConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001ea6:	68e3      	ldr	r3, [r4, #12]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d841      	bhi.n	8001f30 <HAL_RCC_OscConfig+0x148>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001eac:	6923      	ldr	r3, [r4, #16]
 8001eae:	2b1f      	cmp	r3, #31
 8001eb0:	d844      	bhi.n	8001f3c <HAL_RCC_OscConfig+0x154>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eb2:	4b7d      	ldr	r3, [pc, #500]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f013 0f0c 	tst.w	r3, #12
 8001eba:	d04a      	beq.n	8001f52 <HAL_RCC_OscConfig+0x16a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ebc:	4b7a      	ldr	r3, [pc, #488]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d03f      	beq.n	8001f48 <HAL_RCC_OscConfig+0x160>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ec8:	68e3      	ldr	r3, [r4, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d077      	beq.n	8001fbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ece:	4b78      	ldr	r3, [pc, #480]	; (80020b0 <HAL_RCC_OscConfig+0x2c8>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f800 	bl	8000ed8 <HAL_GetTick>
 8001ed8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eda:	4b73      	ldr	r3, [pc, #460]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f013 0f02 	tst.w	r3, #2
 8001ee2:	d163      	bne.n	8001fac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee4:	f7fe fff8 	bl	8000ed8 <HAL_GetTick>
 8001ee8:	1b40      	subs	r0, r0, r5
 8001eea:	2802      	cmp	r0, #2
 8001eec:	d9f5      	bls.n	8001eda <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001eee:	2003      	movs	r0, #3
 8001ef0:	e1be      	b.n	8002270 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef2:	4a6d      	ldr	r2, [pc, #436]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001ef4:	6813      	ldr	r3, [r2, #0]
 8001ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	e7a5      	b.n	8001e4a <HAL_RCC_OscConfig+0x62>
 8001efe:	4b6a      	ldr	r3, [pc, #424]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	e79b      	b.n	8001e4a <HAL_RCC_OscConfig+0x62>
        tickstart = HAL_GetTick();
 8001f12:	f7fe ffe1 	bl	8000ed8 <HAL_GetTick>
 8001f16:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f18:	4b63      	ldr	r3, [pc, #396]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f20:	d0bd      	beq.n	8001e9e <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f22:	f7fe ffd9 	bl	8000ed8 <HAL_GetTick>
 8001f26:	1b40      	subs	r0, r0, r5
 8001f28:	2864      	cmp	r0, #100	; 0x64
 8001f2a:	d9f5      	bls.n	8001f18 <HAL_RCC_OscConfig+0x130>
            return HAL_TIMEOUT;
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	e19f      	b.n	8002270 <HAL_RCC_OscConfig+0x488>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001f30:	f240 111f 	movw	r1, #287	; 0x11f
 8001f34:	485d      	ldr	r0, [pc, #372]	; (80020ac <HAL_RCC_OscConfig+0x2c4>)
 8001f36:	f001 f9b8 	bl	80032aa <assert_failed>
 8001f3a:	e7b7      	b.n	8001eac <HAL_RCC_OscConfig+0xc4>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001f3c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001f40:	485a      	ldr	r0, [pc, #360]	; (80020ac <HAL_RCC_OscConfig+0x2c4>)
 8001f42:	f001 f9b2 	bl	80032aa <assert_failed>
 8001f46:	e7b4      	b.n	8001eb2 <HAL_RCC_OscConfig+0xca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f48:	4b57      	ldr	r3, [pc, #348]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001f50:	d1ba      	bne.n	8001ec8 <HAL_RCC_OscConfig+0xe0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f52:	4b55      	ldr	r3, [pc, #340]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f013 0f02 	tst.w	r3, #2
 8001f5a:	d004      	beq.n	8001f66 <HAL_RCC_OscConfig+0x17e>
 8001f5c:	68e3      	ldr	r3, [r4, #12]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d001      	beq.n	8001f66 <HAL_RCC_OscConfig+0x17e>
        return HAL_ERROR;
 8001f62:	2001      	movs	r0, #1
 8001f64:	e184      	b.n	8002270 <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f66:	4a50      	ldr	r2, [pc, #320]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001f68:	6813      	ldr	r3, [r2, #0]
 8001f6a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f6e:	6921      	ldr	r1, [r4, #16]
 8001f70:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f74:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	f013 0f08 	tst.w	r3, #8
 8001f7c:	d049      	beq.n	8002012 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001f7e:	6963      	ldr	r3, [r4, #20]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d82e      	bhi.n	8001fe2 <HAL_RCC_OscConfig+0x1fa>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f84:	6963      	ldr	r3, [r4, #20]
 8001f86:	b393      	cbz	r3, 8001fee <HAL_RCC_OscConfig+0x206>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f88:	4b4a      	ldr	r3, [pc, #296]	; (80020b4 <HAL_RCC_OscConfig+0x2cc>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8e:	f7fe ffa3 	bl	8000ed8 <HAL_GetTick>
 8001f92:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f94:	4b44      	ldr	r3, [pc, #272]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f98:	f013 0f02 	tst.w	r3, #2
 8001f9c:	d139      	bne.n	8002012 <HAL_RCC_OscConfig+0x22a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f9e:	f7fe ff9b 	bl	8000ed8 <HAL_GetTick>
 8001fa2:	1b40      	subs	r0, r0, r5
 8001fa4:	2802      	cmp	r0, #2
 8001fa6:	d9f5      	bls.n	8001f94 <HAL_RCC_OscConfig+0x1ac>
        {
          return HAL_TIMEOUT;
 8001fa8:	2003      	movs	r0, #3
 8001faa:	e161      	b.n	8002270 <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4a3e      	ldr	r2, [pc, #248]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001fae:	6813      	ldr	r3, [r2, #0]
 8001fb0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001fb4:	6921      	ldr	r1, [r4, #16]
 8001fb6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	e7db      	b.n	8001f76 <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_DISABLE();
 8001fbe:	4b3c      	ldr	r3, [pc, #240]	; (80020b0 <HAL_RCC_OscConfig+0x2c8>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fc4:	f7fe ff88 	bl	8000ed8 <HAL_GetTick>
 8001fc8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f013 0f02 	tst.w	r3, #2
 8001fd2:	d0d0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x18e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd4:	f7fe ff80 	bl	8000ed8 <HAL_GetTick>
 8001fd8:	1b40      	subs	r0, r0, r5
 8001fda:	2802      	cmp	r0, #2
 8001fdc:	d9f5      	bls.n	8001fca <HAL_RCC_OscConfig+0x1e2>
            return HAL_TIMEOUT;
 8001fde:	2003      	movs	r0, #3
 8001fe0:	e146      	b.n	8002270 <HAL_RCC_OscConfig+0x488>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001fe2:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001fe6:	4831      	ldr	r0, [pc, #196]	; (80020ac <HAL_RCC_OscConfig+0x2c4>)
 8001fe8:	f001 f95f 	bl	80032aa <assert_failed>
 8001fec:	e7ca      	b.n	8001f84 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fee:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <HAL_RCC_OscConfig+0x2cc>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff4:	f7fe ff70 	bl	8000ed8 <HAL_GetTick>
 8001ff8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffa:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8001ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ffe:	f013 0f02 	tst.w	r3, #2
 8002002:	d006      	beq.n	8002012 <HAL_RCC_OscConfig+0x22a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002004:	f7fe ff68 	bl	8000ed8 <HAL_GetTick>
 8002008:	1b40      	subs	r0, r0, r5
 800200a:	2802      	cmp	r0, #2
 800200c:	d9f5      	bls.n	8001ffa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800200e:	2003      	movs	r0, #3
 8002010:	e12e      	b.n	8002270 <HAL_RCC_OscConfig+0x488>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002012:	6823      	ldr	r3, [r4, #0]
 8002014:	f013 0f04 	tst.w	r3, #4
 8002018:	f000 8087 	beq.w	800212a <HAL_RCC_OscConfig+0x342>
  {
    FlagStatus       pwrclkchanged = RESET;

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800201c:	68a3      	ldr	r3, [r4, #8]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x23e>
 8002022:	2b05      	cmp	r3, #5
 8002024:	d138      	bne.n	8002098 <HAL_RCC_OscConfig+0x2b0>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800202e:	d139      	bne.n	80020a4 <HAL_RCC_OscConfig+0x2bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002030:	2300      	movs	r3, #0
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8002036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002038:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002048:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x2d0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002052:	d033      	beq.n	80020bc <HAL_RCC_OscConfig+0x2d4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002054:	68a3      	ldr	r3, [r4, #8]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d044      	beq.n	80020e4 <HAL_RCC_OscConfig+0x2fc>
 800205a:	2b05      	cmp	r3, #5
 800205c:	d048      	beq.n	80020f0 <HAL_RCC_OscConfig+0x308>
 800205e:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 8002060:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	671a      	str	r2, [r3, #112]	; 0x70
 8002068:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800206a:	f022 0204 	bic.w	r2, r2, #4
 800206e:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002070:	68a3      	ldr	r3, [r4, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d046      	beq.n	8002104 <HAL_RCC_OscConfig+0x31c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002076:	f7fe ff2f 	bl	8000ed8 <HAL_GetTick>
 800207a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_RCC_OscConfig+0x2c0>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002080:	f013 0f02 	tst.w	r3, #2
 8002084:	d14f      	bne.n	8002126 <HAL_RCC_OscConfig+0x33e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002086:	f7fe ff27 	bl	8000ed8 <HAL_GetTick>
 800208a:	1b80      	subs	r0, r0, r6
 800208c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002090:	4298      	cmp	r0, r3
 8002092:	d9f3      	bls.n	800207c <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8002094:	2003      	movs	r0, #3
 8002096:	e0eb      	b.n	8002270 <HAL_RCC_OscConfig+0x488>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002098:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800209c:	4803      	ldr	r0, [pc, #12]	; (80020ac <HAL_RCC_OscConfig+0x2c4>)
 800209e:	f001 f904 	bl	80032aa <assert_failed>
 80020a2:	e7c0      	b.n	8002026 <HAL_RCC_OscConfig+0x23e>
    FlagStatus       pwrclkchanged = RESET;
 80020a4:	2500      	movs	r5, #0
 80020a6:	e7d0      	b.n	800204a <HAL_RCC_OscConfig+0x262>
 80020a8:	40023800 	.word	0x40023800
 80020ac:	08005124 	.word	0x08005124
 80020b0:	42470000 	.word	0x42470000
 80020b4:	42470e80 	.word	0x42470e80
 80020b8:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020bc:	4a6e      	ldr	r2, [pc, #440]	; (8002278 <HAL_RCC_OscConfig+0x490>)
 80020be:	6813      	ldr	r3, [r2, #0]
 80020c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80020c6:	f7fe ff07 	bl	8000ed8 <HAL_GetTick>
 80020ca:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <HAL_RCC_OscConfig+0x490>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80020d4:	d1be      	bne.n	8002054 <HAL_RCC_OscConfig+0x26c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d6:	f7fe feff 	bl	8000ed8 <HAL_GetTick>
 80020da:	1b80      	subs	r0, r0, r6
 80020dc:	2802      	cmp	r0, #2
 80020de:	d9f5      	bls.n	80020cc <HAL_RCC_OscConfig+0x2e4>
          return HAL_TIMEOUT;
 80020e0:	2003      	movs	r0, #3
 80020e2:	e0c5      	b.n	8002270 <HAL_RCC_OscConfig+0x488>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e4:	4a65      	ldr	r2, [pc, #404]	; (800227c <HAL_RCC_OscConfig+0x494>)
 80020e6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6713      	str	r3, [r2, #112]	; 0x70
 80020ee:	e7bf      	b.n	8002070 <HAL_RCC_OscConfig+0x288>
 80020f0:	4b62      	ldr	r3, [pc, #392]	; (800227c <HAL_RCC_OscConfig+0x494>)
 80020f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020f4:	f042 0204 	orr.w	r2, r2, #4
 80020f8:	671a      	str	r2, [r3, #112]	; 0x70
 80020fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	671a      	str	r2, [r3, #112]	; 0x70
 8002102:	e7b5      	b.n	8002070 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002104:	f7fe fee8 	bl	8000ed8 <HAL_GetTick>
 8002108:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210a:	4b5c      	ldr	r3, [pc, #368]	; (800227c <HAL_RCC_OscConfig+0x494>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210e:	f013 0f02 	tst.w	r3, #2
 8002112:	d008      	beq.n	8002126 <HAL_RCC_OscConfig+0x33e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002114:	f7fe fee0 	bl	8000ed8 <HAL_GetTick>
 8002118:	1b80      	subs	r0, r0, r6
 800211a:	f241 3388 	movw	r3, #5000	; 0x1388
 800211e:	4298      	cmp	r0, r3
 8002120:	d9f3      	bls.n	800210a <HAL_RCC_OscConfig+0x322>
        {
          return HAL_TIMEOUT;
 8002122:	2003      	movs	r0, #3
 8002124:	e0a4      	b.n	8002270 <HAL_RCC_OscConfig+0x488>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002126:	2d00      	cmp	r5, #0
 8002128:	d13b      	bne.n	80021a2 <HAL_RCC_OscConfig+0x3ba>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800212a:	69a3      	ldr	r3, [r4, #24]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d83e      	bhi.n	80021ae <HAL_RCC_OscConfig+0x3c6>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002130:	69a3      	ldr	r3, [r4, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 809b 	beq.w	800226e <HAL_RCC_OscConfig+0x486>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002138:	4a50      	ldr	r2, [pc, #320]	; (800227c <HAL_RCC_OscConfig+0x494>)
 800213a:	6892      	ldr	r2, [r2, #8]
 800213c:	f002 020c 	and.w	r2, r2, #12
 8002140:	2a08      	cmp	r2, #8
 8002142:	f000 8097 	beq.w	8002274 <HAL_RCC_OscConfig+0x48c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002146:	2b02      	cmp	r3, #2
 8002148:	d179      	bne.n	800223e <HAL_RCC_OscConfig+0x456>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800214a:	69e3      	ldr	r3, [r4, #28]
 800214c:	b113      	cbz	r3, 8002154 <HAL_RCC_OscConfig+0x36c>
 800214e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002152:	d132      	bne.n	80021ba <HAL_RCC_OscConfig+0x3d2>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002154:	6a23      	ldr	r3, [r4, #32]
 8002156:	2b3f      	cmp	r3, #63	; 0x3f
 8002158:	d835      	bhi.n	80021c6 <HAL_RCC_OscConfig+0x3de>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800215a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800215c:	3b32      	subs	r3, #50	; 0x32
 800215e:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8002162:	d836      	bhi.n	80021d2 <HAL_RCC_OscConfig+0x3ea>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002164:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002166:	2b02      	cmp	r3, #2
 8002168:	d005      	beq.n	8002176 <HAL_RCC_OscConfig+0x38e>
 800216a:	2b04      	cmp	r3, #4
 800216c:	d003      	beq.n	8002176 <HAL_RCC_OscConfig+0x38e>
 800216e:	2b06      	cmp	r3, #6
 8002170:	d001      	beq.n	8002176 <HAL_RCC_OscConfig+0x38e>
 8002172:	2b08      	cmp	r3, #8
 8002174:	d133      	bne.n	80021de <HAL_RCC_OscConfig+0x3f6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002176:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002178:	3b02      	subs	r3, #2
 800217a:	2b0d      	cmp	r3, #13
 800217c:	d835      	bhi.n	80021ea <HAL_RCC_OscConfig+0x402>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b40      	ldr	r3, [pc, #256]	; (8002280 <HAL_RCC_OscConfig+0x498>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7fe fea8 	bl	8000ed8 <HAL_GetTick>
 8002188:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218a:	4b3c      	ldr	r3, [pc, #240]	; (800227c <HAL_RCC_OscConfig+0x494>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002192:	d030      	beq.n	80021f6 <HAL_RCC_OscConfig+0x40e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002194:	f7fe fea0 	bl	8000ed8 <HAL_GetTick>
 8002198:	1b40      	subs	r0, r0, r5
 800219a:	2802      	cmp	r0, #2
 800219c:	d9f5      	bls.n	800218a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800219e:	2003      	movs	r0, #3
 80021a0:	e066      	b.n	8002270 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a2:	4a36      	ldr	r2, [pc, #216]	; (800227c <HAL_RCC_OscConfig+0x494>)
 80021a4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80021a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021aa:	6413      	str	r3, [r2, #64]	; 0x40
 80021ac:	e7bd      	b.n	800212a <HAL_RCC_OscConfig+0x342>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80021ae:	f240 11cf 	movw	r1, #463	; 0x1cf
 80021b2:	4834      	ldr	r0, [pc, #208]	; (8002284 <HAL_RCC_OscConfig+0x49c>)
 80021b4:	f001 f879 	bl	80032aa <assert_failed>
 80021b8:	e7ba      	b.n	8002130 <HAL_RCC_OscConfig+0x348>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80021ba:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80021be:	4831      	ldr	r0, [pc, #196]	; (8002284 <HAL_RCC_OscConfig+0x49c>)
 80021c0:	f001 f873 	bl	80032aa <assert_failed>
 80021c4:	e7c6      	b.n	8002154 <HAL_RCC_OscConfig+0x36c>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80021c6:	f240 11d9 	movw	r1, #473	; 0x1d9
 80021ca:	482e      	ldr	r0, [pc, #184]	; (8002284 <HAL_RCC_OscConfig+0x49c>)
 80021cc:	f001 f86d 	bl	80032aa <assert_failed>
 80021d0:	e7c3      	b.n	800215a <HAL_RCC_OscConfig+0x372>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80021d2:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80021d6:	482b      	ldr	r0, [pc, #172]	; (8002284 <HAL_RCC_OscConfig+0x49c>)
 80021d8:	f001 f867 	bl	80032aa <assert_failed>
 80021dc:	e7c2      	b.n	8002164 <HAL_RCC_OscConfig+0x37c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80021de:	f240 11db 	movw	r1, #475	; 0x1db
 80021e2:	4828      	ldr	r0, [pc, #160]	; (8002284 <HAL_RCC_OscConfig+0x49c>)
 80021e4:	f001 f861 	bl	80032aa <assert_failed>
 80021e8:	e7c5      	b.n	8002176 <HAL_RCC_OscConfig+0x38e>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80021ea:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80021ee:	4825      	ldr	r0, [pc, #148]	; (8002284 <HAL_RCC_OscConfig+0x49c>)
 80021f0:	f001 f85b 	bl	80032aa <assert_failed>
 80021f4:	e7c3      	b.n	800217e <HAL_RCC_OscConfig+0x396>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021f6:	69e3      	ldr	r3, [r4, #28]
 80021f8:	6a22      	ldr	r2, [r4, #32]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021fe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002202:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002204:	0852      	lsrs	r2, r2, #1
 8002206:	3a01      	subs	r2, #1
 8002208:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800220c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800220e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002212:	4a1a      	ldr	r2, [pc, #104]	; (800227c <HAL_RCC_OscConfig+0x494>)
 8002214:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002216:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_RCC_OscConfig+0x498>)
 8002218:	2201      	movs	r2, #1
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe fe5c 	bl	8000ed8 <HAL_GetTick>
 8002220:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002222:	4b16      	ldr	r3, [pc, #88]	; (800227c <HAL_RCC_OscConfig+0x494>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x452>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222c:	f7fe fe54 	bl	8000ed8 <HAL_GetTick>
 8002230:	1b00      	subs	r0, r0, r4
 8002232:	2802      	cmp	r0, #2
 8002234:	d9f5      	bls.n	8002222 <HAL_RCC_OscConfig+0x43a>
          {
            return HAL_TIMEOUT;
 8002236:	2003      	movs	r0, #3
 8002238:	e01a      	b.n	8002270 <HAL_RCC_OscConfig+0x488>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800223a:	2000      	movs	r0, #0
 800223c:	e018      	b.n	8002270 <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <HAL_RCC_OscConfig+0x498>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002244:	f7fe fe48 	bl	8000ed8 <HAL_GetTick>
 8002248:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <HAL_RCC_OscConfig+0x494>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002252:	d006      	beq.n	8002262 <HAL_RCC_OscConfig+0x47a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002254:	f7fe fe40 	bl	8000ed8 <HAL_GetTick>
 8002258:	1b00      	subs	r0, r0, r4
 800225a:	2802      	cmp	r0, #2
 800225c:	d9f5      	bls.n	800224a <HAL_RCC_OscConfig+0x462>
            return HAL_TIMEOUT;
 800225e:	2003      	movs	r0, #3
 8002260:	e006      	b.n	8002270 <HAL_RCC_OscConfig+0x488>
  return HAL_OK;
 8002262:	2000      	movs	r0, #0
 8002264:	e004      	b.n	8002270 <HAL_RCC_OscConfig+0x488>
    return HAL_ERROR;
 8002266:	2001      	movs	r0, #1
}
 8002268:	4770      	bx	lr
        return HAL_ERROR;
 800226a:	2001      	movs	r0, #1
 800226c:	e000      	b.n	8002270 <HAL_RCC_OscConfig+0x488>
  return HAL_OK;
 800226e:	2000      	movs	r0, #0
}
 8002270:	b002      	add	sp, #8
 8002272:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002274:	2001      	movs	r0, #1
 8002276:	e7fb      	b.n	8002270 <HAL_RCC_OscConfig+0x488>
 8002278:	40007000 	.word	0x40007000
 800227c:	40023800 	.word	0x40023800
 8002280:	42470060 	.word	0x42470060
 8002284:	08005124 	.word	0x08005124

08002288 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002288:	4b32      	ldr	r3, [pc, #200]	; (8002354 <HAL_RCC_GetSysClockFreq+0xcc>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 030c 	and.w	r3, r3, #12
 8002290:	2b04      	cmp	r3, #4
 8002292:	d05c      	beq.n	800234e <HAL_RCC_GetSysClockFreq+0xc6>
 8002294:	2b08      	cmp	r3, #8
 8002296:	d001      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002298:	482f      	ldr	r0, [pc, #188]	; (8002358 <HAL_RCC_GetSysClockFreq+0xd0>)
 800229a:	4770      	bx	lr
{
 800229c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022a0:	4b2c      	ldr	r3, [pc, #176]	; (8002354 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80022ae:	d02b      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b0:	4b28      	ldr	r3, [pc, #160]	; (8002354 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80022b8:	461e      	mov	r6, r3
 80022ba:	2700      	movs	r7, #0
 80022bc:	015c      	lsls	r4, r3, #5
 80022be:	2500      	movs	r5, #0
 80022c0:	1ae4      	subs	r4, r4, r3
 80022c2:	eb65 0507 	sbc.w	r5, r5, r7
 80022c6:	01a9      	lsls	r1, r5, #6
 80022c8:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80022cc:	01a0      	lsls	r0, r4, #6
 80022ce:	1b00      	subs	r0, r0, r4
 80022d0:	eb61 0105 	sbc.w	r1, r1, r5
 80022d4:	00cb      	lsls	r3, r1, #3
 80022d6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80022da:	00c4      	lsls	r4, r0, #3
 80022dc:	19a0      	adds	r0, r4, r6
 80022de:	eb43 0107 	adc.w	r1, r3, r7
 80022e2:	024b      	lsls	r3, r1, #9
 80022e4:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80022e8:	0244      	lsls	r4, r0, #9
 80022ea:	4620      	mov	r0, r4
 80022ec:	4619      	mov	r1, r3
 80022ee:	2300      	movs	r3, #0
 80022f0:	f7fe fc0e 	bl	8000b10 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80022fc:	3301      	adds	r3, #1
 80022fe:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002300:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002304:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_RCC_GetSysClockFreq+0xcc>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002310:	461e      	mov	r6, r3
 8002312:	2700      	movs	r7, #0
 8002314:	015c      	lsls	r4, r3, #5
 8002316:	2500      	movs	r5, #0
 8002318:	1ae4      	subs	r4, r4, r3
 800231a:	eb65 0507 	sbc.w	r5, r5, r7
 800231e:	01a9      	lsls	r1, r5, #6
 8002320:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002324:	01a0      	lsls	r0, r4, #6
 8002326:	1b00      	subs	r0, r0, r4
 8002328:	eb61 0105 	sbc.w	r1, r1, r5
 800232c:	00cb      	lsls	r3, r1, #3
 800232e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002332:	00c4      	lsls	r4, r0, #3
 8002334:	19a0      	adds	r0, r4, r6
 8002336:	eb43 0107 	adc.w	r1, r3, r7
 800233a:	028b      	lsls	r3, r1, #10
 800233c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002340:	0284      	lsls	r4, r0, #10
 8002342:	4620      	mov	r0, r4
 8002344:	4619      	mov	r1, r3
 8002346:	2300      	movs	r3, #0
 8002348:	f7fe fbe2 	bl	8000b10 <__aeabi_uldivmod>
 800234c:	e7d2      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 800234e:	4803      	ldr	r0, [pc, #12]	; (800235c <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800
 8002358:	00f42400 	.word	0x00f42400
 800235c:	007a1200 	.word	0x007a1200

08002360 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002360:	2800      	cmp	r0, #0
 8002362:	f000 80f9 	beq.w	8002558 <HAL_RCC_ClockConfig+0x1f8>
{
 8002366:	b570      	push	{r4, r5, r6, lr}
 8002368:	4604      	mov	r4, r0
 800236a:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800236c:	6803      	ldr	r3, [r0, #0]
 800236e:	3b01      	subs	r3, #1
 8002370:	2b0e      	cmp	r3, #14
 8002372:	d811      	bhi.n	8002398 <HAL_RCC_ClockConfig+0x38>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002374:	2d07      	cmp	r5, #7
 8002376:	d815      	bhi.n	80023a4 <HAL_RCC_ClockConfig+0x44>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b79      	ldr	r3, [pc, #484]	; (8002560 <HAL_RCC_ClockConfig+0x200>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	42ab      	cmp	r3, r5
 8002382:	d215      	bcs.n	80023b0 <HAL_RCC_ClockConfig+0x50>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002384:	b2eb      	uxtb	r3, r5
 8002386:	4a76      	ldr	r2, [pc, #472]	; (8002560 <HAL_RCC_ClockConfig+0x200>)
 8002388:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	6813      	ldr	r3, [r2, #0]
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	42ab      	cmp	r3, r5
 8002392:	d00d      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x50>
      return HAL_ERROR;
 8002394:	2001      	movs	r0, #1
}
 8002396:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002398:	f44f 7110 	mov.w	r1, #576	; 0x240
 800239c:	4871      	ldr	r0, [pc, #452]	; (8002564 <HAL_RCC_ClockConfig+0x204>)
 800239e:	f000 ff84 	bl	80032aa <assert_failed>
 80023a2:	e7e7      	b.n	8002374 <HAL_RCC_ClockConfig+0x14>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80023a4:	f240 2141 	movw	r1, #577	; 0x241
 80023a8:	486e      	ldr	r0, [pc, #440]	; (8002564 <HAL_RCC_ClockConfig+0x204>)
 80023aa:	f000 ff7e 	bl	80032aa <assert_failed>
 80023ae:	e7e3      	b.n	8002378 <HAL_RCC_ClockConfig+0x18>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	f013 0f02 	tst.w	r3, #2
 80023b6:	d029      	beq.n	800240c <HAL_RCC_ClockConfig+0xac>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	f013 0f04 	tst.w	r3, #4
 80023bc:	d004      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x68>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023be:	4a6a      	ldr	r2, [pc, #424]	; (8002568 <HAL_RCC_ClockConfig+0x208>)
 80023c0:	6893      	ldr	r3, [r2, #8]
 80023c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023c6:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	f013 0f08 	tst.w	r3, #8
 80023ce:	d004      	beq.n	80023da <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d0:	4a65      	ldr	r2, [pc, #404]	; (8002568 <HAL_RCC_ClockConfig+0x208>)
 80023d2:	6893      	ldr	r3, [r2, #8]
 80023d4:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023d8:	6093      	str	r3, [r2, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80023da:	68a3      	ldr	r3, [r4, #8]
 80023dc:	b17b      	cbz	r3, 80023fe <HAL_RCC_ClockConfig+0x9e>
 80023de:	2b80      	cmp	r3, #128	; 0x80
 80023e0:	d00d      	beq.n	80023fe <HAL_RCC_ClockConfig+0x9e>
 80023e2:	2b90      	cmp	r3, #144	; 0x90
 80023e4:	d00b      	beq.n	80023fe <HAL_RCC_ClockConfig+0x9e>
 80023e6:	2ba0      	cmp	r3, #160	; 0xa0
 80023e8:	d009      	beq.n	80023fe <HAL_RCC_ClockConfig+0x9e>
 80023ea:	2bb0      	cmp	r3, #176	; 0xb0
 80023ec:	d007      	beq.n	80023fe <HAL_RCC_ClockConfig+0x9e>
 80023ee:	2bc0      	cmp	r3, #192	; 0xc0
 80023f0:	d005      	beq.n	80023fe <HAL_RCC_ClockConfig+0x9e>
 80023f2:	2bd0      	cmp	r3, #208	; 0xd0
 80023f4:	d003      	beq.n	80023fe <HAL_RCC_ClockConfig+0x9e>
 80023f6:	2be0      	cmp	r3, #224	; 0xe0
 80023f8:	d001      	beq.n	80023fe <HAL_RCC_ClockConfig+0x9e>
 80023fa:	2bf0      	cmp	r3, #240	; 0xf0
 80023fc:	d133      	bne.n	8002466 <HAL_RCC_ClockConfig+0x106>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fe:	4a5a      	ldr	r2, [pc, #360]	; (8002568 <HAL_RCC_ClockConfig+0x208>)
 8002400:	6893      	ldr	r3, [r2, #8]
 8002402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002406:	68a1      	ldr	r1, [r4, #8]
 8002408:	430b      	orrs	r3, r1
 800240a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240c:	6823      	ldr	r3, [r4, #0]
 800240e:	f013 0f01 	tst.w	r3, #1
 8002412:	d042      	beq.n	800249a <HAL_RCC_ClockConfig+0x13a>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002414:	6863      	ldr	r3, [r4, #4]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d82b      	bhi.n	8002472 <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241a:	6863      	ldr	r3, [r4, #4]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d02e      	beq.n	800247e <HAL_RCC_ClockConfig+0x11e>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002420:	1e9a      	subs	r2, r3, #2
 8002422:	2a01      	cmp	r2, #1
 8002424:	d932      	bls.n	800248c <HAL_RCC_ClockConfig+0x12c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002426:	4a50      	ldr	r2, [pc, #320]	; (8002568 <HAL_RCC_ClockConfig+0x208>)
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	f012 0f02 	tst.w	r2, #2
 800242e:	f000 8095 	beq.w	800255c <HAL_RCC_ClockConfig+0x1fc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002432:	494d      	ldr	r1, [pc, #308]	; (8002568 <HAL_RCC_ClockConfig+0x208>)
 8002434:	688a      	ldr	r2, [r1, #8]
 8002436:	f022 0203 	bic.w	r2, r2, #3
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800243e:	f7fe fd4b 	bl	8000ed8 <HAL_GetTick>
 8002442:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002444:	4b48      	ldr	r3, [pc, #288]	; (8002568 <HAL_RCC_ClockConfig+0x208>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	6862      	ldr	r2, [r4, #4]
 800244e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002452:	d022      	beq.n	800249a <HAL_RCC_ClockConfig+0x13a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002454:	f7fe fd40 	bl	8000ed8 <HAL_GetTick>
 8002458:	1b80      	subs	r0, r0, r6
 800245a:	f241 3388 	movw	r3, #5000	; 0x1388
 800245e:	4298      	cmp	r0, r3
 8002460:	d9f0      	bls.n	8002444 <HAL_RCC_ClockConfig+0xe4>
        return HAL_TIMEOUT;
 8002462:	2003      	movs	r0, #3
 8002464:	e797      	b.n	8002396 <HAL_RCC_ClockConfig+0x36>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002466:	f44f 7119 	mov.w	r1, #612	; 0x264
 800246a:	483e      	ldr	r0, [pc, #248]	; (8002564 <HAL_RCC_ClockConfig+0x204>)
 800246c:	f000 ff1d 	bl	80032aa <assert_failed>
 8002470:	e7c5      	b.n	80023fe <HAL_RCC_ClockConfig+0x9e>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002472:	f240 216b 	movw	r1, #619	; 0x26b
 8002476:	483b      	ldr	r0, [pc, #236]	; (8002564 <HAL_RCC_ClockConfig+0x204>)
 8002478:	f000 ff17 	bl	80032aa <assert_failed>
 800247c:	e7cd      	b.n	800241a <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	4a3a      	ldr	r2, [pc, #232]	; (8002568 <HAL_RCC_ClockConfig+0x208>)
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002486:	d1d4      	bne.n	8002432 <HAL_RCC_ClockConfig+0xd2>
        return HAL_ERROR;
 8002488:	2001      	movs	r0, #1
 800248a:	e784      	b.n	8002396 <HAL_RCC_ClockConfig+0x36>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248c:	4a36      	ldr	r2, [pc, #216]	; (8002568 <HAL_RCC_ClockConfig+0x208>)
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002494:	d1cd      	bne.n	8002432 <HAL_RCC_ClockConfig+0xd2>
        return HAL_ERROR;
 8002496:	2001      	movs	r0, #1
 8002498:	e77d      	b.n	8002396 <HAL_RCC_ClockConfig+0x36>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800249a:	4b31      	ldr	r3, [pc, #196]	; (8002560 <HAL_RCC_ClockConfig+0x200>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	42ab      	cmp	r3, r5
 80024a4:	d909      	bls.n	80024ba <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	b2ea      	uxtb	r2, r5
 80024a8:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_RCC_ClockConfig+0x200>)
 80024aa:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	42ab      	cmp	r3, r5
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_ClockConfig+0x15a>
      return HAL_ERROR;
 80024b6:	2001      	movs	r0, #1
 80024b8:	e76d      	b.n	8002396 <HAL_RCC_ClockConfig+0x36>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	f013 0f04 	tst.w	r3, #4
 80024c0:	d014      	beq.n	80024ec <HAL_RCC_ClockConfig+0x18c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80024c2:	68e3      	ldr	r3, [r4, #12]
 80024c4:	b15b      	cbz	r3, 80024de <HAL_RCC_ClockConfig+0x17e>
 80024c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ca:	d008      	beq.n	80024de <HAL_RCC_ClockConfig+0x17e>
 80024cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80024d0:	d005      	beq.n	80024de <HAL_RCC_ClockConfig+0x17e>
 80024d2:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80024d6:	d002      	beq.n	80024de <HAL_RCC_ClockConfig+0x17e>
 80024d8:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80024dc:	d130      	bne.n	8002540 <HAL_RCC_ClockConfig+0x1e0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024de:	4a22      	ldr	r2, [pc, #136]	; (8002568 <HAL_RCC_ClockConfig+0x208>)
 80024e0:	6893      	ldr	r3, [r2, #8]
 80024e2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80024e6:	68e1      	ldr	r1, [r4, #12]
 80024e8:	430b      	orrs	r3, r1
 80024ea:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	f013 0f08 	tst.w	r3, #8
 80024f2:	d015      	beq.n	8002520 <HAL_RCC_ClockConfig+0x1c0>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80024f4:	6923      	ldr	r3, [r4, #16]
 80024f6:	b15b      	cbz	r3, 8002510 <HAL_RCC_ClockConfig+0x1b0>
 80024f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fc:	d008      	beq.n	8002510 <HAL_RCC_ClockConfig+0x1b0>
 80024fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002502:	d005      	beq.n	8002510 <HAL_RCC_ClockConfig+0x1b0>
 8002504:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002508:	d002      	beq.n	8002510 <HAL_RCC_ClockConfig+0x1b0>
 800250a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800250e:	d11d      	bne.n	800254c <HAL_RCC_ClockConfig+0x1ec>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002510:	4a15      	ldr	r2, [pc, #84]	; (8002568 <HAL_RCC_ClockConfig+0x208>)
 8002512:	6893      	ldr	r3, [r2, #8]
 8002514:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002518:	6921      	ldr	r1, [r4, #16]
 800251a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800251e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002520:	f7ff feb2 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8002524:	4b10      	ldr	r3, [pc, #64]	; (8002568 <HAL_RCC_ClockConfig+0x208>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800252c:	4a0f      	ldr	r2, [pc, #60]	; (800256c <HAL_RCC_ClockConfig+0x20c>)
 800252e:	5cd3      	ldrb	r3, [r2, r3]
 8002530:	40d8      	lsrs	r0, r3
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <HAL_RCC_ClockConfig+0x210>)
 8002534:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002536:	2000      	movs	r0, #0
 8002538:	f7fe fc82 	bl	8000e40 <HAL_InitTick>
  return HAL_OK;
 800253c:	2000      	movs	r0, #0
 800253e:	e72a      	b.n	8002396 <HAL_RCC_ClockConfig+0x36>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002540:	f240 21a9 	movw	r1, #681	; 0x2a9
 8002544:	4807      	ldr	r0, [pc, #28]	; (8002564 <HAL_RCC_ClockConfig+0x204>)
 8002546:	f000 feb0 	bl	80032aa <assert_failed>
 800254a:	e7c8      	b.n	80024de <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800254c:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8002550:	4804      	ldr	r0, [pc, #16]	; (8002564 <HAL_RCC_ClockConfig+0x204>)
 8002552:	f000 feaa 	bl	80032aa <assert_failed>
 8002556:	e7db      	b.n	8002510 <HAL_RCC_ClockConfig+0x1b0>
    return HAL_ERROR;
 8002558:	2001      	movs	r0, #1
}
 800255a:	4770      	bx	lr
        return HAL_ERROR;
 800255c:	2001      	movs	r0, #1
 800255e:	e71a      	b.n	8002396 <HAL_RCC_ClockConfig+0x36>
 8002560:	40023c00 	.word	0x40023c00
 8002564:	08005124 	.word	0x08005124
 8002568:	40023800 	.word	0x40023800
 800256c:	08005198 	.word	0x08005198
 8002570:	2000010c 	.word	0x2000010c

08002574 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002574:	4b01      	ldr	r3, [pc, #4]	; (800257c <HAL_RCC_GetHCLKFreq+0x8>)
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	2000010c 	.word	0x2000010c

08002580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002580:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002582:	f7ff fff7 	bl	8002574 <HAL_RCC_GetHCLKFreq>
 8002586:	4b04      	ldr	r3, [pc, #16]	; (8002598 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800258e:	4a03      	ldr	r2, [pc, #12]	; (800259c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002590:	5cd3      	ldrb	r3, [r2, r3]
}
 8002592:	40d8      	lsrs	r0, r3
 8002594:	bd08      	pop	{r3, pc}
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	080051a8 	.word	0x080051a8

080025a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025a2:	f7ff ffe7 	bl	8002574 <HAL_RCC_GetHCLKFreq>
 80025a6:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80025ae:	4a03      	ldr	r2, [pc, #12]	; (80025bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80025b0:	5cd3      	ldrb	r3, [r2, r3]
}
 80025b2:	40d8      	lsrs	r0, r3
 80025b4:	bd08      	pop	{r3, pc}
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	080051a8 	.word	0x080051a8

080025c0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025c0:	6802      	ldr	r2, [r0, #0]
 80025c2:	68d3      	ldr	r3, [r2, #12]
 80025c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025c8:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ca:	6802      	ldr	r2, [r0, #0]
 80025cc:	6953      	ldr	r3, [r2, #20]
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025d4:	2320      	movs	r3, #32
 80025d6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80025da:	4770      	bx	lr

080025dc <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025dc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b21      	cmp	r3, #33	; 0x21
 80025e4:	d12a      	bne.n	800263c <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025e6:	6883      	ldr	r3, [r0, #8]
 80025e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ec:	d016      	beq.n	800261c <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025ee:	6a03      	ldr	r3, [r0, #32]
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	6202      	str	r2, [r0, #32]
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	6803      	ldr	r3, [r0, #0]
 80025f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80025fa:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29b      	uxth	r3, r3
 8002600:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002602:	b9eb      	cbnz	r3, 8002640 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002604:	6802      	ldr	r2, [r0, #0]
 8002606:	68d3      	ldr	r3, [r2, #12]
 8002608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800260c:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800260e:	6802      	ldr	r2, [r0, #0]
 8002610:	68d3      	ldr	r3, [r2, #12]
 8002612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002616:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8002618:	2000      	movs	r0, #0
 800261a:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800261c:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	6802      	ldr	r2, [r0, #0]
 8002622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002626:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002628:	6903      	ldr	r3, [r0, #16]
 800262a:	b91b      	cbnz	r3, 8002634 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 800262c:	6a03      	ldr	r3, [r0, #32]
 800262e:	3302      	adds	r3, #2
 8002630:	6203      	str	r3, [r0, #32]
 8002632:	e7e2      	b.n	80025fa <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8002634:	6a03      	ldr	r3, [r0, #32]
 8002636:	3301      	adds	r3, #1
 8002638:	6203      	str	r3, [r0, #32]
 800263a:	e7de      	b.n	80025fa <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 800263c:	2002      	movs	r0, #2
 800263e:	4770      	bx	lr
    return HAL_OK;
 8002640:	2000      	movs	r0, #0
  }
}
 8002642:	4770      	bx	lr

08002644 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002648:	4604      	mov	r4, r0
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800264a:	6842      	ldr	r2, [r0, #4]
 800264c:	4bb4      	ldr	r3, [pc, #720]	; (8002920 <UART_SetConfig+0x2dc>)
 800264e:	429a      	cmp	r2, r3
 8002650:	f200 809c 	bhi.w	800278c <UART_SetConfig+0x148>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002654:	68e3      	ldr	r3, [r4, #12]
 8002656:	b11b      	cbz	r3, 8002660 <UART_SetConfig+0x1c>
 8002658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800265c:	f040 809c 	bne.w	8002798 <UART_SetConfig+0x154>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002660:	6923      	ldr	r3, [r4, #16]
 8002662:	b133      	cbz	r3, 8002672 <UART_SetConfig+0x2e>
 8002664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002668:	d003      	beq.n	8002672 <UART_SetConfig+0x2e>
 800266a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800266e:	f040 8099 	bne.w	80027a4 <UART_SetConfig+0x160>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8002672:	6963      	ldr	r3, [r4, #20]
 8002674:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 8002678:	4213      	tst	r3, r2
 800267a:	d100      	bne.n	800267e <UART_SetConfig+0x3a>
 800267c:	b923      	cbnz	r3, 8002688 <UART_SetConfig+0x44>
 800267e:	f640 31e8 	movw	r1, #3048	; 0xbe8
 8002682:	48a8      	ldr	r0, [pc, #672]	; (8002924 <UART_SetConfig+0x2e0>)
 8002684:	f000 fe11 	bl	80032aa <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002688:	6822      	ldr	r2, [r4, #0]
 800268a:	6913      	ldr	r3, [r2, #16]
 800268c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002690:	68e1      	ldr	r1, [r4, #12]
 8002692:	430b      	orrs	r3, r1
 8002694:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002696:	68a3      	ldr	r3, [r4, #8]
 8002698:	6922      	ldr	r2, [r4, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	6962      	ldr	r2, [r4, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	69e2      	ldr	r2, [r4, #28]
 80026a2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80026a4:	6821      	ldr	r1, [r4, #0]
 80026a6:	68cb      	ldr	r3, [r1, #12]
 80026a8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80026ac:	f023 030c 	bic.w	r3, r3, #12
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026b4:	6822      	ldr	r2, [r4, #0]
 80026b6:	6953      	ldr	r3, [r2, #20]
 80026b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026bc:	69a1      	ldr	r1, [r4, #24]
 80026be:	430b      	orrs	r3, r1
 80026c0:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026c2:	69e3      	ldr	r3, [r4, #28]
 80026c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c8:	d072      	beq.n	80027b0 <UART_SetConfig+0x16c>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	4a96      	ldr	r2, [pc, #600]	; (8002928 <UART_SetConfig+0x2e4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	f000 812e 	beq.w	8002930 <UART_SetConfig+0x2ec>
 80026d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026d8:	4293      	cmp	r3, r2
 80026da:	f000 8129 	beq.w	8002930 <UART_SetConfig+0x2ec>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026de:	f7ff ff4f 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 80026e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026ea:	6865      	ldr	r5, [r4, #4]
 80026ec:	00ad      	lsls	r5, r5, #2
 80026ee:	fbb0 f5f5 	udiv	r5, r0, r5
 80026f2:	4f8e      	ldr	r7, [pc, #568]	; (800292c <UART_SetConfig+0x2e8>)
 80026f4:	fba7 3505 	umull	r3, r5, r7, r5
 80026f8:	096d      	lsrs	r5, r5, #5
 80026fa:	012e      	lsls	r6, r5, #4
 80026fc:	f7ff ff40 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8002700:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002704:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002708:	6865      	ldr	r5, [r4, #4]
 800270a:	00ad      	lsls	r5, r5, #2
 800270c:	fbb0 f9f5 	udiv	r9, r0, r5
 8002710:	f7ff ff36 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8002714:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002718:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800271c:	6865      	ldr	r5, [r4, #4]
 800271e:	00ad      	lsls	r5, r5, #2
 8002720:	fbb0 f5f5 	udiv	r5, r0, r5
 8002724:	fba7 3505 	umull	r3, r5, r7, r5
 8002728:	096d      	lsrs	r5, r5, #5
 800272a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800272e:	fb08 9515 	mls	r5, r8, r5, r9
 8002732:	012d      	lsls	r5, r5, #4
 8002734:	3532      	adds	r5, #50	; 0x32
 8002736:	fba7 3505 	umull	r3, r5, r7, r5
 800273a:	096d      	lsrs	r5, r5, #5
 800273c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002740:	4435      	add	r5, r6
 8002742:	f7ff ff1d 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8002746:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800274a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800274e:	6866      	ldr	r6, [r4, #4]
 8002750:	00b6      	lsls	r6, r6, #2
 8002752:	fbb0 f6f6 	udiv	r6, r0, r6
 8002756:	f7ff ff13 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 800275a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800275e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002762:	6863      	ldr	r3, [r4, #4]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	fbb0 f0f3 	udiv	r0, r0, r3
 800276a:	fba7 3000 	umull	r3, r0, r7, r0
 800276e:	0940      	lsrs	r0, r0, #5
 8002770:	fb08 6810 	mls	r8, r8, r0, r6
 8002774:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002778:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800277c:	fba7 3708 	umull	r3, r7, r7, r8
 8002780:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	442f      	add	r7, r5
 8002788:	609f      	str	r7, [r3, #8]
    }
  }
}
 800278a:	e127      	b.n	80029dc <UART_SetConfig+0x398>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800278c:	f640 31e5 	movw	r1, #3045	; 0xbe5
 8002790:	4864      	ldr	r0, [pc, #400]	; (8002924 <UART_SetConfig+0x2e0>)
 8002792:	f000 fd8a 	bl	80032aa <assert_failed>
 8002796:	e75d      	b.n	8002654 <UART_SetConfig+0x10>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002798:	f640 31e6 	movw	r1, #3046	; 0xbe6
 800279c:	4861      	ldr	r0, [pc, #388]	; (8002924 <UART_SetConfig+0x2e0>)
 800279e:	f000 fd84 	bl	80032aa <assert_failed>
 80027a2:	e75d      	b.n	8002660 <UART_SetConfig+0x1c>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80027a4:	f640 31e7 	movw	r1, #3047	; 0xbe7
 80027a8:	485e      	ldr	r0, [pc, #376]	; (8002924 <UART_SetConfig+0x2e0>)
 80027aa:	f000 fd7e 	bl	80032aa <assert_failed>
 80027ae:	e760      	b.n	8002672 <UART_SetConfig+0x2e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027b0:	6823      	ldr	r3, [r4, #0]
 80027b2:	4a5d      	ldr	r2, [pc, #372]	; (8002928 <UART_SetConfig+0x2e4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d05b      	beq.n	8002870 <UART_SetConfig+0x22c>
 80027b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027bc:	4293      	cmp	r3, r2
 80027be:	d057      	beq.n	8002870 <UART_SetConfig+0x22c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80027c0:	f7ff fede 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 80027c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027cc:	6865      	ldr	r5, [r4, #4]
 80027ce:	006d      	lsls	r5, r5, #1
 80027d0:	fbb0 f5f5 	udiv	r5, r0, r5
 80027d4:	4f55      	ldr	r7, [pc, #340]	; (800292c <UART_SetConfig+0x2e8>)
 80027d6:	fba7 3505 	umull	r3, r5, r7, r5
 80027da:	096d      	lsrs	r5, r5, #5
 80027dc:	012e      	lsls	r6, r5, #4
 80027de:	f7ff fecf 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 80027e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027ea:	6865      	ldr	r5, [r4, #4]
 80027ec:	006d      	lsls	r5, r5, #1
 80027ee:	fbb0 f9f5 	udiv	r9, r0, r5
 80027f2:	f7ff fec5 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 80027f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027fe:	6865      	ldr	r5, [r4, #4]
 8002800:	006d      	lsls	r5, r5, #1
 8002802:	fbb0 f5f5 	udiv	r5, r0, r5
 8002806:	fba7 3505 	umull	r3, r5, r7, r5
 800280a:	096d      	lsrs	r5, r5, #5
 800280c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002810:	fb08 9515 	mls	r5, r8, r5, r9
 8002814:	00ed      	lsls	r5, r5, #3
 8002816:	3532      	adds	r5, #50	; 0x32
 8002818:	fba7 3505 	umull	r3, r5, r7, r5
 800281c:	096d      	lsrs	r5, r5, #5
 800281e:	006d      	lsls	r5, r5, #1
 8002820:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8002824:	4435      	add	r5, r6
 8002826:	f7ff feab 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 800282a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800282e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002832:	6866      	ldr	r6, [r4, #4]
 8002834:	0076      	lsls	r6, r6, #1
 8002836:	fbb0 f6f6 	udiv	r6, r0, r6
 800283a:	f7ff fea1 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 800283e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002842:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002846:	6863      	ldr	r3, [r4, #4]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fbb0 f3f3 	udiv	r3, r0, r3
 800284e:	fba7 2303 	umull	r2, r3, r7, r3
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	fb08 6813 	mls	r8, r8, r3, r6
 8002858:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800285c:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002860:	fba7 3708 	umull	r3, r7, r7, r8
 8002864:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	442f      	add	r7, r5
 800286c:	609f      	str	r7, [r3, #8]
 800286e:	e0b5      	b.n	80029dc <UART_SetConfig+0x398>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002870:	f7ff fe96 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8002874:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002878:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800287c:	6865      	ldr	r5, [r4, #4]
 800287e:	006d      	lsls	r5, r5, #1
 8002880:	fbb0 f5f5 	udiv	r5, r0, r5
 8002884:	4f29      	ldr	r7, [pc, #164]	; (800292c <UART_SetConfig+0x2e8>)
 8002886:	fba7 3505 	umull	r3, r5, r7, r5
 800288a:	096d      	lsrs	r5, r5, #5
 800288c:	012e      	lsls	r6, r5, #4
 800288e:	f7ff fe87 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8002892:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002896:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800289a:	6865      	ldr	r5, [r4, #4]
 800289c:	006d      	lsls	r5, r5, #1
 800289e:	fbb0 f9f5 	udiv	r9, r0, r5
 80028a2:	f7ff fe7d 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 80028a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028ae:	6865      	ldr	r5, [r4, #4]
 80028b0:	006d      	lsls	r5, r5, #1
 80028b2:	fbb0 f5f5 	udiv	r5, r0, r5
 80028b6:	fba7 3505 	umull	r3, r5, r7, r5
 80028ba:	096d      	lsrs	r5, r5, #5
 80028bc:	f04f 0864 	mov.w	r8, #100	; 0x64
 80028c0:	fb08 9515 	mls	r5, r8, r5, r9
 80028c4:	00ed      	lsls	r5, r5, #3
 80028c6:	3532      	adds	r5, #50	; 0x32
 80028c8:	fba7 3505 	umull	r3, r5, r7, r5
 80028cc:	096d      	lsrs	r5, r5, #5
 80028ce:	006d      	lsls	r5, r5, #1
 80028d0:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80028d4:	4435      	add	r5, r6
 80028d6:	f7ff fe63 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 80028da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028e2:	6866      	ldr	r6, [r4, #4]
 80028e4:	0076      	lsls	r6, r6, #1
 80028e6:	fbb0 f6f6 	udiv	r6, r0, r6
 80028ea:	f7ff fe59 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 80028ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028f6:	6863      	ldr	r3, [r4, #4]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fe:	fba7 2303 	umull	r2, r3, r7, r3
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	fb08 6813 	mls	r8, r8, r3, r6
 8002908:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800290c:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002910:	fba7 3708 	umull	r3, r7, r7, r8
 8002914:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	442f      	add	r7, r5
 800291c:	609f      	str	r7, [r3, #8]
 800291e:	e05d      	b.n	80029dc <UART_SetConfig+0x398>
 8002920:	00a037a0 	.word	0x00a037a0
 8002924:	0800515c 	.word	0x0800515c
 8002928:	40011000 	.word	0x40011000
 800292c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002930:	f7ff fe36 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8002934:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002938:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800293c:	6865      	ldr	r5, [r4, #4]
 800293e:	00ad      	lsls	r5, r5, #2
 8002940:	fbb0 f5f5 	udiv	r5, r0, r5
 8002944:	4f26      	ldr	r7, [pc, #152]	; (80029e0 <UART_SetConfig+0x39c>)
 8002946:	fba7 3505 	umull	r3, r5, r7, r5
 800294a:	096d      	lsrs	r5, r5, #5
 800294c:	012e      	lsls	r6, r5, #4
 800294e:	f7ff fe27 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8002952:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002956:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800295a:	6865      	ldr	r5, [r4, #4]
 800295c:	00ad      	lsls	r5, r5, #2
 800295e:	fbb0 f9f5 	udiv	r9, r0, r5
 8002962:	f7ff fe1d 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8002966:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800296a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800296e:	6865      	ldr	r5, [r4, #4]
 8002970:	00ad      	lsls	r5, r5, #2
 8002972:	fbb0 f5f5 	udiv	r5, r0, r5
 8002976:	fba7 3505 	umull	r3, r5, r7, r5
 800297a:	096d      	lsrs	r5, r5, #5
 800297c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002980:	fb08 9515 	mls	r5, r8, r5, r9
 8002984:	012d      	lsls	r5, r5, #4
 8002986:	3532      	adds	r5, #50	; 0x32
 8002988:	fba7 3505 	umull	r3, r5, r7, r5
 800298c:	096d      	lsrs	r5, r5, #5
 800298e:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002992:	4435      	add	r5, r6
 8002994:	f7ff fe04 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8002998:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800299c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029a0:	6866      	ldr	r6, [r4, #4]
 80029a2:	00b6      	lsls	r6, r6, #2
 80029a4:	fbb0 f6f6 	udiv	r6, r0, r6
 80029a8:	f7ff fdfa 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 80029ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80029b4:	6863      	ldr	r3, [r4, #4]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80029bc:	fba7 3000 	umull	r3, r0, r7, r0
 80029c0:	0940      	lsrs	r0, r0, #5
 80029c2:	fb08 6810 	mls	r8, r8, r0, r6
 80029c6:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80029ca:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80029ce:	fba7 3708 	umull	r3, r7, r7, r8
 80029d2:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	442f      	add	r7, r5
 80029da:	609f      	str	r7, [r3, #8]
}
 80029dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029e0:	51eb851f 	.word	0x51eb851f

080029e4 <UART_WaitOnFlagUntilTimeout>:
{
 80029e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029e8:	4605      	mov	r5, r0
 80029ea:	460f      	mov	r7, r1
 80029ec:	4616      	mov	r6, r2
 80029ee:	4698      	mov	r8, r3
 80029f0:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029f2:	682b      	ldr	r3, [r5, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	ea37 0303 	bics.w	r3, r7, r3
 80029fa:	bf0c      	ite	eq
 80029fc:	2301      	moveq	r3, #1
 80029fe:	2300      	movne	r3, #0
 8002a00:	42b3      	cmp	r3, r6
 8002a02:	d11d      	bne.n	8002a40 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002a04:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002a08:	d0f3      	beq.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a0a:	b12c      	cbz	r4, 8002a18 <UART_WaitOnFlagUntilTimeout+0x34>
 8002a0c:	f7fe fa64 	bl	8000ed8 <HAL_GetTick>
 8002a10:	eba0 0008 	sub.w	r0, r0, r8
 8002a14:	42a0      	cmp	r0, r4
 8002a16:	d9ec      	bls.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a18:	682a      	ldr	r2, [r5, #0]
 8002a1a:	68d3      	ldr	r3, [r2, #12]
 8002a1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a20:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a22:	682a      	ldr	r2, [r5, #0]
 8002a24:	6953      	ldr	r3, [r2, #20]
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002a32:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002a36:	2300      	movs	r3, #0
 8002a38:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	e000      	b.n	8002a42 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8002a40:	2000      	movs	r0, #0
}
 8002a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002a48 <HAL_UART_Init>:
  if (huart == NULL)
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	d077      	beq.n	8002b3c <HAL_UART_Init+0xf4>
{
 8002a4c:	b510      	push	{r4, lr}
 8002a4e:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002a50:	6983      	ldr	r3, [r0, #24]
 8002a52:	b30b      	cbz	r3, 8002a98 <HAL_UART_Init+0x50>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002a54:	6803      	ldr	r3, [r0, #0]
 8002a56:	4a3a      	ldr	r2, [pc, #232]	; (8002b40 <HAL_UART_Init+0xf8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00c      	beq.n	8002a76 <HAL_UART_Init+0x2e>
 8002a5c:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d008      	beq.n	8002a76 <HAL_UART_Init+0x2e>
 8002a64:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d004      	beq.n	8002a76 <HAL_UART_Init+0x2e>
 8002a6c:	f240 1149 	movw	r1, #329	; 0x149
 8002a70:	4834      	ldr	r0, [pc, #208]	; (8002b44 <HAL_UART_Init+0xfc>)
 8002a72:	f000 fc1a 	bl	80032aa <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002a76:	69a3      	ldr	r3, [r4, #24]
 8002a78:	b1fb      	cbz	r3, 8002aba <HAL_UART_Init+0x72>
 8002a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7e:	d01c      	beq.n	8002aba <HAL_UART_Init+0x72>
 8002a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a84:	d019      	beq.n	8002aba <HAL_UART_Init+0x72>
 8002a86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a8a:	d016      	beq.n	8002aba <HAL_UART_Init+0x72>
 8002a8c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002a90:	482c      	ldr	r0, [pc, #176]	; (8002b44 <HAL_UART_Init+0xfc>)
 8002a92:	f000 fc0a 	bl	80032aa <assert_failed>
 8002a96:	e010      	b.n	8002aba <HAL_UART_Init+0x72>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002a98:	6803      	ldr	r3, [r0, #0]
 8002a9a:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <HAL_UART_Init+0xf8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00c      	beq.n	8002aba <HAL_UART_Init+0x72>
 8002aa0:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d008      	beq.n	8002aba <HAL_UART_Init+0x72>
 8002aa8:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <HAL_UART_Init+0x72>
 8002ab0:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8002ab4:	4823      	ldr	r0, [pc, #140]	; (8002b44 <HAL_UART_Init+0xfc>)
 8002ab6:	f000 fbf8 	bl	80032aa <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002aba:	68a3      	ldr	r3, [r4, #8]
 8002abc:	b113      	cbz	r3, 8002ac4 <HAL_UART_Init+0x7c>
 8002abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac2:	d129      	bne.n	8002b18 <HAL_UART_Init+0xd0>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8002ac4:	69e3      	ldr	r3, [r4, #28]
 8002ac6:	b113      	cbz	r3, 8002ace <HAL_UART_Init+0x86>
 8002ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002acc:	d12a      	bne.n	8002b24 <HAL_UART_Init+0xdc>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002ace:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002ad2:	b36b      	cbz	r3, 8002b30 <HAL_UART_Init+0xe8>
  huart->gState = HAL_UART_STATE_BUSY;
 8002ad4:	2324      	movs	r3, #36	; 0x24
 8002ad6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002ada:	6822      	ldr	r2, [r4, #0]
 8002adc:	68d3      	ldr	r3, [r2, #12]
 8002ade:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ae2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f7ff fdad 	bl	8002644 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aea:	6822      	ldr	r2, [r4, #0]
 8002aec:	6913      	ldr	r3, [r2, #16]
 8002aee:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002af2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002af4:	6822      	ldr	r2, [r4, #0]
 8002af6:	6953      	ldr	r3, [r2, #20]
 8002af8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002afc:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002afe:	6822      	ldr	r2, [r4, #0]
 8002b00:	68d3      	ldr	r3, [r2, #12]
 8002b02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b06:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b08:	2000      	movs	r0, #0
 8002b0a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002b12:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002b16:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002b18:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8002b1c:	4809      	ldr	r0, [pc, #36]	; (8002b44 <HAL_UART_Init+0xfc>)
 8002b1e:	f000 fbc4 	bl	80032aa <assert_failed>
 8002b22:	e7cf      	b.n	8002ac4 <HAL_UART_Init+0x7c>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8002b24:	f240 1151 	movw	r1, #337	; 0x151
 8002b28:	4806      	ldr	r0, [pc, #24]	; (8002b44 <HAL_UART_Init+0xfc>)
 8002b2a:	f000 fbbe 	bl	80032aa <assert_failed>
 8002b2e:	e7ce      	b.n	8002ace <HAL_UART_Init+0x86>
    huart->Lock = HAL_UNLOCKED;
 8002b30:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002b34:	4620      	mov	r0, r4
 8002b36:	f000 fc55 	bl	80033e4 <HAL_UART_MspInit>
 8002b3a:	e7cb      	b.n	8002ad4 <HAL_UART_Init+0x8c>
    return HAL_ERROR;
 8002b3c:	2001      	movs	r0, #1
}
 8002b3e:	4770      	bx	lr
 8002b40:	40011000 	.word	0x40011000
 8002b44:	0800515c 	.word	0x0800515c

08002b48 <HAL_UART_Receive>:
{
 8002b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b50:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d15a      	bne.n	8002c10 <HAL_UART_Receive+0xc8>
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	460d      	mov	r5, r1
 8002b5e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002b60:	2900      	cmp	r1, #0
 8002b62:	d059      	beq.n	8002c18 <HAL_UART_Receive+0xd0>
 8002b64:	2a00      	cmp	r2, #0
 8002b66:	d059      	beq.n	8002c1c <HAL_UART_Receive+0xd4>
    __HAL_LOCK(huart);
 8002b68:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d057      	beq.n	8002c20 <HAL_UART_Receive+0xd8>
 8002b70:	2301      	movs	r3, #1
 8002b72:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b7a:	2322      	movs	r3, #34	; 0x22
 8002b7c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8002b80:	f7fe f9aa 	bl	8000ed8 <HAL_GetTick>
 8002b84:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8002b86:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b8a:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002b8e:	e01d      	b.n	8002bcc <HAL_UART_Receive+0x84>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b90:	9600      	str	r6, [sp, #0]
 8002b92:	463b      	mov	r3, r7
 8002b94:	2200      	movs	r2, #0
 8002b96:	2120      	movs	r1, #32
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f7ff ff23 	bl	80029e4 <UART_WaitOnFlagUntilTimeout>
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d140      	bne.n	8002c24 <HAL_UART_Receive+0xdc>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002ba2:	6923      	ldr	r3, [r4, #16]
 8002ba4:	b933      	cbnz	r3, 8002bb4 <HAL_UART_Receive+0x6c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bae:	f825 3b02 	strh.w	r3, [r5], #2
 8002bb2:	e00b      	b.n	8002bcc <HAL_UART_Receive+0x84>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f825 3b01 	strh.w	r3, [r5], #1
 8002bbe:	e005      	b.n	8002bcc <HAL_UART_Receive+0x84>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bc0:	6823      	ldr	r3, [r4, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bc8:	702b      	strb	r3, [r5, #0]
 8002bca:	3501      	adds	r5, #1
    while (huart->RxXferCount > 0U)
 8002bcc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	b1bb      	cbz	r3, 8002c02 <HAL_UART_Receive+0xba>
      huart->RxXferCount--;
 8002bd2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002bda:	68a3      	ldr	r3, [r4, #8]
 8002bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be0:	d0d6      	beq.n	8002b90 <HAL_UART_Receive+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002be2:	9600      	str	r6, [sp, #0]
 8002be4:	463b      	mov	r3, r7
 8002be6:	2200      	movs	r2, #0
 8002be8:	2120      	movs	r1, #32
 8002bea:	4620      	mov	r0, r4
 8002bec:	f7ff fefa 	bl	80029e4 <UART_WaitOnFlagUntilTimeout>
 8002bf0:	b9d0      	cbnz	r0, 8002c28 <HAL_UART_Receive+0xe0>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002bf2:	6923      	ldr	r3, [r4, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1e3      	bne.n	8002bc0 <HAL_UART_Receive+0x78>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	702b      	strb	r3, [r5, #0]
 8002bfe:	3501      	adds	r5, #1
 8002c00:	e7e4      	b.n	8002bcc <HAL_UART_Receive+0x84>
    huart->RxState = HAL_UART_STATE_READY;
 8002c02:	2320      	movs	r3, #32
 8002c04:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002c0e:	e000      	b.n	8002c12 <HAL_UART_Receive+0xca>
    return HAL_BUSY;
 8002c10:	2002      	movs	r0, #2
}
 8002c12:	b002      	add	sp, #8
 8002c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002c18:	2001      	movs	r0, #1
 8002c1a:	e7fa      	b.n	8002c12 <HAL_UART_Receive+0xca>
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	e7f8      	b.n	8002c12 <HAL_UART_Receive+0xca>
    __HAL_LOCK(huart);
 8002c20:	2002      	movs	r0, #2
 8002c22:	e7f6      	b.n	8002c12 <HAL_UART_Receive+0xca>
          return HAL_TIMEOUT;
 8002c24:	2003      	movs	r0, #3
 8002c26:	e7f4      	b.n	8002c12 <HAL_UART_Receive+0xca>
          return HAL_TIMEOUT;
 8002c28:	2003      	movs	r0, #3
 8002c2a:	e7f2      	b.n	8002c12 <HAL_UART_Receive+0xca>

08002c2c <HAL_UART_TxCpltCallback>:
}
 8002c2c:	4770      	bx	lr

08002c2e <UART_EndTransmit_IT>:
{
 8002c2e:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c30:	6801      	ldr	r1, [r0, #0]
 8002c32:	68cb      	ldr	r3, [r1, #12]
 8002c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c38:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002c3a:	2320      	movs	r3, #32
 8002c3c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002c40:	f7ff fff4 	bl	8002c2c <HAL_UART_TxCpltCallback>
}
 8002c44:	2000      	movs	r0, #0
 8002c46:	bd08      	pop	{r3, pc}

08002c48 <HAL_UART_RxCpltCallback>:
}
 8002c48:	4770      	bx	lr

08002c4a <UART_Receive_IT>:
{
 8002c4a:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c4c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b22      	cmp	r3, #34	; 0x22
 8002c54:	d145      	bne.n	8002ce2 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c56:	6883      	ldr	r3, [r0, #8]
 8002c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5c:	d00e      	beq.n	8002c7c <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c5e:	6903      	ldr	r3, [r0, #16]
 8002c60:	bb03      	cbnz	r3, 8002ca4 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c62:	6803      	ldr	r3, [r0, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002c68:	1c59      	adds	r1, r3, #1
 8002c6a:	6281      	str	r1, [r0, #40]	; 0x28
 8002c6c:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8002c6e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002c76:	b1f3      	cbz	r3, 8002cb6 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8002c78:	2000      	movs	r0, #0
 8002c7a:	e033      	b.n	8002ce4 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002c7c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c7e:	6903      	ldr	r3, [r0, #16]
 8002c80:	b943      	cbnz	r3, 8002c94 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c82:	6803      	ldr	r3, [r0, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c8a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8002c8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002c8e:	3302      	adds	r3, #2
 8002c90:	6283      	str	r3, [r0, #40]	; 0x28
 8002c92:	e7ec      	b.n	8002c6e <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002c94:	6803      	ldr	r3, [r0, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8002c9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	6283      	str	r3, [r0, #40]	; 0x28
 8002ca2:	e7e4      	b.n	8002c6e <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ca4:	6803      	ldr	r3, [r0, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002caa:	1c51      	adds	r1, r2, #1
 8002cac:	6281      	str	r1, [r0, #40]	; 0x28
 8002cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cb2:	7013      	strb	r3, [r2, #0]
 8002cb4:	e7db      	b.n	8002c6e <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cb6:	6802      	ldr	r2, [r0, #0]
 8002cb8:	68d3      	ldr	r3, [r2, #12]
 8002cba:	f023 0320 	bic.w	r3, r3, #32
 8002cbe:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cc0:	6802      	ldr	r2, [r0, #0]
 8002cc2:	68d3      	ldr	r3, [r2, #12]
 8002cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cc8:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cca:	6802      	ldr	r2, [r0, #0]
 8002ccc:	6953      	ldr	r3, [r2, #20]
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002cd4:	2320      	movs	r3, #32
 8002cd6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002cda:	f7ff ffb5 	bl	8002c48 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002cde:	2000      	movs	r0, #0
 8002ce0:	e000      	b.n	8002ce4 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8002ce2:	2002      	movs	r0, #2
}
 8002ce4:	bd08      	pop	{r3, pc}

08002ce6 <HAL_UART_ErrorCallback>:
}
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_UART_IRQHandler>:
{
 8002ce8:	b510      	push	{r4, lr}
 8002cea:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cec:	6802      	ldr	r2, [r0, #0]
 8002cee:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cf0:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cf2:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8002cf4:	f013 000f 	ands.w	r0, r3, #15
 8002cf8:	d105      	bne.n	8002d06 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cfa:	f013 0f20 	tst.w	r3, #32
 8002cfe:	d002      	beq.n	8002d06 <HAL_UART_IRQHandler+0x1e>
 8002d00:	f011 0f20 	tst.w	r1, #32
 8002d04:	d153      	bne.n	8002dae <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d067      	beq.n	8002dda <HAL_UART_IRQHandler+0xf2>
 8002d0a:	f012 0201 	ands.w	r2, r2, #1
 8002d0e:	d102      	bne.n	8002d16 <HAL_UART_IRQHandler+0x2e>
 8002d10:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002d14:	d061      	beq.n	8002dda <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d16:	f013 0f01 	tst.w	r3, #1
 8002d1a:	d006      	beq.n	8002d2a <HAL_UART_IRQHandler+0x42>
 8002d1c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002d20:	d003      	beq.n	8002d2a <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d22:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002d24:	f040 0001 	orr.w	r0, r0, #1
 8002d28:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d2a:	f013 0f04 	tst.w	r3, #4
 8002d2e:	d004      	beq.n	8002d3a <HAL_UART_IRQHandler+0x52>
 8002d30:	b11a      	cbz	r2, 8002d3a <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d32:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002d34:	f040 0002 	orr.w	r0, r0, #2
 8002d38:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d3a:	f013 0f02 	tst.w	r3, #2
 8002d3e:	d004      	beq.n	8002d4a <HAL_UART_IRQHandler+0x62>
 8002d40:	b11a      	cbz	r2, 8002d4a <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d42:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002d44:	f040 0004 	orr.w	r0, r0, #4
 8002d48:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d4a:	f013 0f08 	tst.w	r3, #8
 8002d4e:	d004      	beq.n	8002d5a <HAL_UART_IRQHandler+0x72>
 8002d50:	b11a      	cbz	r2, 8002d5a <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d52:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002d54:	f042 0208 	orr.w	r2, r2, #8
 8002d58:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d5a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002d5c:	2a00      	cmp	r2, #0
 8002d5e:	d048      	beq.n	8002df2 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d60:	f013 0f20 	tst.w	r3, #32
 8002d64:	d002      	beq.n	8002d6c <HAL_UART_IRQHandler+0x84>
 8002d66:	f011 0f20 	tst.w	r1, #32
 8002d6a:	d124      	bne.n	8002db6 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d74:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002d76:	f012 0f08 	tst.w	r2, #8
 8002d7a:	d100      	bne.n	8002d7e <HAL_UART_IRQHandler+0x96>
 8002d7c:	b33b      	cbz	r3, 8002dce <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f7ff fc1e 	bl	80025c0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002d8c:	d01b      	beq.n	8002dc6 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d94:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002d96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d98:	b18b      	cbz	r3, 8002dbe <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d9a:	4a1a      	ldr	r2, [pc, #104]	; (8002e04 <HAL_UART_IRQHandler+0x11c>)
 8002d9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d9e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002da0:	f7fe fb24 	bl	80013ec <HAL_DMA_Abort_IT>
 8002da4:	b328      	cbz	r0, 8002df2 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002da6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002da8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002daa:	4798      	blx	r3
 8002dac:	e021      	b.n	8002df2 <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8002dae:	4620      	mov	r0, r4
 8002db0:	f7ff ff4b 	bl	8002c4a <UART_Receive_IT>
      return;
 8002db4:	e01d      	b.n	8002df2 <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8002db6:	4620      	mov	r0, r4
 8002db8:	f7ff ff47 	bl	8002c4a <UART_Receive_IT>
 8002dbc:	e7d6      	b.n	8002d6c <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f7ff ff91 	bl	8002ce6 <HAL_UART_ErrorCallback>
 8002dc4:	e015      	b.n	8002df2 <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f7ff ff8d 	bl	8002ce6 <HAL_UART_ErrorCallback>
 8002dcc:	e011      	b.n	8002df2 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f7ff ff89 	bl	8002ce6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002dd8:	e00b      	b.n	8002df2 <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dda:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002dde:	d002      	beq.n	8002de6 <HAL_UART_IRQHandler+0xfe>
 8002de0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002de4:	d106      	bne.n	8002df4 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002de6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002dea:	d002      	beq.n	8002df2 <HAL_UART_IRQHandler+0x10a>
 8002dec:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002df0:	d104      	bne.n	8002dfc <HAL_UART_IRQHandler+0x114>
}
 8002df2:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8002df4:	4620      	mov	r0, r4
 8002df6:	f7ff fbf1 	bl	80025dc <UART_Transmit_IT>
    return;
 8002dfa:	e7fa      	b.n	8002df2 <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	f7ff ff16 	bl	8002c2e <UART_EndTransmit_IT>
    return;
 8002e02:	e7f6      	b.n	8002df2 <HAL_UART_IRQHandler+0x10a>
 8002e04:	08002e09 	.word	0x08002e09

08002e08 <UART_DMAAbortOnError>:
{
 8002e08:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e10:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002e12:	f7ff ff68 	bl	8002ce6 <HAL_UART_ErrorCallback>
}
 8002e16:	bd08      	pop	{r3, pc}

08002e18 <CRC8>:
	233, 183, 85, 11, 136, 214, 52, 106, 43, 117, 151, 201, 74, 20, 246, 168,
	116, 42, 200, 150, 21, 75, 169, 247, 182, 232, 10, 84, 215, 137, 107, 53
    };

uint8_t CRC8(uint8_t* data, uint8_t len)
    {
 8002e18:	b430      	push	{r4, r5}
 8002e1a:	4605      	mov	r5, r0

    uint8_t crc = 0;

    for(uint8_t i=0; i<len; i++)
 8002e1c:	2300      	movs	r3, #0
    uint8_t crc = 0;
 8002e1e:	4618      	mov	r0, r3
    for(uint8_t i=0; i<len; i++)
 8002e20:	e005      	b.n	8002e2e <CRC8+0x16>
	{
	crc = CRC8_Table[crc^ data[i]];
 8002e22:	5cea      	ldrb	r2, [r5, r3]
 8002e24:	4042      	eors	r2, r0
 8002e26:	4c04      	ldr	r4, [pc, #16]	; (8002e38 <CRC8+0x20>)
 8002e28:	5ca0      	ldrb	r0, [r4, r2]
    for(uint8_t i=0; i<len; i++)
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	428b      	cmp	r3, r1
 8002e30:	d3f7      	bcc.n	8002e22 <CRC8+0xa>
	}

    return crc;
    }
 8002e32:	bc30      	pop	{r4, r5}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	2000000c 	.word	0x2000000c

08002e3c <BL_UART_Send_Char>:



void BL_UART_Send_Char(char data)
    {
    BL_UART->Instance->DR = data;
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <BL_UART_Send_Char+0x14>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	6813      	ldr	r3, [r2, #0]
 8002e42:	6058      	str	r0, [r3, #4]
    while (__HAL_UART_GET_FLAG(BL_UART,UART_FLAG_TC) == 0);
 8002e44:	6813      	ldr	r3, [r2, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e4c:	d0fa      	beq.n	8002e44 <BL_UART_Send_Char+0x8>
    }
 8002e4e:	4770      	bx	lr
 8002e50:	20000008 	.word	0x20000008

08002e54 <Write_Callback>:
	}

    }

void Write_Callback(uint32_t address, const uint8_t *data, uint8_t len)
    {
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    uint8_t status = 1;

    if (address >= USER_FLASH_START_ADDRESS
 8002e56:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <Write_Callback+0x70>)
 8002e58:	4298      	cmp	r0, r3
 8002e5a:	d909      	bls.n	8002e70 <Write_Callback+0x1c>
 8002e5c:	4604      	mov	r4, r0
 8002e5e:	460e      	mov	r6, r1
 8002e60:	4617      	mov	r7, r2
	    && address <= USER_FLASH_END_ADDRESS - len)
 8002e62:	f503 23ea 	add.w	r3, r3, #479232	; 0x75000
 8002e66:	f203 3301 	addw	r3, r3, #769	; 0x301
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	4283      	cmp	r3, r0
 8002e6e:	d203      	bcs.n	8002e78 <Write_Callback+0x24>
	    BL_UART_Send_Char(CMD_NACK);
	    }
	}
    else
	{
	BL_UART_Send_Char(CMD_NACK);
 8002e70:	2091      	movs	r0, #145	; 0x91
 8002e72:	f7ff ffe3 	bl	8002e3c <BL_UART_Send_Char>
	}

    }
 8002e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_FLASH_Unlock();
 8002e78:	f7fe fcae 	bl	80017d8 <HAL_FLASH_Unlock>
	for (uint8_t i = 0; i < len; i++)
 8002e7c:	2500      	movs	r5, #0
 8002e7e:	42bd      	cmp	r5, r7
 8002e80:	d20f      	bcs.n	8002ea2 <Write_Callback+0x4e>
	    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address,
 8002e82:	7832      	ldrb	r2, [r6, #0]
 8002e84:	2300      	movs	r3, #0
 8002e86:	4621      	mov	r1, r4
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7fe fcf9 	bl	8001880 <HAL_FLASH_Program>
 8002e8e:	b980      	cbnz	r0, 8002eb2 <Write_Callback+0x5e>
		if (*(uint8_t*) address != (*data))
 8002e90:	7822      	ldrb	r2, [r4, #0]
 8002e92:	7833      	ldrb	r3, [r6, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d10e      	bne.n	8002eb6 <Write_Callback+0x62>
		address++;
 8002e98:	3401      	adds	r4, #1
		data++;
 8002e9a:	3601      	adds	r6, #1
	for (uint8_t i = 0; i < len; i++)
 8002e9c:	3501      	adds	r5, #1
 8002e9e:	b2ed      	uxtb	r5, r5
 8002ea0:	e7ed      	b.n	8002e7e <Write_Callback+0x2a>
    uint8_t status = 1;
 8002ea2:	2401      	movs	r4, #1
	HAL_FLASH_Lock();
 8002ea4:	f7fe fcb0 	bl	8001808 <HAL_FLASH_Lock>
	if (status)
 8002ea8:	b13c      	cbz	r4, 8002eba <Write_Callback+0x66>
	    BL_UART_Send_Char(CMD_ACK);
 8002eaa:	2090      	movs	r0, #144	; 0x90
 8002eac:	f7ff ffc6 	bl	8002e3c <BL_UART_Send_Char>
 8002eb0:	e7e1      	b.n	8002e76 <Write_Callback+0x22>
		status = 0;
 8002eb2:	2400      	movs	r4, #0
 8002eb4:	e7f6      	b.n	8002ea4 <Write_Callback+0x50>
		    status = 0;
 8002eb6:	2400      	movs	r4, #0
 8002eb8:	e7f4      	b.n	8002ea4 <Write_Callback+0x50>
	    BL_UART_Send_Char(CMD_NACK);
 8002eba:	2091      	movs	r0, #145	; 0x91
 8002ebc:	f7ff ffbe 	bl	8002e3c <BL_UART_Send_Char>
 8002ec0:	e7d9      	b.n	8002e76 <Write_Callback+0x22>
 8002ec2:	bf00      	nop
 8002ec4:	08007fff 	.word	0x08007fff

08002ec8 <Reset_Callback>:
	BL_UART_Send_Char(CMD_NACK);
	}
    }

void Reset_Callback()
    {
 8002ec8:	b508      	push	{r3, lr}
    // reset mcu
    HAL_NVIC_SystemReset();
 8002eca:	f7fe f89b 	bl	8001004 <HAL_NVIC_SystemReset>
    }
 8002ece:	bd08      	pop	{r3, pc}

08002ed0 <Jump_Callback>:
typedef  void (*pFunction)(void);

pFunction Jump_To_App;

void Jump_Callback()
    {
 8002ed0:	b508      	push	{r3, lr}

    uint32_t app_adress = 0;

    BL_UART_Send_Char(CMD_ACK);
 8002ed2:	2090      	movs	r0, #144	; 0x90
 8002ed4:	f7ff ffb2 	bl	8002e3c <BL_UART_Send_Char>

    HAL_DeInit();
 8002ed8:	f7fd ff9c 	bl	8000e14 <HAL_DeInit>

    /* execute the new program */
    app_adress = *(__IO uint32_t*) (USER_FLASH_START_ADDRESS + 4);
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <Jump_Callback+0x20>)
 8002ede:	681b      	ldr	r3, [r3, #0]

    /* Jump to user application */
    Jump_To_App = (pFunction) app_adress;
 8002ee0:	4a04      	ldr	r2, [pc, #16]	; (8002ef4 <Jump_Callback+0x24>)
 8002ee2:	6013      	str	r3, [r2, #0]

    /* Initialize user application's Stack Pointer */
    __set_MSP(*(__IO uint32_t*) USER_FLASH_START_ADDRESS);
 8002ee4:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <Jump_Callback+0x28>)
 8002ee6:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002ee8:	f382 8808 	msr	MSP, r2

    Jump_To_App();
 8002eec:	4798      	blx	r3

    }
 8002eee:	bd08      	pop	{r3, pc}
 8002ef0:	08008004 	.word	0x08008004
 8002ef4:	2000042c 	.word	0x2000042c
 8002ef8:	08008000 	.word	0x08008000

08002efc <BL_Erase_Flash>:
    {

    }

uint8_t BL_Erase_Flash()
    {
 8002efc:	b510      	push	{r4, lr}
 8002efe:	b086      	sub	sp, #24

    uint8_t status = 0;
    uint32_t error = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	9305      	str	r3, [sp, #20]

    FLASH_EraseInitTypeDef flash_erase_handle;

    flash_erase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8002f04:	9300      	str	r3, [sp, #0]
    flash_erase_handle.Banks = FLASH_BANK_1;
 8002f06:	2301      	movs	r3, #1
 8002f08:	9301      	str	r3, [sp, #4]
    flash_erase_handle.Sector = BL_USED_SECTORS;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	9302      	str	r3, [sp, #8]
    flash_erase_handle.NbSectors = 6;
 8002f0e:	2206      	movs	r2, #6
 8002f10:	9203      	str	r2, [sp, #12]
    flash_erase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002f12:	9304      	str	r3, [sp, #16]

    HAL_FLASH_Unlock();
 8002f14:	f7fe fc60 	bl	80017d8 <HAL_FLASH_Unlock>

    if (HAL_FLASHEx_Erase(&flash_erase_handle, &error) == HAL_OK)
 8002f18:	a905      	add	r1, sp, #20
 8002f1a:	4668      	mov	r0, sp
 8002f1c:	f7fe fd8e 	bl	8001a3c <HAL_FLASHEx_Erase>
 8002f20:	b928      	cbnz	r0, 8002f2e <BL_Erase_Flash+0x32>
	{
	status = 1;
 8002f22:	2401      	movs	r4, #1
	}

    HAL_FLASH_Lock();
 8002f24:	f7fe fc70 	bl	8001808 <HAL_FLASH_Lock>

    return status;
    }
 8002f28:	4620      	mov	r0, r4
 8002f2a:	b006      	add	sp, #24
 8002f2c:	bd10      	pop	{r4, pc}
    uint8_t status = 0;
 8002f2e:	2400      	movs	r4, #0
 8002f30:	e7f8      	b.n	8002f24 <BL_Erase_Flash+0x28>

08002f32 <Erase_Callback>:
    {
 8002f32:	b508      	push	{r3, lr}
    if (BL_Erase_Flash())
 8002f34:	f7ff ffe2 	bl	8002efc <BL_Erase_Flash>
 8002f38:	b918      	cbnz	r0, 8002f42 <Erase_Callback+0x10>
	BL_UART_Send_Char(CMD_NACK);
 8002f3a:	2091      	movs	r0, #145	; 0x91
 8002f3c:	f7ff ff7e 	bl	8002e3c <BL_UART_Send_Char>
    }
 8002f40:	bd08      	pop	{r3, pc}
	BL_UART_Send_Char(CMD_ACK);
 8002f42:	2090      	movs	r0, #144	; 0x90
 8002f44:	f7ff ff7a 	bl	8002e3c <BL_UART_Send_Char>
 8002f48:	e7fa      	b.n	8002f40 <Erase_Callback+0xe>
	...

08002f4c <Bootloader>:


void Bootloader()
    {
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	e00e      	b.n	8002f6e <Bootloader+0x22>
			    switch (cmd)
				{

			    case CMD_WRITE:

				write_address = RX_Buffer[1] << 24|
 8002f50:	492c      	ldr	r1, [pc, #176]	; (8003004 <Bootloader+0xb8>)
 8002f52:	784a      	ldrb	r2, [r1, #1]
				                RX_Buffer[2] << 16|
 8002f54:	788b      	ldrb	r3, [r1, #2]
 8002f56:	041b      	lsls	r3, r3, #16
				write_address = RX_Buffer[1] << 24|
 8002f58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
				                RX_Buffer[3] << 8|
 8002f5c:	78ca      	ldrb	r2, [r1, #3]
				                RX_Buffer[2] << 16|
 8002f5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				                RX_Buffer[4] << 0;
 8002f62:	7908      	ldrb	r0, [r1, #4]

				write_len = RX_Buffer[5]; // number of bytes to write

				Write_Callback(write_address, (RX_Buffer + 6),
 8002f64:	794a      	ldrb	r2, [r1, #5]
 8002f66:	3106      	adds	r1, #6
 8002f68:	4318      	orrs	r0, r3
 8002f6a:	f7ff ff73 	bl	8002e54 <Write_Callback>
	memset(RX_Buffer, 0x00, RX_BUFFER_SIZE);
 8002f6e:	4c25      	ldr	r4, [pc, #148]	; (8003004 <Bootloader+0xb8>)
 8002f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f74:	2100      	movs	r1, #0
 8002f76:	4620      	mov	r0, r4
 8002f78:	f000 fae4 	bl	8003544 <memset>
	if (HAL_UART_Receive(BL_UART, RX_Buffer, 1, HAL_MAX_DELAY)
 8002f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f80:	2201      	movs	r2, #1
 8002f82:	4621      	mov	r1, r4
 8002f84:	4820      	ldr	r0, [pc, #128]	; (8003008 <Bootloader+0xbc>)
 8002f86:	6800      	ldr	r0, [r0, #0]
 8002f88:	f7ff fdde 	bl	8002b48 <HAL_UART_Receive>
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	d1ee      	bne.n	8002f6e <Bootloader+0x22>
	    uint8_t sync_char = RX_Buffer[0];
 8002f90:	7823      	ldrb	r3, [r4, #0]
	    if (sync_char == SYNC_CHAR)
 8002f92:	2b24      	cmp	r3, #36	; 0x24
 8002f94:	d1eb      	bne.n	8002f6e <Bootloader+0x22>
		if (HAL_UART_Receive(BL_UART, RX_Buffer, 1, 100) == HAL_OK)
 8002f96:	2364      	movs	r3, #100	; 0x64
 8002f98:	2201      	movs	r2, #1
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	481a      	ldr	r0, [pc, #104]	; (8003008 <Bootloader+0xbc>)
 8002f9e:	6800      	ldr	r0, [r0, #0]
 8002fa0:	f7ff fdd2 	bl	8002b48 <HAL_UART_Receive>
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	d1e2      	bne.n	8002f6e <Bootloader+0x22>
		    uint8_t packet_len = RX_Buffer[0];
 8002fa8:	4621      	mov	r1, r4
 8002faa:	7824      	ldrb	r4, [r4, #0]
		    if (HAL_UART_Receive(BL_UART, RX_Buffer, packet_len,
 8002fac:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8002fb0:	4622      	mov	r2, r4
 8002fb2:	4815      	ldr	r0, [pc, #84]	; (8003008 <Bootloader+0xbc>)
 8002fb4:	6800      	ldr	r0, [r0, #0]
 8002fb6:	f7ff fdc7 	bl	8002b48 <HAL_UART_Receive>
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d1d7      	bne.n	8002f6e <Bootloader+0x22>
			uint8_t cmd = RX_Buffer[0];
 8002fbe:	4811      	ldr	r0, [pc, #68]	; (8003004 <Bootloader+0xb8>)
 8002fc0:	7805      	ldrb	r5, [r0, #0]
			uint8_t crc_recvd = RX_Buffer[packet_len - 1];
 8002fc2:	1e63      	subs	r3, r4, #1
 8002fc4:	5cc6      	ldrb	r6, [r0, r3]
			uint8_t crc_calc = CRC8(RX_Buffer, (packet_len - 1));
 8002fc6:	b2d9      	uxtb	r1, r3
 8002fc8:	f7ff ff26 	bl	8002e18 <CRC8>
			if (crc_calc == crc_recvd)
 8002fcc:	4286      	cmp	r6, r0
 8002fce:	d1ce      	bne.n	8002f6e <Bootloader+0x22>
			    switch (cmd)
 8002fd0:	3d50      	subs	r5, #80	; 0x50
 8002fd2:	2d04      	cmp	r5, #4
 8002fd4:	d8cb      	bhi.n	8002f6e <Bootloader+0x22>
 8002fd6:	a301      	add	r3, pc, #4	; (adr r3, 8002fdc <Bootloader+0x90>)
 8002fd8:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8002fdc:	08002f51 	.word	0x08002f51
 8002fe0:	08002f6f 	.word	0x08002f6f
 8002fe4:	08002ff1 	.word	0x08002ff1
 8002fe8:	08002ff7 	.word	0x08002ff7
 8002fec:	08002ffd 	.word	0x08002ffd

				Read_Callback(read_address, read_len);
				break;

			    case CMD_ERASE:
				Erase_Callback();
 8002ff0:	f7ff ff9f 	bl	8002f32 <Erase_Callback>
				break;
 8002ff4:	e7bb      	b.n	8002f6e <Bootloader+0x22>

			    case CMD_RESET:
				Reset_Callback();
 8002ff6:	f7ff ff67 	bl	8002ec8 <Reset_Callback>
				break;
 8002ffa:	e7b8      	b.n	8002f6e <Bootloader+0x22>

			    case CMD_JUMP:
				Jump_Callback();
 8002ffc:	f7ff ff68 	bl	8002ed0 <Jump_Callback>
				break;
 8003000:	e7b5      	b.n	8002f6e <Bootloader+0x22>
 8003002:	bf00      	nop
 8003004:	2000032c 	.word	0x2000032c
 8003008:	20000008 	.word	0x20000008

0800300c <BL_Main_Loop>:
	}
    }


void BL_Main_Loop()
    {
 800300c:	b508      	push	{r3, lr}

    HAL_Delay(1);
 800300e:	2001      	movs	r0, #1
 8003010:	f7fd ff68 	bl	8000ee4 <HAL_Delay>

    BL_UART_Send_Char(CMD_ACK);
 8003014:	2090      	movs	r0, #144	; 0x90
 8003016:	f7ff ff11 	bl	8002e3c <BL_UART_Send_Char>

    /* wait for ack to enter bootloader char*/
    if (HAL_UART_Receive(BL_UART, RX_Buffer, 1, Bootloader_Timeout) == HAL_OK)
 800301a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800301e:	2201      	movs	r2, #1
 8003020:	4907      	ldr	r1, [pc, #28]	; (8003040 <BL_Main_Loop+0x34>)
 8003022:	4808      	ldr	r0, [pc, #32]	; (8003044 <BL_Main_Loop+0x38>)
 8003024:	6800      	ldr	r0, [r0, #0]
 8003026:	f7ff fd8f 	bl	8002b48 <HAL_UART_Receive>
 800302a:	b930      	cbnz	r0, 800303a <BL_Main_Loop+0x2e>
	{

	if(RX_Buffer[0] == CMD_ACK)
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <BL_Main_Loop+0x34>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b90      	cmp	r3, #144	; 0x90
 8003032:	d000      	beq.n	8003036 <BL_Main_Loop+0x2a>
	}
    else
	{
	Jump_Callback();
	}
    }
 8003034:	bd08      	pop	{r3, pc}
		Bootloader();
 8003036:	f7ff ff89 	bl	8002f4c <Bootloader>
	Jump_Callback();
 800303a:	f7ff ff49 	bl	8002ed0 <Jump_Callback>
    }
 800303e:	e7f9      	b.n	8003034 <BL_Main_Loop+0x28>
 8003040:	2000032c 	.word	0x2000032c
 8003044:	20000008 	.word	0x20000008

08003048 <BL_UART_RX_ISR>:

void BL_UART_RX_ISR()
    {

    }
 8003048:	4770      	bx	lr
	...

0800304c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800304c:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 800304e:	4805      	ldr	r0, [pc, #20]	; (8003064 <MX_CRC_Init+0x18>)
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <MX_CRC_Init+0x1c>)
 8003052:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003054:	f7fd fffe 	bl	8001054 <HAL_CRC_Init>
 8003058:	b900      	cbnz	r0, 800305c <MX_CRC_Init+0x10>
  {
    Error_Handler();
  }

}
 800305a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800305c:	f000 f924 	bl	80032a8 <Error_Handler>
}
 8003060:	e7fb      	b.n	800305a <MX_CRC_Init+0xe>
 8003062:	bf00      	nop
 8003064:	20000430 	.word	0x20000430
 8003068:	40023000 	.word	0x40023000

0800306c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 800306c:	6802      	ldr	r2, [r0, #0]
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_CRC_MspInit+0x28>)
 8003070:	429a      	cmp	r2, r3
 8003072:	d000      	beq.n	8003076 <HAL_CRC_MspInit+0xa>
 8003074:	4770      	bx	lr
{
 8003076:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003078:	2300      	movs	r3, #0
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_CRC_MspInit+0x2c>)
 800307e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003080:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003090:	b002      	add	sp, #8
 8003092:	4770      	bx	lr
 8003094:	40023000 	.word	0x40023000
 8003098:	40023800 	.word	0x40023800

0800309c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800309c:	b500      	push	{lr}
 800309e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030a0:	2100      	movs	r1, #0
 80030a2:	9101      	str	r1, [sp, #4]
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <MX_DMA_Init+0x30>)
 80030a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b4:	9301      	str	r3, [sp, #4]
 80030b6:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80030b8:	460a      	mov	r2, r1
 80030ba:	2010      	movs	r0, #16
 80030bc:	f7fd ff44 	bl	8000f48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80030c0:	2010      	movs	r0, #16
 80030c2:	f7fd ff87 	bl	8000fd4 <HAL_NVIC_EnableIRQ>

}
 80030c6:	b003      	add	sp, #12
 80030c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80030cc:	40023800 	.word	0x40023800

080030d0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80030d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d2:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d4:	2400      	movs	r4, #0
 80030d6:	9405      	str	r4, [sp, #20]
 80030d8:	9406      	str	r4, [sp, #24]
 80030da:	9407      	str	r4, [sp, #28]
 80030dc:	9408      	str	r4, [sp, #32]
 80030de:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030e0:	9400      	str	r4, [sp, #0]
 80030e2:	4b3d      	ldr	r3, [pc, #244]	; (80031d8 <MX_GPIO_Init+0x108>)
 80030e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e6:	f042 0204 	orr.w	r2, r2, #4
 80030ea:	631a      	str	r2, [r3, #48]	; 0x30
 80030ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ee:	f002 0204 	and.w	r2, r2, #4
 80030f2:	9200      	str	r2, [sp, #0]
 80030f4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030f6:	9401      	str	r4, [sp, #4]
 80030f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003102:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003106:	9201      	str	r2, [sp, #4]
 8003108:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800310a:	9402      	str	r4, [sp, #8]
 800310c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
 8003114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003116:	f002 0201 	and.w	r2, r2, #1
 800311a:	9202      	str	r2, [sp, #8]
 800311c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800311e:	9403      	str	r4, [sp, #12]
 8003120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003122:	f042 0202 	orr.w	r2, r2, #2
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
 8003128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312a:	f002 0202 	and.w	r2, r2, #2
 800312e:	9203      	str	r2, [sp, #12]
 8003130:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003132:	9404      	str	r4, [sp, #16]
 8003134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003136:	f042 0208 	orr.w	r2, r2, #8
 800313a:	631a      	str	r2, [r3, #48]	; 0x30
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	9304      	str	r3, [sp, #16]
 8003144:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003146:	4e25      	ldr	r6, [pc, #148]	; (80031dc <MX_GPIO_Init+0x10c>)
 8003148:	4622      	mov	r2, r4
 800314a:	2120      	movs	r1, #32
 800314c:	4630      	mov	r0, r6
 800314e:	f7fe fe2f 	bl	8001db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003152:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003156:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003158:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <MX_GPIO_Init+0x110>)
 800315a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800315e:	4f21      	ldr	r7, [pc, #132]	; (80031e4 <MX_GPIO_Init+0x114>)
 8003160:	a905      	add	r1, sp, #20
 8003162:	4638      	mov	r0, r7
 8003164:	f7fe fcca 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1 
                           PC2 PC3 PC4 PC5 
                           PC6 PC7 PC8 PC9 
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
 8003168:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800316c:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800316e:	2503      	movs	r5, #3
 8003170:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003174:	a905      	add	r1, sp, #20
 8003176:	4638      	mov	r0, r7
 8003178:	f7fe fcc0 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800317c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800317e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003182:	a905      	add	r1, sp, #20
 8003184:	4818      	ldr	r0, [pc, #96]	; (80031e8 <MX_GPIO_Init+0x118>)
 8003186:	f7fe fcb9 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6 
                           PA7 PA8 PA9 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 800318a:	f649 73d3 	movw	r3, #40915	; 0x9fd3
 800318e:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003190:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003194:	a905      	add	r1, sp, #20
 8003196:	4630      	mov	r0, r6
 8003198:	f7fe fcb0 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800319c:	2320      	movs	r3, #32
 800319e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a0:	2301      	movs	r3, #1
 80031a2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80031a8:	a905      	add	r1, sp, #20
 80031aa:	4630      	mov	r0, r6
 80031ac:	f7fe fca6 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB12 PB13 PB14 PB15 
                           PB3 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80031b0:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 80031b4:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031b6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ba:	a905      	add	r1, sp, #20
 80031bc:	480b      	ldr	r0, [pc, #44]	; (80031ec <MX_GPIO_Init+0x11c>)
 80031be:	f7fe fc9d 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031c2:	2304      	movs	r3, #4
 80031c4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031c6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ca:	a905      	add	r1, sp, #20
 80031cc:	4808      	ldr	r0, [pc, #32]	; (80031f0 <MX_GPIO_Init+0x120>)
 80031ce:	f7fe fc95 	bl	8001afc <HAL_GPIO_Init>

}
 80031d2:	b00b      	add	sp, #44	; 0x2c
 80031d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40020000 	.word	0x40020000
 80031e0:	10210000 	.word	0x10210000
 80031e4:	40020800 	.word	0x40020800
 80031e8:	40021c00 	.word	0x40021c00
 80031ec:	40020400 	.word	0x40020400
 80031f0:	40020c00 	.word	0x40020c00

080031f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031f4:	b530      	push	{r4, r5, lr}
 80031f6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031f8:	2230      	movs	r2, #48	; 0x30
 80031fa:	2100      	movs	r1, #0
 80031fc:	a808      	add	r0, sp, #32
 80031fe:	f000 f9a1 	bl	8003544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003202:	2400      	movs	r4, #0
 8003204:	9403      	str	r4, [sp, #12]
 8003206:	9404      	str	r4, [sp, #16]
 8003208:	9405      	str	r4, [sp, #20]
 800320a:	9406      	str	r4, [sp, #24]
 800320c:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	9401      	str	r4, [sp, #4]
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <SystemClock_Config+0x8c>)
 8003212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003214:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003224:	9402      	str	r4, [sp, #8]
 8003226:	4a17      	ldr	r2, [pc, #92]	; (8003284 <SystemClock_Config+0x90>)
 8003228:	6813      	ldr	r3, [r2, #0]
 800322a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800322e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	6813      	ldr	r3, [r2, #0]
 8003236:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800323a:	9302      	str	r3, [sp, #8]
 800323c:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800323e:	2502      	movs	r5, #2
 8003240:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003242:	2301      	movs	r3, #1
 8003244:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003246:	2310      	movs	r3, #16
 8003248:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800324a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800324c:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800324e:	2308      	movs	r3, #8
 8003250:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8003252:	2340      	movs	r3, #64	; 0x40
 8003254:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003256:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003258:	2307      	movs	r3, #7
 800325a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800325c:	a808      	add	r0, sp, #32
 800325e:	f7fe fdc3 	bl	8001de8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003262:	230f      	movs	r3, #15
 8003264:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003266:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8003268:	23a0      	movs	r3, #160	; 0xa0
 800326a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800326c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003270:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003272:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003274:	4621      	mov	r1, r4
 8003276:	a803      	add	r0, sp, #12
 8003278:	f7ff f872 	bl	8002360 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800327c:	b015      	add	sp, #84	; 0x54
 800327e:	bd30      	pop	{r4, r5, pc}
 8003280:	40023800 	.word	0x40023800
 8003284:	40007000 	.word	0x40007000

08003288 <main>:
{
 8003288:	b508      	push	{r3, lr}
  HAL_Init();
 800328a:	f7fd fdff 	bl	8000e8c <HAL_Init>
  SystemClock_Config();
 800328e:	f7ff ffb1 	bl	80031f4 <SystemClock_Config>
  MX_GPIO_Init();
 8003292:	f7ff ff1d 	bl	80030d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003296:	f7ff ff01 	bl	800309c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800329a:	f000 f889 	bl	80033b0 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800329e:	f7ff fed5 	bl	800304c <MX_CRC_Init>
  BL_Main_Loop();
 80032a2:	f7ff feb3 	bl	800300c <BL_Main_Loop>
 80032a6:	e7fe      	b.n	80032a6 <main+0x1e>

080032a8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80032a8:	4770      	bx	lr

080032aa <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80032aa:	4770      	bx	lr

080032ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032ac:	b500      	push	{lr}
 80032ae:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b0:	2100      	movs	r1, #0
 80032b2:	9100      	str	r1, [sp, #0]
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <HAL_MspInit+0x3c>)
 80032b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44
 80032be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032c0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80032c4:	9200      	str	r2, [sp, #0]
 80032c6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032c8:	9101      	str	r1, [sp, #4]
 80032ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d8:	9301      	str	r3, [sp, #4]
 80032da:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80032dc:	2007      	movs	r0, #7
 80032de:	f7fd fe15 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032e2:	b003      	add	sp, #12
 80032e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80032e8:	40023800 	.word	0x40023800

080032ec <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032ec:	4770      	bx	lr

080032ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ee:	e7fe      	b.n	80032ee <HardFault_Handler>

080032f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f0:	e7fe      	b.n	80032f0 <MemManage_Handler>

080032f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032f2:	e7fe      	b.n	80032f2 <BusFault_Handler>

080032f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032f4:	e7fe      	b.n	80032f4 <UsageFault_Handler>

080032f6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032f6:	4770      	bx	lr

080032f8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032f8:	4770      	bx	lr

080032fa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032fa:	4770      	bx	lr

080032fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032fe:	f7fd fddf 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003302:	bd08      	pop	{r3, pc}

08003304 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003304:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003306:	4802      	ldr	r0, [pc, #8]	; (8003310 <DMA1_Stream5_IRQHandler+0xc>)
 8003308:	f7fe f884 	bl	8001414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800330c:	bd08      	pop	{r3, pc}
 800330e:	bf00      	nop
 8003310:	20000438 	.word	0x20000438

08003314 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003314:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003316:	4803      	ldr	r0, [pc, #12]	; (8003324 <USART2_IRQHandler+0x10>)
 8003318:	f7ff fce6 	bl	8002ce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  BL_UART_RX_ISR();
 800331c:	f7ff fe94 	bl	8003048 <BL_UART_RX_ISR>
  /* USER CODE END USART2_IRQn 1 */
}
 8003320:	bd08      	pop	{r3, pc}
 8003322:	bf00      	nop
 8003324:	20000498 	.word	0x20000498

08003328 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003328:	b508      	push	{r3, lr}
 800332a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800332c:	4a0b      	ldr	r2, [pc, #44]	; (800335c <_sbrk+0x34>)
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	b142      	cbz	r2, 8003344 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8003332:	4a0a      	ldr	r2, [pc, #40]	; (800335c <_sbrk+0x34>)
 8003334:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003336:	4403      	add	r3, r0
 8003338:	466a      	mov	r2, sp
 800333a:	4293      	cmp	r3, r2
 800333c:	d806      	bhi.n	800334c <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800333e:	4a07      	ldr	r2, [pc, #28]	; (800335c <_sbrk+0x34>)
 8003340:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8003342:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003344:	4a05      	ldr	r2, [pc, #20]	; (800335c <_sbrk+0x34>)
 8003346:	4906      	ldr	r1, [pc, #24]	; (8003360 <_sbrk+0x38>)
 8003348:	6011      	str	r1, [r2, #0]
 800334a:	e7f2      	b.n	8003332 <_sbrk+0xa>
		errno = ENOMEM;
 800334c:	f000 f8d0 	bl	80034f0 <__errno>
 8003350:	230c      	movs	r3, #12
 8003352:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003358:	e7f3      	b.n	8003342 <_sbrk+0x1a>
 800335a:	bf00      	nop
 800335c:	200002fc 	.word	0x200002fc
 8003360:	200004e0 	.word	0x200004e0

08003364 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003364:	490f      	ldr	r1, [pc, #60]	; (80033a4 <SystemInit+0x40>)
 8003366:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800336a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800336e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <SystemInit+0x44>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800337c:	2000      	movs	r0, #0
 800337e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003386:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800338a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800338c:	4a07      	ldr	r2, [pc, #28]	; (80033ac <SystemInit+0x48>)
 800338e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003396:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003398:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800339a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800339e:	608b      	str	r3, [r1, #8]
#endif
}
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	e000ed00 	.word	0xe000ed00
 80033a8:	40023800 	.word	0x40023800
 80033ac:	24003010 	.word	0x24003010

080033b0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80033b0:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80033b2:	480a      	ldr	r0, [pc, #40]	; (80033dc <MX_USART2_UART_Init+0x2c>)
 80033b4:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <MX_USART2_UART_Init+0x30>)
 80033b6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 38400;
 80033b8:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80033bc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033be:	2300      	movs	r3, #0
 80033c0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033c2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033c4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033c6:	220c      	movs	r2, #12
 80033c8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ca:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033cc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033ce:	f7ff fb3b 	bl	8002a48 <HAL_UART_Init>
 80033d2:	b900      	cbnz	r0, 80033d6 <MX_USART2_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 80033d4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80033d6:	f7ff ff67 	bl	80032a8 <Error_Handler>
}
 80033da:	e7fb      	b.n	80033d4 <MX_USART2_UART_Init+0x24>
 80033dc:	20000498 	.word	0x20000498
 80033e0:	40004400 	.word	0x40004400

080033e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033e4:	b530      	push	{r4, r5, lr}
 80033e6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	2300      	movs	r3, #0
 80033ea:	9303      	str	r3, [sp, #12]
 80033ec:	9304      	str	r3, [sp, #16]
 80033ee:	9305      	str	r3, [sp, #20]
 80033f0:	9306      	str	r3, [sp, #24]
 80033f2:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 80033f4:	6802      	ldr	r2, [r0, #0]
 80033f6:	4b25      	ldr	r3, [pc, #148]	; (800348c <HAL_UART_MspInit+0xa8>)
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80033fc:	b009      	add	sp, #36	; 0x24
 80033fe:	bd30      	pop	{r4, r5, pc}
 8003400:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 8003402:	2500      	movs	r5, #0
 8003404:	9501      	str	r5, [sp, #4]
 8003406:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800340a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
 8003412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003414:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003418:	9201      	str	r2, [sp, #4]
 800341a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341c:	9502      	str	r5, [sp, #8]
 800341e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003420:	f042 0201 	orr.w	r2, r2, #1
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	9302      	str	r3, [sp, #8]
 800342e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003430:	230c      	movs	r3, #12
 8003432:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003438:	2307      	movs	r3, #7
 800343a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343c:	a903      	add	r1, sp, #12
 800343e:	4814      	ldr	r0, [pc, #80]	; (8003490 <HAL_UART_MspInit+0xac>)
 8003440:	f7fe fb5c 	bl	8001afc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003444:	4813      	ldr	r0, [pc, #76]	; (8003494 <HAL_UART_MspInit+0xb0>)
 8003446:	4b14      	ldr	r3, [pc, #80]	; (8003498 <HAL_UART_MspInit+0xb4>)
 8003448:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800344a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800344e:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003450:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003452:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003458:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800345a:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800345c:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800345e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003462:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003464:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003466:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003468:	f7fd fe78 	bl	800115c <HAL_DMA_Init>
 800346c:	b958      	cbnz	r0, 8003486 <HAL_UART_MspInit+0xa2>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_UART_MspInit+0xb0>)
 8003470:	6363      	str	r3, [r4, #52]	; 0x34
 8003472:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003474:	2200      	movs	r2, #0
 8003476:	4611      	mov	r1, r2
 8003478:	2026      	movs	r0, #38	; 0x26
 800347a:	f7fd fd65 	bl	8000f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800347e:	2026      	movs	r0, #38	; 0x26
 8003480:	f7fd fda8 	bl	8000fd4 <HAL_NVIC_EnableIRQ>
}
 8003484:	e7ba      	b.n	80033fc <HAL_UART_MspInit+0x18>
      Error_Handler();
 8003486:	f7ff ff0f 	bl	80032a8 <Error_Handler>
 800348a:	e7f0      	b.n	800346e <HAL_UART_MspInit+0x8a>
 800348c:	40004400 	.word	0x40004400
 8003490:	40020000 	.word	0x40020000
 8003494:	20000438 	.word	0x20000438
 8003498:	40026088 	.word	0x40026088

0800349c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800349c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034a2:	e003      	b.n	80034ac <LoopCopyDataInit>

080034a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034aa:	3104      	adds	r1, #4

080034ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034ac:	480b      	ldr	r0, [pc, #44]	; (80034dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034ae:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034b4:	d3f6      	bcc.n	80034a4 <CopyDataInit>
  ldr  r2, =_sbss
 80034b6:	4a0b      	ldr	r2, [pc, #44]	; (80034e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034b8:	e002      	b.n	80034c0 <LoopFillZerobss>

080034ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034bc:	f842 3b04 	str.w	r3, [r2], #4

080034c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034c4:	d3f9      	bcc.n	80034ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034c6:	f7ff ff4d 	bl	8003364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034ca:	f000 f817 	bl	80034fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ce:	f7ff fedb 	bl	8003288 <main>
  bx  lr    
 80034d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034d4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80034d8:	080053e8 	.word	0x080053e8
  ldr  r0, =_sdata
 80034dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80034e0:	200002e0 	.word	0x200002e0
  ldr  r2, =_sbss
 80034e4:	200002e0 	.word	0x200002e0
  ldr  r3, = _ebss
 80034e8:	200004dc 	.word	0x200004dc

080034ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034ec:	e7fe      	b.n	80034ec <ADC_IRQHandler>
	...

080034f0 <__errno>:
 80034f0:	4b01      	ldr	r3, [pc, #4]	; (80034f8 <__errno+0x8>)
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000110 	.word	0x20000110

080034fc <__libc_init_array>:
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	4e0d      	ldr	r6, [pc, #52]	; (8003534 <__libc_init_array+0x38>)
 8003500:	4c0d      	ldr	r4, [pc, #52]	; (8003538 <__libc_init_array+0x3c>)
 8003502:	1ba4      	subs	r4, r4, r6
 8003504:	10a4      	asrs	r4, r4, #2
 8003506:	2500      	movs	r5, #0
 8003508:	42a5      	cmp	r5, r4
 800350a:	d109      	bne.n	8003520 <__libc_init_array+0x24>
 800350c:	4e0b      	ldr	r6, [pc, #44]	; (800353c <__libc_init_array+0x40>)
 800350e:	4c0c      	ldr	r4, [pc, #48]	; (8003540 <__libc_init_array+0x44>)
 8003510:	f001 fd44 	bl	8004f9c <_init>
 8003514:	1ba4      	subs	r4, r4, r6
 8003516:	10a4      	asrs	r4, r4, #2
 8003518:	2500      	movs	r5, #0
 800351a:	42a5      	cmp	r5, r4
 800351c:	d105      	bne.n	800352a <__libc_init_array+0x2e>
 800351e:	bd70      	pop	{r4, r5, r6, pc}
 8003520:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003524:	4798      	blx	r3
 8003526:	3501      	adds	r5, #1
 8003528:	e7ee      	b.n	8003508 <__libc_init_array+0xc>
 800352a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800352e:	4798      	blx	r3
 8003530:	3501      	adds	r5, #1
 8003532:	e7f2      	b.n	800351a <__libc_init_array+0x1e>
 8003534:	080053e0 	.word	0x080053e0
 8003538:	080053e0 	.word	0x080053e0
 800353c:	080053e0 	.word	0x080053e0
 8003540:	080053e4 	.word	0x080053e4

08003544 <memset>:
 8003544:	4402      	add	r2, r0
 8003546:	4603      	mov	r3, r0
 8003548:	4293      	cmp	r3, r2
 800354a:	d100      	bne.n	800354e <memset+0xa>
 800354c:	4770      	bx	lr
 800354e:	f803 1b01 	strb.w	r1, [r3], #1
 8003552:	e7f9      	b.n	8003548 <memset+0x4>

08003554 <__cvt>:
 8003554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003558:	ec55 4b10 	vmov	r4, r5, d0
 800355c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800355e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003562:	2d00      	cmp	r5, #0
 8003564:	460e      	mov	r6, r1
 8003566:	4691      	mov	r9, r2
 8003568:	4619      	mov	r1, r3
 800356a:	bfb8      	it	lt
 800356c:	4622      	movlt	r2, r4
 800356e:	462b      	mov	r3, r5
 8003570:	f027 0720 	bic.w	r7, r7, #32
 8003574:	bfbb      	ittet	lt
 8003576:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800357a:	461d      	movlt	r5, r3
 800357c:	2300      	movge	r3, #0
 800357e:	232d      	movlt	r3, #45	; 0x2d
 8003580:	bfb8      	it	lt
 8003582:	4614      	movlt	r4, r2
 8003584:	2f46      	cmp	r7, #70	; 0x46
 8003586:	700b      	strb	r3, [r1, #0]
 8003588:	d004      	beq.n	8003594 <__cvt+0x40>
 800358a:	2f45      	cmp	r7, #69	; 0x45
 800358c:	d100      	bne.n	8003590 <__cvt+0x3c>
 800358e:	3601      	adds	r6, #1
 8003590:	2102      	movs	r1, #2
 8003592:	e000      	b.n	8003596 <__cvt+0x42>
 8003594:	2103      	movs	r1, #3
 8003596:	ab03      	add	r3, sp, #12
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	ab02      	add	r3, sp, #8
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	4632      	mov	r2, r6
 80035a0:	4653      	mov	r3, sl
 80035a2:	ec45 4b10 	vmov	d0, r4, r5
 80035a6:	f000 fbab 	bl	8003d00 <_dtoa_r>
 80035aa:	2f47      	cmp	r7, #71	; 0x47
 80035ac:	4680      	mov	r8, r0
 80035ae:	d102      	bne.n	80035b6 <__cvt+0x62>
 80035b0:	f019 0f01 	tst.w	r9, #1
 80035b4:	d026      	beq.n	8003604 <__cvt+0xb0>
 80035b6:	2f46      	cmp	r7, #70	; 0x46
 80035b8:	eb08 0906 	add.w	r9, r8, r6
 80035bc:	d111      	bne.n	80035e2 <__cvt+0x8e>
 80035be:	f898 3000 	ldrb.w	r3, [r8]
 80035c2:	2b30      	cmp	r3, #48	; 0x30
 80035c4:	d10a      	bne.n	80035dc <__cvt+0x88>
 80035c6:	2200      	movs	r2, #0
 80035c8:	2300      	movs	r3, #0
 80035ca:	4620      	mov	r0, r4
 80035cc:	4629      	mov	r1, r5
 80035ce:	f7fd fa2f 	bl	8000a30 <__aeabi_dcmpeq>
 80035d2:	b918      	cbnz	r0, 80035dc <__cvt+0x88>
 80035d4:	f1c6 0601 	rsb	r6, r6, #1
 80035d8:	f8ca 6000 	str.w	r6, [sl]
 80035dc:	f8da 3000 	ldr.w	r3, [sl]
 80035e0:	4499      	add	r9, r3
 80035e2:	2200      	movs	r2, #0
 80035e4:	2300      	movs	r3, #0
 80035e6:	4620      	mov	r0, r4
 80035e8:	4629      	mov	r1, r5
 80035ea:	f7fd fa21 	bl	8000a30 <__aeabi_dcmpeq>
 80035ee:	b938      	cbnz	r0, 8003600 <__cvt+0xac>
 80035f0:	2230      	movs	r2, #48	; 0x30
 80035f2:	9b03      	ldr	r3, [sp, #12]
 80035f4:	454b      	cmp	r3, r9
 80035f6:	d205      	bcs.n	8003604 <__cvt+0xb0>
 80035f8:	1c59      	adds	r1, r3, #1
 80035fa:	9103      	str	r1, [sp, #12]
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	e7f8      	b.n	80035f2 <__cvt+0x9e>
 8003600:	f8cd 900c 	str.w	r9, [sp, #12]
 8003604:	9b03      	ldr	r3, [sp, #12]
 8003606:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003608:	eba3 0308 	sub.w	r3, r3, r8
 800360c:	4640      	mov	r0, r8
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	b004      	add	sp, #16
 8003612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003616 <__exponent>:
 8003616:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003618:	2900      	cmp	r1, #0
 800361a:	4604      	mov	r4, r0
 800361c:	bfba      	itte	lt
 800361e:	4249      	neglt	r1, r1
 8003620:	232d      	movlt	r3, #45	; 0x2d
 8003622:	232b      	movge	r3, #43	; 0x2b
 8003624:	2909      	cmp	r1, #9
 8003626:	f804 2b02 	strb.w	r2, [r4], #2
 800362a:	7043      	strb	r3, [r0, #1]
 800362c:	dd20      	ble.n	8003670 <__exponent+0x5a>
 800362e:	f10d 0307 	add.w	r3, sp, #7
 8003632:	461f      	mov	r7, r3
 8003634:	260a      	movs	r6, #10
 8003636:	fb91 f5f6 	sdiv	r5, r1, r6
 800363a:	fb06 1115 	mls	r1, r6, r5, r1
 800363e:	3130      	adds	r1, #48	; 0x30
 8003640:	2d09      	cmp	r5, #9
 8003642:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003646:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800364a:	4629      	mov	r1, r5
 800364c:	dc09      	bgt.n	8003662 <__exponent+0x4c>
 800364e:	3130      	adds	r1, #48	; 0x30
 8003650:	3b02      	subs	r3, #2
 8003652:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003656:	42bb      	cmp	r3, r7
 8003658:	4622      	mov	r2, r4
 800365a:	d304      	bcc.n	8003666 <__exponent+0x50>
 800365c:	1a10      	subs	r0, r2, r0
 800365e:	b003      	add	sp, #12
 8003660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003662:	4613      	mov	r3, r2
 8003664:	e7e7      	b.n	8003636 <__exponent+0x20>
 8003666:	f813 2b01 	ldrb.w	r2, [r3], #1
 800366a:	f804 2b01 	strb.w	r2, [r4], #1
 800366e:	e7f2      	b.n	8003656 <__exponent+0x40>
 8003670:	2330      	movs	r3, #48	; 0x30
 8003672:	4419      	add	r1, r3
 8003674:	7083      	strb	r3, [r0, #2]
 8003676:	1d02      	adds	r2, r0, #4
 8003678:	70c1      	strb	r1, [r0, #3]
 800367a:	e7ef      	b.n	800365c <__exponent+0x46>

0800367c <_printf_float>:
 800367c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003680:	b08d      	sub	sp, #52	; 0x34
 8003682:	460c      	mov	r4, r1
 8003684:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003688:	4616      	mov	r6, r2
 800368a:	461f      	mov	r7, r3
 800368c:	4605      	mov	r5, r0
 800368e:	f001 f8ef 	bl	8004870 <_localeconv_r>
 8003692:	6803      	ldr	r3, [r0, #0]
 8003694:	9304      	str	r3, [sp, #16]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fc fd9e 	bl	80001d8 <strlen>
 800369c:	2300      	movs	r3, #0
 800369e:	930a      	str	r3, [sp, #40]	; 0x28
 80036a0:	f8d8 3000 	ldr.w	r3, [r8]
 80036a4:	9005      	str	r0, [sp, #20]
 80036a6:	3307      	adds	r3, #7
 80036a8:	f023 0307 	bic.w	r3, r3, #7
 80036ac:	f103 0208 	add.w	r2, r3, #8
 80036b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80036b4:	f8d4 b000 	ldr.w	fp, [r4]
 80036b8:	f8c8 2000 	str.w	r2, [r8]
 80036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80036c4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80036c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80036cc:	9307      	str	r3, [sp, #28]
 80036ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80036d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036d6:	4ba7      	ldr	r3, [pc, #668]	; (8003974 <_printf_float+0x2f8>)
 80036d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036dc:	f7fd f9da 	bl	8000a94 <__aeabi_dcmpun>
 80036e0:	bb70      	cbnz	r0, 8003740 <_printf_float+0xc4>
 80036e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036e6:	4ba3      	ldr	r3, [pc, #652]	; (8003974 <_printf_float+0x2f8>)
 80036e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036ec:	f7fd f9b4 	bl	8000a58 <__aeabi_dcmple>
 80036f0:	bb30      	cbnz	r0, 8003740 <_printf_float+0xc4>
 80036f2:	2200      	movs	r2, #0
 80036f4:	2300      	movs	r3, #0
 80036f6:	4640      	mov	r0, r8
 80036f8:	4649      	mov	r1, r9
 80036fa:	f7fd f9a3 	bl	8000a44 <__aeabi_dcmplt>
 80036fe:	b110      	cbz	r0, 8003706 <_printf_float+0x8a>
 8003700:	232d      	movs	r3, #45	; 0x2d
 8003702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003706:	4a9c      	ldr	r2, [pc, #624]	; (8003978 <_printf_float+0x2fc>)
 8003708:	4b9c      	ldr	r3, [pc, #624]	; (800397c <_printf_float+0x300>)
 800370a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800370e:	bf8c      	ite	hi
 8003710:	4690      	movhi	r8, r2
 8003712:	4698      	movls	r8, r3
 8003714:	2303      	movs	r3, #3
 8003716:	f02b 0204 	bic.w	r2, fp, #4
 800371a:	6123      	str	r3, [r4, #16]
 800371c:	6022      	str	r2, [r4, #0]
 800371e:	f04f 0900 	mov.w	r9, #0
 8003722:	9700      	str	r7, [sp, #0]
 8003724:	4633      	mov	r3, r6
 8003726:	aa0b      	add	r2, sp, #44	; 0x2c
 8003728:	4621      	mov	r1, r4
 800372a:	4628      	mov	r0, r5
 800372c:	f000 f9e6 	bl	8003afc <_printf_common>
 8003730:	3001      	adds	r0, #1
 8003732:	f040 808d 	bne.w	8003850 <_printf_float+0x1d4>
 8003736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800373a:	b00d      	add	sp, #52	; 0x34
 800373c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003740:	4642      	mov	r2, r8
 8003742:	464b      	mov	r3, r9
 8003744:	4640      	mov	r0, r8
 8003746:	4649      	mov	r1, r9
 8003748:	f7fd f9a4 	bl	8000a94 <__aeabi_dcmpun>
 800374c:	b110      	cbz	r0, 8003754 <_printf_float+0xd8>
 800374e:	4a8c      	ldr	r2, [pc, #560]	; (8003980 <_printf_float+0x304>)
 8003750:	4b8c      	ldr	r3, [pc, #560]	; (8003984 <_printf_float+0x308>)
 8003752:	e7da      	b.n	800370a <_printf_float+0x8e>
 8003754:	6861      	ldr	r1, [r4, #4]
 8003756:	1c4b      	adds	r3, r1, #1
 8003758:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800375c:	a80a      	add	r0, sp, #40	; 0x28
 800375e:	d13e      	bne.n	80037de <_printf_float+0x162>
 8003760:	2306      	movs	r3, #6
 8003762:	6063      	str	r3, [r4, #4]
 8003764:	2300      	movs	r3, #0
 8003766:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800376a:	ab09      	add	r3, sp, #36	; 0x24
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	ec49 8b10 	vmov	d0, r8, r9
 8003772:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003776:	6022      	str	r2, [r4, #0]
 8003778:	f8cd a004 	str.w	sl, [sp, #4]
 800377c:	6861      	ldr	r1, [r4, #4]
 800377e:	4628      	mov	r0, r5
 8003780:	f7ff fee8 	bl	8003554 <__cvt>
 8003784:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003788:	2b47      	cmp	r3, #71	; 0x47
 800378a:	4680      	mov	r8, r0
 800378c:	d109      	bne.n	80037a2 <_printf_float+0x126>
 800378e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003790:	1cd8      	adds	r0, r3, #3
 8003792:	db02      	blt.n	800379a <_printf_float+0x11e>
 8003794:	6862      	ldr	r2, [r4, #4]
 8003796:	4293      	cmp	r3, r2
 8003798:	dd47      	ble.n	800382a <_printf_float+0x1ae>
 800379a:	f1aa 0a02 	sub.w	sl, sl, #2
 800379e:	fa5f fa8a 	uxtb.w	sl, sl
 80037a2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80037a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80037a8:	d824      	bhi.n	80037f4 <_printf_float+0x178>
 80037aa:	3901      	subs	r1, #1
 80037ac:	4652      	mov	r2, sl
 80037ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80037b2:	9109      	str	r1, [sp, #36]	; 0x24
 80037b4:	f7ff ff2f 	bl	8003616 <__exponent>
 80037b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037ba:	1813      	adds	r3, r2, r0
 80037bc:	2a01      	cmp	r2, #1
 80037be:	4681      	mov	r9, r0
 80037c0:	6123      	str	r3, [r4, #16]
 80037c2:	dc02      	bgt.n	80037ca <_printf_float+0x14e>
 80037c4:	6822      	ldr	r2, [r4, #0]
 80037c6:	07d1      	lsls	r1, r2, #31
 80037c8:	d501      	bpl.n	80037ce <_printf_float+0x152>
 80037ca:	3301      	adds	r3, #1
 80037cc:	6123      	str	r3, [r4, #16]
 80037ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0a5      	beq.n	8003722 <_printf_float+0xa6>
 80037d6:	232d      	movs	r3, #45	; 0x2d
 80037d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037dc:	e7a1      	b.n	8003722 <_printf_float+0xa6>
 80037de:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80037e2:	f000 8177 	beq.w	8003ad4 <_printf_float+0x458>
 80037e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80037ea:	d1bb      	bne.n	8003764 <_printf_float+0xe8>
 80037ec:	2900      	cmp	r1, #0
 80037ee:	d1b9      	bne.n	8003764 <_printf_float+0xe8>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e7b6      	b.n	8003762 <_printf_float+0xe6>
 80037f4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80037f8:	d119      	bne.n	800382e <_printf_float+0x1b2>
 80037fa:	2900      	cmp	r1, #0
 80037fc:	6863      	ldr	r3, [r4, #4]
 80037fe:	dd0c      	ble.n	800381a <_printf_float+0x19e>
 8003800:	6121      	str	r1, [r4, #16]
 8003802:	b913      	cbnz	r3, 800380a <_printf_float+0x18e>
 8003804:	6822      	ldr	r2, [r4, #0]
 8003806:	07d2      	lsls	r2, r2, #31
 8003808:	d502      	bpl.n	8003810 <_printf_float+0x194>
 800380a:	3301      	adds	r3, #1
 800380c:	440b      	add	r3, r1
 800380e:	6123      	str	r3, [r4, #16]
 8003810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003812:	65a3      	str	r3, [r4, #88]	; 0x58
 8003814:	f04f 0900 	mov.w	r9, #0
 8003818:	e7d9      	b.n	80037ce <_printf_float+0x152>
 800381a:	b913      	cbnz	r3, 8003822 <_printf_float+0x1a6>
 800381c:	6822      	ldr	r2, [r4, #0]
 800381e:	07d0      	lsls	r0, r2, #31
 8003820:	d501      	bpl.n	8003826 <_printf_float+0x1aa>
 8003822:	3302      	adds	r3, #2
 8003824:	e7f3      	b.n	800380e <_printf_float+0x192>
 8003826:	2301      	movs	r3, #1
 8003828:	e7f1      	b.n	800380e <_printf_float+0x192>
 800382a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800382e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003832:	4293      	cmp	r3, r2
 8003834:	db05      	blt.n	8003842 <_printf_float+0x1c6>
 8003836:	6822      	ldr	r2, [r4, #0]
 8003838:	6123      	str	r3, [r4, #16]
 800383a:	07d1      	lsls	r1, r2, #31
 800383c:	d5e8      	bpl.n	8003810 <_printf_float+0x194>
 800383e:	3301      	adds	r3, #1
 8003840:	e7e5      	b.n	800380e <_printf_float+0x192>
 8003842:	2b00      	cmp	r3, #0
 8003844:	bfd4      	ite	le
 8003846:	f1c3 0302 	rsble	r3, r3, #2
 800384a:	2301      	movgt	r3, #1
 800384c:	4413      	add	r3, r2
 800384e:	e7de      	b.n	800380e <_printf_float+0x192>
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	055a      	lsls	r2, r3, #21
 8003854:	d407      	bmi.n	8003866 <_printf_float+0x1ea>
 8003856:	6923      	ldr	r3, [r4, #16]
 8003858:	4642      	mov	r2, r8
 800385a:	4631      	mov	r1, r6
 800385c:	4628      	mov	r0, r5
 800385e:	47b8      	blx	r7
 8003860:	3001      	adds	r0, #1
 8003862:	d12b      	bne.n	80038bc <_printf_float+0x240>
 8003864:	e767      	b.n	8003736 <_printf_float+0xba>
 8003866:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800386a:	f240 80dc 	bls.w	8003a26 <_printf_float+0x3aa>
 800386e:	2200      	movs	r2, #0
 8003870:	2300      	movs	r3, #0
 8003872:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003876:	f7fd f8db 	bl	8000a30 <__aeabi_dcmpeq>
 800387a:	2800      	cmp	r0, #0
 800387c:	d033      	beq.n	80038e6 <_printf_float+0x26a>
 800387e:	2301      	movs	r3, #1
 8003880:	4a41      	ldr	r2, [pc, #260]	; (8003988 <_printf_float+0x30c>)
 8003882:	4631      	mov	r1, r6
 8003884:	4628      	mov	r0, r5
 8003886:	47b8      	blx	r7
 8003888:	3001      	adds	r0, #1
 800388a:	f43f af54 	beq.w	8003736 <_printf_float+0xba>
 800388e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003892:	429a      	cmp	r2, r3
 8003894:	db02      	blt.n	800389c <_printf_float+0x220>
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	07d8      	lsls	r0, r3, #31
 800389a:	d50f      	bpl.n	80038bc <_printf_float+0x240>
 800389c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038a0:	4631      	mov	r1, r6
 80038a2:	4628      	mov	r0, r5
 80038a4:	47b8      	blx	r7
 80038a6:	3001      	adds	r0, #1
 80038a8:	f43f af45 	beq.w	8003736 <_printf_float+0xba>
 80038ac:	f04f 0800 	mov.w	r8, #0
 80038b0:	f104 091a 	add.w	r9, r4, #26
 80038b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038b6:	3b01      	subs	r3, #1
 80038b8:	4543      	cmp	r3, r8
 80038ba:	dc09      	bgt.n	80038d0 <_printf_float+0x254>
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	079b      	lsls	r3, r3, #30
 80038c0:	f100 8103 	bmi.w	8003aca <_printf_float+0x44e>
 80038c4:	68e0      	ldr	r0, [r4, #12]
 80038c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038c8:	4298      	cmp	r0, r3
 80038ca:	bfb8      	it	lt
 80038cc:	4618      	movlt	r0, r3
 80038ce:	e734      	b.n	800373a <_printf_float+0xbe>
 80038d0:	2301      	movs	r3, #1
 80038d2:	464a      	mov	r2, r9
 80038d4:	4631      	mov	r1, r6
 80038d6:	4628      	mov	r0, r5
 80038d8:	47b8      	blx	r7
 80038da:	3001      	adds	r0, #1
 80038dc:	f43f af2b 	beq.w	8003736 <_printf_float+0xba>
 80038e0:	f108 0801 	add.w	r8, r8, #1
 80038e4:	e7e6      	b.n	80038b4 <_printf_float+0x238>
 80038e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	dc2b      	bgt.n	8003944 <_printf_float+0x2c8>
 80038ec:	2301      	movs	r3, #1
 80038ee:	4a26      	ldr	r2, [pc, #152]	; (8003988 <_printf_float+0x30c>)
 80038f0:	4631      	mov	r1, r6
 80038f2:	4628      	mov	r0, r5
 80038f4:	47b8      	blx	r7
 80038f6:	3001      	adds	r0, #1
 80038f8:	f43f af1d 	beq.w	8003736 <_printf_float+0xba>
 80038fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038fe:	b923      	cbnz	r3, 800390a <_printf_float+0x28e>
 8003900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003902:	b913      	cbnz	r3, 800390a <_printf_float+0x28e>
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	07d9      	lsls	r1, r3, #31
 8003908:	d5d8      	bpl.n	80038bc <_printf_float+0x240>
 800390a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800390e:	4631      	mov	r1, r6
 8003910:	4628      	mov	r0, r5
 8003912:	47b8      	blx	r7
 8003914:	3001      	adds	r0, #1
 8003916:	f43f af0e 	beq.w	8003736 <_printf_float+0xba>
 800391a:	f04f 0900 	mov.w	r9, #0
 800391e:	f104 0a1a 	add.w	sl, r4, #26
 8003922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003924:	425b      	negs	r3, r3
 8003926:	454b      	cmp	r3, r9
 8003928:	dc01      	bgt.n	800392e <_printf_float+0x2b2>
 800392a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800392c:	e794      	b.n	8003858 <_printf_float+0x1dc>
 800392e:	2301      	movs	r3, #1
 8003930:	4652      	mov	r2, sl
 8003932:	4631      	mov	r1, r6
 8003934:	4628      	mov	r0, r5
 8003936:	47b8      	blx	r7
 8003938:	3001      	adds	r0, #1
 800393a:	f43f aefc 	beq.w	8003736 <_printf_float+0xba>
 800393e:	f109 0901 	add.w	r9, r9, #1
 8003942:	e7ee      	b.n	8003922 <_printf_float+0x2a6>
 8003944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003946:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003948:	429a      	cmp	r2, r3
 800394a:	bfa8      	it	ge
 800394c:	461a      	movge	r2, r3
 800394e:	2a00      	cmp	r2, #0
 8003950:	4691      	mov	r9, r2
 8003952:	dd07      	ble.n	8003964 <_printf_float+0x2e8>
 8003954:	4613      	mov	r3, r2
 8003956:	4631      	mov	r1, r6
 8003958:	4642      	mov	r2, r8
 800395a:	4628      	mov	r0, r5
 800395c:	47b8      	blx	r7
 800395e:	3001      	adds	r0, #1
 8003960:	f43f aee9 	beq.w	8003736 <_printf_float+0xba>
 8003964:	f104 031a 	add.w	r3, r4, #26
 8003968:	f04f 0b00 	mov.w	fp, #0
 800396c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003970:	9306      	str	r3, [sp, #24]
 8003972:	e015      	b.n	80039a0 <_printf_float+0x324>
 8003974:	7fefffff 	.word	0x7fefffff
 8003978:	080051b4 	.word	0x080051b4
 800397c:	080051b0 	.word	0x080051b0
 8003980:	080051bc 	.word	0x080051bc
 8003984:	080051b8 	.word	0x080051b8
 8003988:	080051c0 	.word	0x080051c0
 800398c:	2301      	movs	r3, #1
 800398e:	9a06      	ldr	r2, [sp, #24]
 8003990:	4631      	mov	r1, r6
 8003992:	4628      	mov	r0, r5
 8003994:	47b8      	blx	r7
 8003996:	3001      	adds	r0, #1
 8003998:	f43f aecd 	beq.w	8003736 <_printf_float+0xba>
 800399c:	f10b 0b01 	add.w	fp, fp, #1
 80039a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80039a4:	ebaa 0309 	sub.w	r3, sl, r9
 80039a8:	455b      	cmp	r3, fp
 80039aa:	dcef      	bgt.n	800398c <_printf_float+0x310>
 80039ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039b0:	429a      	cmp	r2, r3
 80039b2:	44d0      	add	r8, sl
 80039b4:	db15      	blt.n	80039e2 <_printf_float+0x366>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	07da      	lsls	r2, r3, #31
 80039ba:	d412      	bmi.n	80039e2 <_printf_float+0x366>
 80039bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80039c0:	eba3 020a 	sub.w	r2, r3, sl
 80039c4:	eba3 0a01 	sub.w	sl, r3, r1
 80039c8:	4592      	cmp	sl, r2
 80039ca:	bfa8      	it	ge
 80039cc:	4692      	movge	sl, r2
 80039ce:	f1ba 0f00 	cmp.w	sl, #0
 80039d2:	dc0e      	bgt.n	80039f2 <_printf_float+0x376>
 80039d4:	f04f 0800 	mov.w	r8, #0
 80039d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80039dc:	f104 091a 	add.w	r9, r4, #26
 80039e0:	e019      	b.n	8003a16 <_printf_float+0x39a>
 80039e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039e6:	4631      	mov	r1, r6
 80039e8:	4628      	mov	r0, r5
 80039ea:	47b8      	blx	r7
 80039ec:	3001      	adds	r0, #1
 80039ee:	d1e5      	bne.n	80039bc <_printf_float+0x340>
 80039f0:	e6a1      	b.n	8003736 <_printf_float+0xba>
 80039f2:	4653      	mov	r3, sl
 80039f4:	4642      	mov	r2, r8
 80039f6:	4631      	mov	r1, r6
 80039f8:	4628      	mov	r0, r5
 80039fa:	47b8      	blx	r7
 80039fc:	3001      	adds	r0, #1
 80039fe:	d1e9      	bne.n	80039d4 <_printf_float+0x358>
 8003a00:	e699      	b.n	8003736 <_printf_float+0xba>
 8003a02:	2301      	movs	r3, #1
 8003a04:	464a      	mov	r2, r9
 8003a06:	4631      	mov	r1, r6
 8003a08:	4628      	mov	r0, r5
 8003a0a:	47b8      	blx	r7
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	f43f ae92 	beq.w	8003736 <_printf_float+0xba>
 8003a12:	f108 0801 	add.w	r8, r8, #1
 8003a16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	eba3 030a 	sub.w	r3, r3, sl
 8003a20:	4543      	cmp	r3, r8
 8003a22:	dcee      	bgt.n	8003a02 <_printf_float+0x386>
 8003a24:	e74a      	b.n	80038bc <_printf_float+0x240>
 8003a26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a28:	2a01      	cmp	r2, #1
 8003a2a:	dc01      	bgt.n	8003a30 <_printf_float+0x3b4>
 8003a2c:	07db      	lsls	r3, r3, #31
 8003a2e:	d53a      	bpl.n	8003aa6 <_printf_float+0x42a>
 8003a30:	2301      	movs	r3, #1
 8003a32:	4642      	mov	r2, r8
 8003a34:	4631      	mov	r1, r6
 8003a36:	4628      	mov	r0, r5
 8003a38:	47b8      	blx	r7
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	f43f ae7b 	beq.w	8003736 <_printf_float+0xba>
 8003a40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a44:	4631      	mov	r1, r6
 8003a46:	4628      	mov	r0, r5
 8003a48:	47b8      	blx	r7
 8003a4a:	3001      	adds	r0, #1
 8003a4c:	f108 0801 	add.w	r8, r8, #1
 8003a50:	f43f ae71 	beq.w	8003736 <_printf_float+0xba>
 8003a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a56:	2200      	movs	r2, #0
 8003a58:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8003a5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a60:	2300      	movs	r3, #0
 8003a62:	f7fc ffe5 	bl	8000a30 <__aeabi_dcmpeq>
 8003a66:	b9c8      	cbnz	r0, 8003a9c <_printf_float+0x420>
 8003a68:	4653      	mov	r3, sl
 8003a6a:	4642      	mov	r2, r8
 8003a6c:	4631      	mov	r1, r6
 8003a6e:	4628      	mov	r0, r5
 8003a70:	47b8      	blx	r7
 8003a72:	3001      	adds	r0, #1
 8003a74:	d10e      	bne.n	8003a94 <_printf_float+0x418>
 8003a76:	e65e      	b.n	8003736 <_printf_float+0xba>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	4652      	mov	r2, sl
 8003a7c:	4631      	mov	r1, r6
 8003a7e:	4628      	mov	r0, r5
 8003a80:	47b8      	blx	r7
 8003a82:	3001      	adds	r0, #1
 8003a84:	f43f ae57 	beq.w	8003736 <_printf_float+0xba>
 8003a88:	f108 0801 	add.w	r8, r8, #1
 8003a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	4543      	cmp	r3, r8
 8003a92:	dcf1      	bgt.n	8003a78 <_printf_float+0x3fc>
 8003a94:	464b      	mov	r3, r9
 8003a96:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a9a:	e6de      	b.n	800385a <_printf_float+0x1de>
 8003a9c:	f04f 0800 	mov.w	r8, #0
 8003aa0:	f104 0a1a 	add.w	sl, r4, #26
 8003aa4:	e7f2      	b.n	8003a8c <_printf_float+0x410>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e7df      	b.n	8003a6a <_printf_float+0x3ee>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	464a      	mov	r2, r9
 8003aae:	4631      	mov	r1, r6
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	47b8      	blx	r7
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	f43f ae3e 	beq.w	8003736 <_printf_float+0xba>
 8003aba:	f108 0801 	add.w	r8, r8, #1
 8003abe:	68e3      	ldr	r3, [r4, #12]
 8003ac0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	4543      	cmp	r3, r8
 8003ac6:	dcf0      	bgt.n	8003aaa <_printf_float+0x42e>
 8003ac8:	e6fc      	b.n	80038c4 <_printf_float+0x248>
 8003aca:	f04f 0800 	mov.w	r8, #0
 8003ace:	f104 0919 	add.w	r9, r4, #25
 8003ad2:	e7f4      	b.n	8003abe <_printf_float+0x442>
 8003ad4:	2900      	cmp	r1, #0
 8003ad6:	f43f ae8b 	beq.w	80037f0 <_printf_float+0x174>
 8003ada:	2300      	movs	r3, #0
 8003adc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003ae0:	ab09      	add	r3, sp, #36	; 0x24
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	ec49 8b10 	vmov	d0, r8, r9
 8003ae8:	6022      	str	r2, [r4, #0]
 8003aea:	f8cd a004 	str.w	sl, [sp, #4]
 8003aee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003af2:	4628      	mov	r0, r5
 8003af4:	f7ff fd2e 	bl	8003554 <__cvt>
 8003af8:	4680      	mov	r8, r0
 8003afa:	e648      	b.n	800378e <_printf_float+0x112>

08003afc <_printf_common>:
 8003afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b00:	4691      	mov	r9, r2
 8003b02:	461f      	mov	r7, r3
 8003b04:	688a      	ldr	r2, [r1, #8]
 8003b06:	690b      	ldr	r3, [r1, #16]
 8003b08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	bfb8      	it	lt
 8003b10:	4613      	movlt	r3, r2
 8003b12:	f8c9 3000 	str.w	r3, [r9]
 8003b16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b1a:	4606      	mov	r6, r0
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	b112      	cbz	r2, 8003b26 <_printf_common+0x2a>
 8003b20:	3301      	adds	r3, #1
 8003b22:	f8c9 3000 	str.w	r3, [r9]
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	0699      	lsls	r1, r3, #26
 8003b2a:	bf42      	ittt	mi
 8003b2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b30:	3302      	addmi	r3, #2
 8003b32:	f8c9 3000 	strmi.w	r3, [r9]
 8003b36:	6825      	ldr	r5, [r4, #0]
 8003b38:	f015 0506 	ands.w	r5, r5, #6
 8003b3c:	d107      	bne.n	8003b4e <_printf_common+0x52>
 8003b3e:	f104 0a19 	add.w	sl, r4, #25
 8003b42:	68e3      	ldr	r3, [r4, #12]
 8003b44:	f8d9 2000 	ldr.w	r2, [r9]
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	42ab      	cmp	r3, r5
 8003b4c:	dc28      	bgt.n	8003ba0 <_printf_common+0xa4>
 8003b4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b52:	6822      	ldr	r2, [r4, #0]
 8003b54:	3300      	adds	r3, #0
 8003b56:	bf18      	it	ne
 8003b58:	2301      	movne	r3, #1
 8003b5a:	0692      	lsls	r2, r2, #26
 8003b5c:	d42d      	bmi.n	8003bba <_printf_common+0xbe>
 8003b5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b62:	4639      	mov	r1, r7
 8003b64:	4630      	mov	r0, r6
 8003b66:	47c0      	blx	r8
 8003b68:	3001      	adds	r0, #1
 8003b6a:	d020      	beq.n	8003bae <_printf_common+0xb2>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	68e5      	ldr	r5, [r4, #12]
 8003b70:	f8d9 2000 	ldr.w	r2, [r9]
 8003b74:	f003 0306 	and.w	r3, r3, #6
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	bf08      	it	eq
 8003b7c:	1aad      	subeq	r5, r5, r2
 8003b7e:	68a3      	ldr	r3, [r4, #8]
 8003b80:	6922      	ldr	r2, [r4, #16]
 8003b82:	bf0c      	ite	eq
 8003b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b88:	2500      	movne	r5, #0
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	bfc4      	itt	gt
 8003b8e:	1a9b      	subgt	r3, r3, r2
 8003b90:	18ed      	addgt	r5, r5, r3
 8003b92:	f04f 0900 	mov.w	r9, #0
 8003b96:	341a      	adds	r4, #26
 8003b98:	454d      	cmp	r5, r9
 8003b9a:	d11a      	bne.n	8003bd2 <_printf_common+0xd6>
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	e008      	b.n	8003bb2 <_printf_common+0xb6>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	4652      	mov	r2, sl
 8003ba4:	4639      	mov	r1, r7
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	47c0      	blx	r8
 8003baa:	3001      	adds	r0, #1
 8003bac:	d103      	bne.n	8003bb6 <_printf_common+0xba>
 8003bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb6:	3501      	adds	r5, #1
 8003bb8:	e7c3      	b.n	8003b42 <_printf_common+0x46>
 8003bba:	18e1      	adds	r1, r4, r3
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	2030      	movs	r0, #48	; 0x30
 8003bc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bc4:	4422      	add	r2, r4
 8003bc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bce:	3302      	adds	r3, #2
 8003bd0:	e7c5      	b.n	8003b5e <_printf_common+0x62>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	4622      	mov	r2, r4
 8003bd6:	4639      	mov	r1, r7
 8003bd8:	4630      	mov	r0, r6
 8003bda:	47c0      	blx	r8
 8003bdc:	3001      	adds	r0, #1
 8003bde:	d0e6      	beq.n	8003bae <_printf_common+0xb2>
 8003be0:	f109 0901 	add.w	r9, r9, #1
 8003be4:	e7d8      	b.n	8003b98 <_printf_common+0x9c>

08003be6 <quorem>:
 8003be6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bea:	6903      	ldr	r3, [r0, #16]
 8003bec:	690c      	ldr	r4, [r1, #16]
 8003bee:	42a3      	cmp	r3, r4
 8003bf0:	4680      	mov	r8, r0
 8003bf2:	f2c0 8082 	blt.w	8003cfa <quorem+0x114>
 8003bf6:	3c01      	subs	r4, #1
 8003bf8:	f101 0714 	add.w	r7, r1, #20
 8003bfc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003c00:	f100 0614 	add.w	r6, r0, #20
 8003c04:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003c08:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003c0c:	eb06 030c 	add.w	r3, r6, ip
 8003c10:	3501      	adds	r5, #1
 8003c12:	eb07 090c 	add.w	r9, r7, ip
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	fbb0 f5f5 	udiv	r5, r0, r5
 8003c1c:	b395      	cbz	r5, 8003c84 <quorem+0x9e>
 8003c1e:	f04f 0a00 	mov.w	sl, #0
 8003c22:	4638      	mov	r0, r7
 8003c24:	46b6      	mov	lr, r6
 8003c26:	46d3      	mov	fp, sl
 8003c28:	f850 2b04 	ldr.w	r2, [r0], #4
 8003c2c:	b293      	uxth	r3, r2
 8003c2e:	fb05 a303 	mla	r3, r5, r3, sl
 8003c32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	ebab 0303 	sub.w	r3, fp, r3
 8003c3c:	0c12      	lsrs	r2, r2, #16
 8003c3e:	f8de b000 	ldr.w	fp, [lr]
 8003c42:	fb05 a202 	mla	r2, r5, r2, sl
 8003c46:	fa13 f38b 	uxtah	r3, r3, fp
 8003c4a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003c4e:	fa1f fb82 	uxth.w	fp, r2
 8003c52:	f8de 2000 	ldr.w	r2, [lr]
 8003c56:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003c5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c64:	4581      	cmp	r9, r0
 8003c66:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003c6a:	f84e 3b04 	str.w	r3, [lr], #4
 8003c6e:	d2db      	bcs.n	8003c28 <quorem+0x42>
 8003c70:	f856 300c 	ldr.w	r3, [r6, ip]
 8003c74:	b933      	cbnz	r3, 8003c84 <quorem+0x9e>
 8003c76:	9b01      	ldr	r3, [sp, #4]
 8003c78:	3b04      	subs	r3, #4
 8003c7a:	429e      	cmp	r6, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	d330      	bcc.n	8003ce2 <quorem+0xfc>
 8003c80:	f8c8 4010 	str.w	r4, [r8, #16]
 8003c84:	4640      	mov	r0, r8
 8003c86:	f001 f829 	bl	8004cdc <__mcmp>
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	db25      	blt.n	8003cda <quorem+0xf4>
 8003c8e:	3501      	adds	r5, #1
 8003c90:	4630      	mov	r0, r6
 8003c92:	f04f 0c00 	mov.w	ip, #0
 8003c96:	f857 2b04 	ldr.w	r2, [r7], #4
 8003c9a:	f8d0 e000 	ldr.w	lr, [r0]
 8003c9e:	b293      	uxth	r3, r2
 8003ca0:	ebac 0303 	sub.w	r3, ip, r3
 8003ca4:	0c12      	lsrs	r2, r2, #16
 8003ca6:	fa13 f38e 	uxtah	r3, r3, lr
 8003caa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003cae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003cb8:	45b9      	cmp	r9, r7
 8003cba:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003cbe:	f840 3b04 	str.w	r3, [r0], #4
 8003cc2:	d2e8      	bcs.n	8003c96 <quorem+0xb0>
 8003cc4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003cc8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003ccc:	b92a      	cbnz	r2, 8003cda <quorem+0xf4>
 8003cce:	3b04      	subs	r3, #4
 8003cd0:	429e      	cmp	r6, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	d30b      	bcc.n	8003cee <quorem+0x108>
 8003cd6:	f8c8 4010 	str.w	r4, [r8, #16]
 8003cda:	4628      	mov	r0, r5
 8003cdc:	b003      	add	sp, #12
 8003cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	3b04      	subs	r3, #4
 8003ce6:	2a00      	cmp	r2, #0
 8003ce8:	d1ca      	bne.n	8003c80 <quorem+0x9a>
 8003cea:	3c01      	subs	r4, #1
 8003cec:	e7c5      	b.n	8003c7a <quorem+0x94>
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	3b04      	subs	r3, #4
 8003cf2:	2a00      	cmp	r2, #0
 8003cf4:	d1ef      	bne.n	8003cd6 <quorem+0xf0>
 8003cf6:	3c01      	subs	r4, #1
 8003cf8:	e7ea      	b.n	8003cd0 <quorem+0xea>
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	e7ee      	b.n	8003cdc <quorem+0xf6>
	...

08003d00 <_dtoa_r>:
 8003d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d04:	ec57 6b10 	vmov	r6, r7, d0
 8003d08:	b097      	sub	sp, #92	; 0x5c
 8003d0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003d0c:	9106      	str	r1, [sp, #24]
 8003d0e:	4604      	mov	r4, r0
 8003d10:	920b      	str	r2, [sp, #44]	; 0x2c
 8003d12:	9312      	str	r3, [sp, #72]	; 0x48
 8003d14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003d18:	e9cd 6700 	strd	r6, r7, [sp]
 8003d1c:	b93d      	cbnz	r5, 8003d2e <_dtoa_r+0x2e>
 8003d1e:	2010      	movs	r0, #16
 8003d20:	f000 fdb4 	bl	800488c <malloc>
 8003d24:	6260      	str	r0, [r4, #36]	; 0x24
 8003d26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003d2a:	6005      	str	r5, [r0, #0]
 8003d2c:	60c5      	str	r5, [r0, #12]
 8003d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d30:	6819      	ldr	r1, [r3, #0]
 8003d32:	b151      	cbz	r1, 8003d4a <_dtoa_r+0x4a>
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	604a      	str	r2, [r1, #4]
 8003d38:	2301      	movs	r3, #1
 8003d3a:	4093      	lsls	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f000 fdeb 	bl	800491a <_Bfree>
 8003d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	1e3b      	subs	r3, r7, #0
 8003d4c:	bfbb      	ittet	lt
 8003d4e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003d52:	9301      	strlt	r3, [sp, #4]
 8003d54:	2300      	movge	r3, #0
 8003d56:	2201      	movlt	r2, #1
 8003d58:	bfac      	ite	ge
 8003d5a:	f8c8 3000 	strge.w	r3, [r8]
 8003d5e:	f8c8 2000 	strlt.w	r2, [r8]
 8003d62:	4baf      	ldr	r3, [pc, #700]	; (8004020 <_dtoa_r+0x320>)
 8003d64:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003d68:	ea33 0308 	bics.w	r3, r3, r8
 8003d6c:	d114      	bne.n	8003d98 <_dtoa_r+0x98>
 8003d6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d70:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	9b00      	ldr	r3, [sp, #0]
 8003d78:	b923      	cbnz	r3, 8003d84 <_dtoa_r+0x84>
 8003d7a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	f000 8542 	beq.w	8004808 <_dtoa_r+0xb08>
 8003d84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d86:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004034 <_dtoa_r+0x334>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8544 	beq.w	8004818 <_dtoa_r+0xb18>
 8003d90:	f10b 0303 	add.w	r3, fp, #3
 8003d94:	f000 bd3e 	b.w	8004814 <_dtoa_r+0xb14>
 8003d98:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2300      	movs	r3, #0
 8003da0:	4630      	mov	r0, r6
 8003da2:	4639      	mov	r1, r7
 8003da4:	f7fc fe44 	bl	8000a30 <__aeabi_dcmpeq>
 8003da8:	4681      	mov	r9, r0
 8003daa:	b168      	cbz	r0, 8003dc8 <_dtoa_r+0xc8>
 8003dac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003dae:	2301      	movs	r3, #1
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8524 	beq.w	8004802 <_dtoa_r+0xb02>
 8003dba:	4b9a      	ldr	r3, [pc, #616]	; (8004024 <_dtoa_r+0x324>)
 8003dbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003dbe:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	f000 bd28 	b.w	8004818 <_dtoa_r+0xb18>
 8003dc8:	aa14      	add	r2, sp, #80	; 0x50
 8003dca:	a915      	add	r1, sp, #84	; 0x54
 8003dcc:	ec47 6b10 	vmov	d0, r6, r7
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f000 fffa 	bl	8004dca <__d2b>
 8003dd6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003dda:	9004      	str	r0, [sp, #16]
 8003ddc:	2d00      	cmp	r5, #0
 8003dde:	d07c      	beq.n	8003eda <_dtoa_r+0x1da>
 8003de0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003de4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8003de8:	46b2      	mov	sl, r6
 8003dea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8003dee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003df2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8003df6:	2200      	movs	r2, #0
 8003df8:	4b8b      	ldr	r3, [pc, #556]	; (8004028 <_dtoa_r+0x328>)
 8003dfa:	4650      	mov	r0, sl
 8003dfc:	4659      	mov	r1, fp
 8003dfe:	f7fc f9f7 	bl	80001f0 <__aeabi_dsub>
 8003e02:	a381      	add	r3, pc, #516	; (adr r3, 8004008 <_dtoa_r+0x308>)
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	f7fc fbaa 	bl	8000560 <__aeabi_dmul>
 8003e0c:	a380      	add	r3, pc, #512	; (adr r3, 8004010 <_dtoa_r+0x310>)
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	f7fc f9ef 	bl	80001f4 <__adddf3>
 8003e16:	4606      	mov	r6, r0
 8003e18:	4628      	mov	r0, r5
 8003e1a:	460f      	mov	r7, r1
 8003e1c:	f7fc fb36 	bl	800048c <__aeabi_i2d>
 8003e20:	a37d      	add	r3, pc, #500	; (adr r3, 8004018 <_dtoa_r+0x318>)
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	f7fc fb9b 	bl	8000560 <__aeabi_dmul>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4630      	mov	r0, r6
 8003e30:	4639      	mov	r1, r7
 8003e32:	f7fc f9df 	bl	80001f4 <__adddf3>
 8003e36:	4606      	mov	r6, r0
 8003e38:	460f      	mov	r7, r1
 8003e3a:	f7fc fe41 	bl	8000ac0 <__aeabi_d2iz>
 8003e3e:	2200      	movs	r2, #0
 8003e40:	4682      	mov	sl, r0
 8003e42:	2300      	movs	r3, #0
 8003e44:	4630      	mov	r0, r6
 8003e46:	4639      	mov	r1, r7
 8003e48:	f7fc fdfc 	bl	8000a44 <__aeabi_dcmplt>
 8003e4c:	b148      	cbz	r0, 8003e62 <_dtoa_r+0x162>
 8003e4e:	4650      	mov	r0, sl
 8003e50:	f7fc fb1c 	bl	800048c <__aeabi_i2d>
 8003e54:	4632      	mov	r2, r6
 8003e56:	463b      	mov	r3, r7
 8003e58:	f7fc fdea 	bl	8000a30 <__aeabi_dcmpeq>
 8003e5c:	b908      	cbnz	r0, 8003e62 <_dtoa_r+0x162>
 8003e5e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003e62:	f1ba 0f16 	cmp.w	sl, #22
 8003e66:	d859      	bhi.n	8003f1c <_dtoa_r+0x21c>
 8003e68:	4970      	ldr	r1, [pc, #448]	; (800402c <_dtoa_r+0x32c>)
 8003e6a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003e6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e76:	f7fc fe03 	bl	8000a80 <__aeabi_dcmpgt>
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	d050      	beq.n	8003f20 <_dtoa_r+0x220>
 8003e7e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003e82:	2300      	movs	r3, #0
 8003e84:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003e88:	1b5d      	subs	r5, r3, r5
 8003e8a:	f1b5 0801 	subs.w	r8, r5, #1
 8003e8e:	bf49      	itett	mi
 8003e90:	f1c5 0301 	rsbmi	r3, r5, #1
 8003e94:	2300      	movpl	r3, #0
 8003e96:	9305      	strmi	r3, [sp, #20]
 8003e98:	f04f 0800 	movmi.w	r8, #0
 8003e9c:	bf58      	it	pl
 8003e9e:	9305      	strpl	r3, [sp, #20]
 8003ea0:	f1ba 0f00 	cmp.w	sl, #0
 8003ea4:	db3e      	blt.n	8003f24 <_dtoa_r+0x224>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	44d0      	add	r8, sl
 8003eaa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003eae:	9307      	str	r3, [sp, #28]
 8003eb0:	9b06      	ldr	r3, [sp, #24]
 8003eb2:	2b09      	cmp	r3, #9
 8003eb4:	f200 8090 	bhi.w	8003fd8 <_dtoa_r+0x2d8>
 8003eb8:	2b05      	cmp	r3, #5
 8003eba:	bfc4      	itt	gt
 8003ebc:	3b04      	subgt	r3, #4
 8003ebe:	9306      	strgt	r3, [sp, #24]
 8003ec0:	9b06      	ldr	r3, [sp, #24]
 8003ec2:	f1a3 0302 	sub.w	r3, r3, #2
 8003ec6:	bfcc      	ite	gt
 8003ec8:	2500      	movgt	r5, #0
 8003eca:	2501      	movle	r5, #1
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	f200 808f 	bhi.w	8003ff0 <_dtoa_r+0x2f0>
 8003ed2:	e8df f003 	tbb	[pc, r3]
 8003ed6:	7f7d      	.short	0x7f7d
 8003ed8:	7131      	.short	0x7131
 8003eda:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8003ede:	441d      	add	r5, r3
 8003ee0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003ee4:	2820      	cmp	r0, #32
 8003ee6:	dd13      	ble.n	8003f10 <_dtoa_r+0x210>
 8003ee8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003eec:	9b00      	ldr	r3, [sp, #0]
 8003eee:	fa08 f800 	lsl.w	r8, r8, r0
 8003ef2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003ef6:	fa23 f000 	lsr.w	r0, r3, r0
 8003efa:	ea48 0000 	orr.w	r0, r8, r0
 8003efe:	f7fc fab5 	bl	800046c <__aeabi_ui2d>
 8003f02:	2301      	movs	r3, #1
 8003f04:	4682      	mov	sl, r0
 8003f06:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8003f0a:	3d01      	subs	r5, #1
 8003f0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8003f0e:	e772      	b.n	8003df6 <_dtoa_r+0xf6>
 8003f10:	9b00      	ldr	r3, [sp, #0]
 8003f12:	f1c0 0020 	rsb	r0, r0, #32
 8003f16:	fa03 f000 	lsl.w	r0, r3, r0
 8003f1a:	e7f0      	b.n	8003efe <_dtoa_r+0x1fe>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e7b1      	b.n	8003e84 <_dtoa_r+0x184>
 8003f20:	900f      	str	r0, [sp, #60]	; 0x3c
 8003f22:	e7b0      	b.n	8003e86 <_dtoa_r+0x186>
 8003f24:	9b05      	ldr	r3, [sp, #20]
 8003f26:	eba3 030a 	sub.w	r3, r3, sl
 8003f2a:	9305      	str	r3, [sp, #20]
 8003f2c:	f1ca 0300 	rsb	r3, sl, #0
 8003f30:	9307      	str	r3, [sp, #28]
 8003f32:	2300      	movs	r3, #0
 8003f34:	930e      	str	r3, [sp, #56]	; 0x38
 8003f36:	e7bb      	b.n	8003eb0 <_dtoa_r+0x1b0>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8003f3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	dd59      	ble.n	8003ff6 <_dtoa_r+0x2f6>
 8003f42:	9302      	str	r3, [sp, #8]
 8003f44:	4699      	mov	r9, r3
 8003f46:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003f48:	2200      	movs	r2, #0
 8003f4a:	6072      	str	r2, [r6, #4]
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	f102 0014 	add.w	r0, r2, #20
 8003f52:	4298      	cmp	r0, r3
 8003f54:	6871      	ldr	r1, [r6, #4]
 8003f56:	d953      	bls.n	8004000 <_dtoa_r+0x300>
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f000 fcaa 	bl	80048b2 <_Balloc>
 8003f5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f60:	6030      	str	r0, [r6, #0]
 8003f62:	f1b9 0f0e 	cmp.w	r9, #14
 8003f66:	f8d3 b000 	ldr.w	fp, [r3]
 8003f6a:	f200 80e6 	bhi.w	800413a <_dtoa_r+0x43a>
 8003f6e:	2d00      	cmp	r5, #0
 8003f70:	f000 80e3 	beq.w	800413a <_dtoa_r+0x43a>
 8003f74:	ed9d 7b00 	vldr	d7, [sp]
 8003f78:	f1ba 0f00 	cmp.w	sl, #0
 8003f7c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003f80:	dd74      	ble.n	800406c <_dtoa_r+0x36c>
 8003f82:	4a2a      	ldr	r2, [pc, #168]	; (800402c <_dtoa_r+0x32c>)
 8003f84:	f00a 030f 	and.w	r3, sl, #15
 8003f88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003f8c:	ed93 7b00 	vldr	d7, [r3]
 8003f90:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003f94:	06f0      	lsls	r0, r6, #27
 8003f96:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003f9a:	d565      	bpl.n	8004068 <_dtoa_r+0x368>
 8003f9c:	4b24      	ldr	r3, [pc, #144]	; (8004030 <_dtoa_r+0x330>)
 8003f9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003fa2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fa6:	f7fc fc05 	bl	80007b4 <__aeabi_ddiv>
 8003faa:	e9cd 0100 	strd	r0, r1, [sp]
 8003fae:	f006 060f 	and.w	r6, r6, #15
 8003fb2:	2503      	movs	r5, #3
 8003fb4:	4f1e      	ldr	r7, [pc, #120]	; (8004030 <_dtoa_r+0x330>)
 8003fb6:	e04c      	b.n	8004052 <_dtoa_r+0x352>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	930a      	str	r3, [sp, #40]	; 0x28
 8003fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fbe:	4453      	add	r3, sl
 8003fc0:	f103 0901 	add.w	r9, r3, #1
 8003fc4:	9302      	str	r3, [sp, #8]
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	bfb8      	it	lt
 8003fcc:	2301      	movlt	r3, #1
 8003fce:	e7ba      	b.n	8003f46 <_dtoa_r+0x246>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e7b2      	b.n	8003f3a <_dtoa_r+0x23a>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e7f0      	b.n	8003fba <_dtoa_r+0x2ba>
 8003fd8:	2501      	movs	r5, #1
 8003fda:	2300      	movs	r3, #0
 8003fdc:	9306      	str	r3, [sp, #24]
 8003fde:	950a      	str	r5, [sp, #40]	; 0x28
 8003fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fe4:	9302      	str	r3, [sp, #8]
 8003fe6:	4699      	mov	r9, r3
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2312      	movs	r3, #18
 8003fec:	920b      	str	r2, [sp, #44]	; 0x2c
 8003fee:	e7aa      	b.n	8003f46 <_dtoa_r+0x246>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ff4:	e7f4      	b.n	8003fe0 <_dtoa_r+0x2e0>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	9302      	str	r3, [sp, #8]
 8003ffa:	4699      	mov	r9, r3
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	e7f5      	b.n	8003fec <_dtoa_r+0x2ec>
 8004000:	3101      	adds	r1, #1
 8004002:	6071      	str	r1, [r6, #4]
 8004004:	0052      	lsls	r2, r2, #1
 8004006:	e7a2      	b.n	8003f4e <_dtoa_r+0x24e>
 8004008:	636f4361 	.word	0x636f4361
 800400c:	3fd287a7 	.word	0x3fd287a7
 8004010:	8b60c8b3 	.word	0x8b60c8b3
 8004014:	3fc68a28 	.word	0x3fc68a28
 8004018:	509f79fb 	.word	0x509f79fb
 800401c:	3fd34413 	.word	0x3fd34413
 8004020:	7ff00000 	.word	0x7ff00000
 8004024:	080051c1 	.word	0x080051c1
 8004028:	3ff80000 	.word	0x3ff80000
 800402c:	080051f8 	.word	0x080051f8
 8004030:	080051d0 	.word	0x080051d0
 8004034:	080051cb 	.word	0x080051cb
 8004038:	07f1      	lsls	r1, r6, #31
 800403a:	d508      	bpl.n	800404e <_dtoa_r+0x34e>
 800403c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004044:	f7fc fa8c 	bl	8000560 <__aeabi_dmul>
 8004048:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800404c:	3501      	adds	r5, #1
 800404e:	1076      	asrs	r6, r6, #1
 8004050:	3708      	adds	r7, #8
 8004052:	2e00      	cmp	r6, #0
 8004054:	d1f0      	bne.n	8004038 <_dtoa_r+0x338>
 8004056:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800405a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800405e:	f7fc fba9 	bl	80007b4 <__aeabi_ddiv>
 8004062:	e9cd 0100 	strd	r0, r1, [sp]
 8004066:	e01a      	b.n	800409e <_dtoa_r+0x39e>
 8004068:	2502      	movs	r5, #2
 800406a:	e7a3      	b.n	8003fb4 <_dtoa_r+0x2b4>
 800406c:	f000 80a0 	beq.w	80041b0 <_dtoa_r+0x4b0>
 8004070:	f1ca 0600 	rsb	r6, sl, #0
 8004074:	4b9f      	ldr	r3, [pc, #636]	; (80042f4 <_dtoa_r+0x5f4>)
 8004076:	4fa0      	ldr	r7, [pc, #640]	; (80042f8 <_dtoa_r+0x5f8>)
 8004078:	f006 020f 	and.w	r2, r6, #15
 800407c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004088:	f7fc fa6a 	bl	8000560 <__aeabi_dmul>
 800408c:	e9cd 0100 	strd	r0, r1, [sp]
 8004090:	1136      	asrs	r6, r6, #4
 8004092:	2300      	movs	r3, #0
 8004094:	2502      	movs	r5, #2
 8004096:	2e00      	cmp	r6, #0
 8004098:	d17f      	bne.n	800419a <_dtoa_r+0x49a>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e1      	bne.n	8004062 <_dtoa_r+0x362>
 800409e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8087 	beq.w	80041b4 <_dtoa_r+0x4b4>
 80040a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80040aa:	2200      	movs	r2, #0
 80040ac:	4b93      	ldr	r3, [pc, #588]	; (80042fc <_dtoa_r+0x5fc>)
 80040ae:	4630      	mov	r0, r6
 80040b0:	4639      	mov	r1, r7
 80040b2:	f7fc fcc7 	bl	8000a44 <__aeabi_dcmplt>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	d07c      	beq.n	80041b4 <_dtoa_r+0x4b4>
 80040ba:	f1b9 0f00 	cmp.w	r9, #0
 80040be:	d079      	beq.n	80041b4 <_dtoa_r+0x4b4>
 80040c0:	9b02      	ldr	r3, [sp, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	dd35      	ble.n	8004132 <_dtoa_r+0x432>
 80040c6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80040ca:	9308      	str	r3, [sp, #32]
 80040cc:	4639      	mov	r1, r7
 80040ce:	2200      	movs	r2, #0
 80040d0:	4b8b      	ldr	r3, [pc, #556]	; (8004300 <_dtoa_r+0x600>)
 80040d2:	4630      	mov	r0, r6
 80040d4:	f7fc fa44 	bl	8000560 <__aeabi_dmul>
 80040d8:	e9cd 0100 	strd	r0, r1, [sp]
 80040dc:	9f02      	ldr	r7, [sp, #8]
 80040de:	3501      	adds	r5, #1
 80040e0:	4628      	mov	r0, r5
 80040e2:	f7fc f9d3 	bl	800048c <__aeabi_i2d>
 80040e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040ea:	f7fc fa39 	bl	8000560 <__aeabi_dmul>
 80040ee:	2200      	movs	r2, #0
 80040f0:	4b84      	ldr	r3, [pc, #528]	; (8004304 <_dtoa_r+0x604>)
 80040f2:	f7fc f87f 	bl	80001f4 <__adddf3>
 80040f6:	4605      	mov	r5, r0
 80040f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80040fc:	2f00      	cmp	r7, #0
 80040fe:	d15d      	bne.n	80041bc <_dtoa_r+0x4bc>
 8004100:	2200      	movs	r2, #0
 8004102:	4b81      	ldr	r3, [pc, #516]	; (8004308 <_dtoa_r+0x608>)
 8004104:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004108:	f7fc f872 	bl	80001f0 <__aeabi_dsub>
 800410c:	462a      	mov	r2, r5
 800410e:	4633      	mov	r3, r6
 8004110:	e9cd 0100 	strd	r0, r1, [sp]
 8004114:	f7fc fcb4 	bl	8000a80 <__aeabi_dcmpgt>
 8004118:	2800      	cmp	r0, #0
 800411a:	f040 8288 	bne.w	800462e <_dtoa_r+0x92e>
 800411e:	462a      	mov	r2, r5
 8004120:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004124:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004128:	f7fc fc8c 	bl	8000a44 <__aeabi_dcmplt>
 800412c:	2800      	cmp	r0, #0
 800412e:	f040 827c 	bne.w	800462a <_dtoa_r+0x92a>
 8004132:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004136:	e9cd 2300 	strd	r2, r3, [sp]
 800413a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800413c:	2b00      	cmp	r3, #0
 800413e:	f2c0 8150 	blt.w	80043e2 <_dtoa_r+0x6e2>
 8004142:	f1ba 0f0e 	cmp.w	sl, #14
 8004146:	f300 814c 	bgt.w	80043e2 <_dtoa_r+0x6e2>
 800414a:	4b6a      	ldr	r3, [pc, #424]	; (80042f4 <_dtoa_r+0x5f4>)
 800414c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004150:	ed93 7b00 	vldr	d7, [r3]
 8004154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004156:	2b00      	cmp	r3, #0
 8004158:	ed8d 7b02 	vstr	d7, [sp, #8]
 800415c:	f280 80d8 	bge.w	8004310 <_dtoa_r+0x610>
 8004160:	f1b9 0f00 	cmp.w	r9, #0
 8004164:	f300 80d4 	bgt.w	8004310 <_dtoa_r+0x610>
 8004168:	f040 825e 	bne.w	8004628 <_dtoa_r+0x928>
 800416c:	2200      	movs	r2, #0
 800416e:	4b66      	ldr	r3, [pc, #408]	; (8004308 <_dtoa_r+0x608>)
 8004170:	ec51 0b17 	vmov	r0, r1, d7
 8004174:	f7fc f9f4 	bl	8000560 <__aeabi_dmul>
 8004178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800417c:	f7fc fc76 	bl	8000a6c <__aeabi_dcmpge>
 8004180:	464f      	mov	r7, r9
 8004182:	464e      	mov	r6, r9
 8004184:	2800      	cmp	r0, #0
 8004186:	f040 8234 	bne.w	80045f2 <_dtoa_r+0x8f2>
 800418a:	2331      	movs	r3, #49	; 0x31
 800418c:	f10b 0501 	add.w	r5, fp, #1
 8004190:	f88b 3000 	strb.w	r3, [fp]
 8004194:	f10a 0a01 	add.w	sl, sl, #1
 8004198:	e22f      	b.n	80045fa <_dtoa_r+0x8fa>
 800419a:	07f2      	lsls	r2, r6, #31
 800419c:	d505      	bpl.n	80041aa <_dtoa_r+0x4aa>
 800419e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041a2:	f7fc f9dd 	bl	8000560 <__aeabi_dmul>
 80041a6:	3501      	adds	r5, #1
 80041a8:	2301      	movs	r3, #1
 80041aa:	1076      	asrs	r6, r6, #1
 80041ac:	3708      	adds	r7, #8
 80041ae:	e772      	b.n	8004096 <_dtoa_r+0x396>
 80041b0:	2502      	movs	r5, #2
 80041b2:	e774      	b.n	800409e <_dtoa_r+0x39e>
 80041b4:	f8cd a020 	str.w	sl, [sp, #32]
 80041b8:	464f      	mov	r7, r9
 80041ba:	e791      	b.n	80040e0 <_dtoa_r+0x3e0>
 80041bc:	4b4d      	ldr	r3, [pc, #308]	; (80042f4 <_dtoa_r+0x5f4>)
 80041be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80041c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80041c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d047      	beq.n	800425c <_dtoa_r+0x55c>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	2000      	movs	r0, #0
 80041d2:	494e      	ldr	r1, [pc, #312]	; (800430c <_dtoa_r+0x60c>)
 80041d4:	f7fc faee 	bl	80007b4 <__aeabi_ddiv>
 80041d8:	462a      	mov	r2, r5
 80041da:	4633      	mov	r3, r6
 80041dc:	f7fc f808 	bl	80001f0 <__aeabi_dsub>
 80041e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80041e4:	465d      	mov	r5, fp
 80041e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041ea:	f7fc fc69 	bl	8000ac0 <__aeabi_d2iz>
 80041ee:	4606      	mov	r6, r0
 80041f0:	f7fc f94c 	bl	800048c <__aeabi_i2d>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041fc:	f7fb fff8 	bl	80001f0 <__aeabi_dsub>
 8004200:	3630      	adds	r6, #48	; 0x30
 8004202:	f805 6b01 	strb.w	r6, [r5], #1
 8004206:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800420a:	e9cd 0100 	strd	r0, r1, [sp]
 800420e:	f7fc fc19 	bl	8000a44 <__aeabi_dcmplt>
 8004212:	2800      	cmp	r0, #0
 8004214:	d163      	bne.n	80042de <_dtoa_r+0x5de>
 8004216:	e9dd 2300 	ldrd	r2, r3, [sp]
 800421a:	2000      	movs	r0, #0
 800421c:	4937      	ldr	r1, [pc, #220]	; (80042fc <_dtoa_r+0x5fc>)
 800421e:	f7fb ffe7 	bl	80001f0 <__aeabi_dsub>
 8004222:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004226:	f7fc fc0d 	bl	8000a44 <__aeabi_dcmplt>
 800422a:	2800      	cmp	r0, #0
 800422c:	f040 80b7 	bne.w	800439e <_dtoa_r+0x69e>
 8004230:	eba5 030b 	sub.w	r3, r5, fp
 8004234:	429f      	cmp	r7, r3
 8004236:	f77f af7c 	ble.w	8004132 <_dtoa_r+0x432>
 800423a:	2200      	movs	r2, #0
 800423c:	4b30      	ldr	r3, [pc, #192]	; (8004300 <_dtoa_r+0x600>)
 800423e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004242:	f7fc f98d 	bl	8000560 <__aeabi_dmul>
 8004246:	2200      	movs	r2, #0
 8004248:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800424c:	4b2c      	ldr	r3, [pc, #176]	; (8004300 <_dtoa_r+0x600>)
 800424e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004252:	f7fc f985 	bl	8000560 <__aeabi_dmul>
 8004256:	e9cd 0100 	strd	r0, r1, [sp]
 800425a:	e7c4      	b.n	80041e6 <_dtoa_r+0x4e6>
 800425c:	462a      	mov	r2, r5
 800425e:	4633      	mov	r3, r6
 8004260:	f7fc f97e 	bl	8000560 <__aeabi_dmul>
 8004264:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004268:	eb0b 0507 	add.w	r5, fp, r7
 800426c:	465e      	mov	r6, fp
 800426e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004272:	f7fc fc25 	bl	8000ac0 <__aeabi_d2iz>
 8004276:	4607      	mov	r7, r0
 8004278:	f7fc f908 	bl	800048c <__aeabi_i2d>
 800427c:	3730      	adds	r7, #48	; 0x30
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004286:	f7fb ffb3 	bl	80001f0 <__aeabi_dsub>
 800428a:	f806 7b01 	strb.w	r7, [r6], #1
 800428e:	42ae      	cmp	r6, r5
 8004290:	e9cd 0100 	strd	r0, r1, [sp]
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	d126      	bne.n	80042e8 <_dtoa_r+0x5e8>
 800429a:	4b1c      	ldr	r3, [pc, #112]	; (800430c <_dtoa_r+0x60c>)
 800429c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80042a0:	f7fb ffa8 	bl	80001f4 <__adddf3>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042ac:	f7fc fbe8 	bl	8000a80 <__aeabi_dcmpgt>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	d174      	bne.n	800439e <_dtoa_r+0x69e>
 80042b4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80042b8:	2000      	movs	r0, #0
 80042ba:	4914      	ldr	r1, [pc, #80]	; (800430c <_dtoa_r+0x60c>)
 80042bc:	f7fb ff98 	bl	80001f0 <__aeabi_dsub>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042c8:	f7fc fbbc 	bl	8000a44 <__aeabi_dcmplt>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	f43f af30 	beq.w	8004132 <_dtoa_r+0x432>
 80042d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80042d6:	2b30      	cmp	r3, #48	; 0x30
 80042d8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80042dc:	d002      	beq.n	80042e4 <_dtoa_r+0x5e4>
 80042de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80042e2:	e04a      	b.n	800437a <_dtoa_r+0x67a>
 80042e4:	4615      	mov	r5, r2
 80042e6:	e7f4      	b.n	80042d2 <_dtoa_r+0x5d2>
 80042e8:	4b05      	ldr	r3, [pc, #20]	; (8004300 <_dtoa_r+0x600>)
 80042ea:	f7fc f939 	bl	8000560 <__aeabi_dmul>
 80042ee:	e9cd 0100 	strd	r0, r1, [sp]
 80042f2:	e7bc      	b.n	800426e <_dtoa_r+0x56e>
 80042f4:	080051f8 	.word	0x080051f8
 80042f8:	080051d0 	.word	0x080051d0
 80042fc:	3ff00000 	.word	0x3ff00000
 8004300:	40240000 	.word	0x40240000
 8004304:	401c0000 	.word	0x401c0000
 8004308:	40140000 	.word	0x40140000
 800430c:	3fe00000 	.word	0x3fe00000
 8004310:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004314:	465d      	mov	r5, fp
 8004316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800431a:	4630      	mov	r0, r6
 800431c:	4639      	mov	r1, r7
 800431e:	f7fc fa49 	bl	80007b4 <__aeabi_ddiv>
 8004322:	f7fc fbcd 	bl	8000ac0 <__aeabi_d2iz>
 8004326:	4680      	mov	r8, r0
 8004328:	f7fc f8b0 	bl	800048c <__aeabi_i2d>
 800432c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004330:	f7fc f916 	bl	8000560 <__aeabi_dmul>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4630      	mov	r0, r6
 800433a:	4639      	mov	r1, r7
 800433c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004340:	f7fb ff56 	bl	80001f0 <__aeabi_dsub>
 8004344:	f805 6b01 	strb.w	r6, [r5], #1
 8004348:	eba5 060b 	sub.w	r6, r5, fp
 800434c:	45b1      	cmp	r9, r6
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	d139      	bne.n	80043c8 <_dtoa_r+0x6c8>
 8004354:	f7fb ff4e 	bl	80001f4 <__adddf3>
 8004358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800435c:	4606      	mov	r6, r0
 800435e:	460f      	mov	r7, r1
 8004360:	f7fc fb8e 	bl	8000a80 <__aeabi_dcmpgt>
 8004364:	b9c8      	cbnz	r0, 800439a <_dtoa_r+0x69a>
 8004366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800436a:	4630      	mov	r0, r6
 800436c:	4639      	mov	r1, r7
 800436e:	f7fc fb5f 	bl	8000a30 <__aeabi_dcmpeq>
 8004372:	b110      	cbz	r0, 800437a <_dtoa_r+0x67a>
 8004374:	f018 0f01 	tst.w	r8, #1
 8004378:	d10f      	bne.n	800439a <_dtoa_r+0x69a>
 800437a:	9904      	ldr	r1, [sp, #16]
 800437c:	4620      	mov	r0, r4
 800437e:	f000 facc 	bl	800491a <_Bfree>
 8004382:	2300      	movs	r3, #0
 8004384:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004386:	702b      	strb	r3, [r5, #0]
 8004388:	f10a 0301 	add.w	r3, sl, #1
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8241 	beq.w	8004818 <_dtoa_r+0xb18>
 8004396:	601d      	str	r5, [r3, #0]
 8004398:	e23e      	b.n	8004818 <_dtoa_r+0xb18>
 800439a:	f8cd a020 	str.w	sl, [sp, #32]
 800439e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80043a2:	2a39      	cmp	r2, #57	; 0x39
 80043a4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80043a8:	d108      	bne.n	80043bc <_dtoa_r+0x6bc>
 80043aa:	459b      	cmp	fp, r3
 80043ac:	d10a      	bne.n	80043c4 <_dtoa_r+0x6c4>
 80043ae:	9b08      	ldr	r3, [sp, #32]
 80043b0:	3301      	adds	r3, #1
 80043b2:	9308      	str	r3, [sp, #32]
 80043b4:	2330      	movs	r3, #48	; 0x30
 80043b6:	f88b 3000 	strb.w	r3, [fp]
 80043ba:	465b      	mov	r3, fp
 80043bc:	781a      	ldrb	r2, [r3, #0]
 80043be:	3201      	adds	r2, #1
 80043c0:	701a      	strb	r2, [r3, #0]
 80043c2:	e78c      	b.n	80042de <_dtoa_r+0x5de>
 80043c4:	461d      	mov	r5, r3
 80043c6:	e7ea      	b.n	800439e <_dtoa_r+0x69e>
 80043c8:	2200      	movs	r2, #0
 80043ca:	4b9b      	ldr	r3, [pc, #620]	; (8004638 <_dtoa_r+0x938>)
 80043cc:	f7fc f8c8 	bl	8000560 <__aeabi_dmul>
 80043d0:	2200      	movs	r2, #0
 80043d2:	2300      	movs	r3, #0
 80043d4:	4606      	mov	r6, r0
 80043d6:	460f      	mov	r7, r1
 80043d8:	f7fc fb2a 	bl	8000a30 <__aeabi_dcmpeq>
 80043dc:	2800      	cmp	r0, #0
 80043de:	d09a      	beq.n	8004316 <_dtoa_r+0x616>
 80043e0:	e7cb      	b.n	800437a <_dtoa_r+0x67a>
 80043e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043e4:	2a00      	cmp	r2, #0
 80043e6:	f000 808b 	beq.w	8004500 <_dtoa_r+0x800>
 80043ea:	9a06      	ldr	r2, [sp, #24]
 80043ec:	2a01      	cmp	r2, #1
 80043ee:	dc6e      	bgt.n	80044ce <_dtoa_r+0x7ce>
 80043f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80043f2:	2a00      	cmp	r2, #0
 80043f4:	d067      	beq.n	80044c6 <_dtoa_r+0x7c6>
 80043f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80043fa:	9f07      	ldr	r7, [sp, #28]
 80043fc:	9d05      	ldr	r5, [sp, #20]
 80043fe:	9a05      	ldr	r2, [sp, #20]
 8004400:	2101      	movs	r1, #1
 8004402:	441a      	add	r2, r3
 8004404:	4620      	mov	r0, r4
 8004406:	9205      	str	r2, [sp, #20]
 8004408:	4498      	add	r8, r3
 800440a:	f000 fb26 	bl	8004a5a <__i2b>
 800440e:	4606      	mov	r6, r0
 8004410:	2d00      	cmp	r5, #0
 8004412:	dd0c      	ble.n	800442e <_dtoa_r+0x72e>
 8004414:	f1b8 0f00 	cmp.w	r8, #0
 8004418:	dd09      	ble.n	800442e <_dtoa_r+0x72e>
 800441a:	4545      	cmp	r5, r8
 800441c:	9a05      	ldr	r2, [sp, #20]
 800441e:	462b      	mov	r3, r5
 8004420:	bfa8      	it	ge
 8004422:	4643      	movge	r3, r8
 8004424:	1ad2      	subs	r2, r2, r3
 8004426:	9205      	str	r2, [sp, #20]
 8004428:	1aed      	subs	r5, r5, r3
 800442a:	eba8 0803 	sub.w	r8, r8, r3
 800442e:	9b07      	ldr	r3, [sp, #28]
 8004430:	b1eb      	cbz	r3, 800446e <_dtoa_r+0x76e>
 8004432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004434:	2b00      	cmp	r3, #0
 8004436:	d067      	beq.n	8004508 <_dtoa_r+0x808>
 8004438:	b18f      	cbz	r7, 800445e <_dtoa_r+0x75e>
 800443a:	4631      	mov	r1, r6
 800443c:	463a      	mov	r2, r7
 800443e:	4620      	mov	r0, r4
 8004440:	f000 fbaa 	bl	8004b98 <__pow5mult>
 8004444:	9a04      	ldr	r2, [sp, #16]
 8004446:	4601      	mov	r1, r0
 8004448:	4606      	mov	r6, r0
 800444a:	4620      	mov	r0, r4
 800444c:	f000 fb0e 	bl	8004a6c <__multiply>
 8004450:	9904      	ldr	r1, [sp, #16]
 8004452:	9008      	str	r0, [sp, #32]
 8004454:	4620      	mov	r0, r4
 8004456:	f000 fa60 	bl	800491a <_Bfree>
 800445a:	9b08      	ldr	r3, [sp, #32]
 800445c:	9304      	str	r3, [sp, #16]
 800445e:	9b07      	ldr	r3, [sp, #28]
 8004460:	1bda      	subs	r2, r3, r7
 8004462:	d004      	beq.n	800446e <_dtoa_r+0x76e>
 8004464:	9904      	ldr	r1, [sp, #16]
 8004466:	4620      	mov	r0, r4
 8004468:	f000 fb96 	bl	8004b98 <__pow5mult>
 800446c:	9004      	str	r0, [sp, #16]
 800446e:	2101      	movs	r1, #1
 8004470:	4620      	mov	r0, r4
 8004472:	f000 faf2 	bl	8004a5a <__i2b>
 8004476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004478:	4607      	mov	r7, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 81d0 	beq.w	8004820 <_dtoa_r+0xb20>
 8004480:	461a      	mov	r2, r3
 8004482:	4601      	mov	r1, r0
 8004484:	4620      	mov	r0, r4
 8004486:	f000 fb87 	bl	8004b98 <__pow5mult>
 800448a:	9b06      	ldr	r3, [sp, #24]
 800448c:	2b01      	cmp	r3, #1
 800448e:	4607      	mov	r7, r0
 8004490:	dc40      	bgt.n	8004514 <_dtoa_r+0x814>
 8004492:	9b00      	ldr	r3, [sp, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d139      	bne.n	800450c <_dtoa_r+0x80c>
 8004498:	9b01      	ldr	r3, [sp, #4]
 800449a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d136      	bne.n	8004510 <_dtoa_r+0x810>
 80044a2:	9b01      	ldr	r3, [sp, #4]
 80044a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044a8:	0d1b      	lsrs	r3, r3, #20
 80044aa:	051b      	lsls	r3, r3, #20
 80044ac:	b12b      	cbz	r3, 80044ba <_dtoa_r+0x7ba>
 80044ae:	9b05      	ldr	r3, [sp, #20]
 80044b0:	3301      	adds	r3, #1
 80044b2:	9305      	str	r3, [sp, #20]
 80044b4:	f108 0801 	add.w	r8, r8, #1
 80044b8:	2301      	movs	r3, #1
 80044ba:	9307      	str	r3, [sp, #28]
 80044bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d12a      	bne.n	8004518 <_dtoa_r+0x818>
 80044c2:	2001      	movs	r0, #1
 80044c4:	e030      	b.n	8004528 <_dtoa_r+0x828>
 80044c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80044c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80044cc:	e795      	b.n	80043fa <_dtoa_r+0x6fa>
 80044ce:	9b07      	ldr	r3, [sp, #28]
 80044d0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80044d4:	42bb      	cmp	r3, r7
 80044d6:	bfbf      	itttt	lt
 80044d8:	9b07      	ldrlt	r3, [sp, #28]
 80044da:	9707      	strlt	r7, [sp, #28]
 80044dc:	1afa      	sublt	r2, r7, r3
 80044de:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80044e0:	bfbb      	ittet	lt
 80044e2:	189b      	addlt	r3, r3, r2
 80044e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80044e6:	1bdf      	subge	r7, r3, r7
 80044e8:	2700      	movlt	r7, #0
 80044ea:	f1b9 0f00 	cmp.w	r9, #0
 80044ee:	bfb5      	itete	lt
 80044f0:	9b05      	ldrlt	r3, [sp, #20]
 80044f2:	9d05      	ldrge	r5, [sp, #20]
 80044f4:	eba3 0509 	sublt.w	r5, r3, r9
 80044f8:	464b      	movge	r3, r9
 80044fa:	bfb8      	it	lt
 80044fc:	2300      	movlt	r3, #0
 80044fe:	e77e      	b.n	80043fe <_dtoa_r+0x6fe>
 8004500:	9f07      	ldr	r7, [sp, #28]
 8004502:	9d05      	ldr	r5, [sp, #20]
 8004504:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004506:	e783      	b.n	8004410 <_dtoa_r+0x710>
 8004508:	9a07      	ldr	r2, [sp, #28]
 800450a:	e7ab      	b.n	8004464 <_dtoa_r+0x764>
 800450c:	2300      	movs	r3, #0
 800450e:	e7d4      	b.n	80044ba <_dtoa_r+0x7ba>
 8004510:	9b00      	ldr	r3, [sp, #0]
 8004512:	e7d2      	b.n	80044ba <_dtoa_r+0x7ba>
 8004514:	2300      	movs	r3, #0
 8004516:	9307      	str	r3, [sp, #28]
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800451e:	6918      	ldr	r0, [r3, #16]
 8004520:	f000 fa4d 	bl	80049be <__hi0bits>
 8004524:	f1c0 0020 	rsb	r0, r0, #32
 8004528:	4440      	add	r0, r8
 800452a:	f010 001f 	ands.w	r0, r0, #31
 800452e:	d047      	beq.n	80045c0 <_dtoa_r+0x8c0>
 8004530:	f1c0 0320 	rsb	r3, r0, #32
 8004534:	2b04      	cmp	r3, #4
 8004536:	dd3b      	ble.n	80045b0 <_dtoa_r+0x8b0>
 8004538:	9b05      	ldr	r3, [sp, #20]
 800453a:	f1c0 001c 	rsb	r0, r0, #28
 800453e:	4403      	add	r3, r0
 8004540:	9305      	str	r3, [sp, #20]
 8004542:	4405      	add	r5, r0
 8004544:	4480      	add	r8, r0
 8004546:	9b05      	ldr	r3, [sp, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	dd05      	ble.n	8004558 <_dtoa_r+0x858>
 800454c:	461a      	mov	r2, r3
 800454e:	9904      	ldr	r1, [sp, #16]
 8004550:	4620      	mov	r0, r4
 8004552:	f000 fb6f 	bl	8004c34 <__lshift>
 8004556:	9004      	str	r0, [sp, #16]
 8004558:	f1b8 0f00 	cmp.w	r8, #0
 800455c:	dd05      	ble.n	800456a <_dtoa_r+0x86a>
 800455e:	4639      	mov	r1, r7
 8004560:	4642      	mov	r2, r8
 8004562:	4620      	mov	r0, r4
 8004564:	f000 fb66 	bl	8004c34 <__lshift>
 8004568:	4607      	mov	r7, r0
 800456a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800456c:	b353      	cbz	r3, 80045c4 <_dtoa_r+0x8c4>
 800456e:	4639      	mov	r1, r7
 8004570:	9804      	ldr	r0, [sp, #16]
 8004572:	f000 fbb3 	bl	8004cdc <__mcmp>
 8004576:	2800      	cmp	r0, #0
 8004578:	da24      	bge.n	80045c4 <_dtoa_r+0x8c4>
 800457a:	2300      	movs	r3, #0
 800457c:	220a      	movs	r2, #10
 800457e:	9904      	ldr	r1, [sp, #16]
 8004580:	4620      	mov	r0, r4
 8004582:	f000 f9e1 	bl	8004948 <__multadd>
 8004586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004588:	9004      	str	r0, [sp, #16]
 800458a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 814d 	beq.w	800482e <_dtoa_r+0xb2e>
 8004594:	2300      	movs	r3, #0
 8004596:	4631      	mov	r1, r6
 8004598:	220a      	movs	r2, #10
 800459a:	4620      	mov	r0, r4
 800459c:	f000 f9d4 	bl	8004948 <__multadd>
 80045a0:	9b02      	ldr	r3, [sp, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	4606      	mov	r6, r0
 80045a6:	dc4f      	bgt.n	8004648 <_dtoa_r+0x948>
 80045a8:	9b06      	ldr	r3, [sp, #24]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	dd4c      	ble.n	8004648 <_dtoa_r+0x948>
 80045ae:	e011      	b.n	80045d4 <_dtoa_r+0x8d4>
 80045b0:	d0c9      	beq.n	8004546 <_dtoa_r+0x846>
 80045b2:	9a05      	ldr	r2, [sp, #20]
 80045b4:	331c      	adds	r3, #28
 80045b6:	441a      	add	r2, r3
 80045b8:	9205      	str	r2, [sp, #20]
 80045ba:	441d      	add	r5, r3
 80045bc:	4498      	add	r8, r3
 80045be:	e7c2      	b.n	8004546 <_dtoa_r+0x846>
 80045c0:	4603      	mov	r3, r0
 80045c2:	e7f6      	b.n	80045b2 <_dtoa_r+0x8b2>
 80045c4:	f1b9 0f00 	cmp.w	r9, #0
 80045c8:	dc38      	bgt.n	800463c <_dtoa_r+0x93c>
 80045ca:	9b06      	ldr	r3, [sp, #24]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	dd35      	ble.n	800463c <_dtoa_r+0x93c>
 80045d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80045d4:	9b02      	ldr	r3, [sp, #8]
 80045d6:	b963      	cbnz	r3, 80045f2 <_dtoa_r+0x8f2>
 80045d8:	4639      	mov	r1, r7
 80045da:	2205      	movs	r2, #5
 80045dc:	4620      	mov	r0, r4
 80045de:	f000 f9b3 	bl	8004948 <__multadd>
 80045e2:	4601      	mov	r1, r0
 80045e4:	4607      	mov	r7, r0
 80045e6:	9804      	ldr	r0, [sp, #16]
 80045e8:	f000 fb78 	bl	8004cdc <__mcmp>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	f73f adcc 	bgt.w	800418a <_dtoa_r+0x48a>
 80045f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045f4:	465d      	mov	r5, fp
 80045f6:	ea6f 0a03 	mvn.w	sl, r3
 80045fa:	f04f 0900 	mov.w	r9, #0
 80045fe:	4639      	mov	r1, r7
 8004600:	4620      	mov	r0, r4
 8004602:	f000 f98a 	bl	800491a <_Bfree>
 8004606:	2e00      	cmp	r6, #0
 8004608:	f43f aeb7 	beq.w	800437a <_dtoa_r+0x67a>
 800460c:	f1b9 0f00 	cmp.w	r9, #0
 8004610:	d005      	beq.n	800461e <_dtoa_r+0x91e>
 8004612:	45b1      	cmp	r9, r6
 8004614:	d003      	beq.n	800461e <_dtoa_r+0x91e>
 8004616:	4649      	mov	r1, r9
 8004618:	4620      	mov	r0, r4
 800461a:	f000 f97e 	bl	800491a <_Bfree>
 800461e:	4631      	mov	r1, r6
 8004620:	4620      	mov	r0, r4
 8004622:	f000 f97a 	bl	800491a <_Bfree>
 8004626:	e6a8      	b.n	800437a <_dtoa_r+0x67a>
 8004628:	2700      	movs	r7, #0
 800462a:	463e      	mov	r6, r7
 800462c:	e7e1      	b.n	80045f2 <_dtoa_r+0x8f2>
 800462e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004632:	463e      	mov	r6, r7
 8004634:	e5a9      	b.n	800418a <_dtoa_r+0x48a>
 8004636:	bf00      	nop
 8004638:	40240000 	.word	0x40240000
 800463c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800463e:	f8cd 9008 	str.w	r9, [sp, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 80fa 	beq.w	800483c <_dtoa_r+0xb3c>
 8004648:	2d00      	cmp	r5, #0
 800464a:	dd05      	ble.n	8004658 <_dtoa_r+0x958>
 800464c:	4631      	mov	r1, r6
 800464e:	462a      	mov	r2, r5
 8004650:	4620      	mov	r0, r4
 8004652:	f000 faef 	bl	8004c34 <__lshift>
 8004656:	4606      	mov	r6, r0
 8004658:	9b07      	ldr	r3, [sp, #28]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d04c      	beq.n	80046f8 <_dtoa_r+0x9f8>
 800465e:	6871      	ldr	r1, [r6, #4]
 8004660:	4620      	mov	r0, r4
 8004662:	f000 f926 	bl	80048b2 <_Balloc>
 8004666:	6932      	ldr	r2, [r6, #16]
 8004668:	3202      	adds	r2, #2
 800466a:	4605      	mov	r5, r0
 800466c:	0092      	lsls	r2, r2, #2
 800466e:	f106 010c 	add.w	r1, r6, #12
 8004672:	300c      	adds	r0, #12
 8004674:	f000 f912 	bl	800489c <memcpy>
 8004678:	2201      	movs	r2, #1
 800467a:	4629      	mov	r1, r5
 800467c:	4620      	mov	r0, r4
 800467e:	f000 fad9 	bl	8004c34 <__lshift>
 8004682:	9b00      	ldr	r3, [sp, #0]
 8004684:	f8cd b014 	str.w	fp, [sp, #20]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	46b1      	mov	r9, r6
 800468e:	9307      	str	r3, [sp, #28]
 8004690:	4606      	mov	r6, r0
 8004692:	4639      	mov	r1, r7
 8004694:	9804      	ldr	r0, [sp, #16]
 8004696:	f7ff faa6 	bl	8003be6 <quorem>
 800469a:	4649      	mov	r1, r9
 800469c:	4605      	mov	r5, r0
 800469e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80046a2:	9804      	ldr	r0, [sp, #16]
 80046a4:	f000 fb1a 	bl	8004cdc <__mcmp>
 80046a8:	4632      	mov	r2, r6
 80046aa:	9000      	str	r0, [sp, #0]
 80046ac:	4639      	mov	r1, r7
 80046ae:	4620      	mov	r0, r4
 80046b0:	f000 fb2e 	bl	8004d10 <__mdiff>
 80046b4:	68c3      	ldr	r3, [r0, #12]
 80046b6:	4602      	mov	r2, r0
 80046b8:	bb03      	cbnz	r3, 80046fc <_dtoa_r+0x9fc>
 80046ba:	4601      	mov	r1, r0
 80046bc:	9008      	str	r0, [sp, #32]
 80046be:	9804      	ldr	r0, [sp, #16]
 80046c0:	f000 fb0c 	bl	8004cdc <__mcmp>
 80046c4:	9a08      	ldr	r2, [sp, #32]
 80046c6:	4603      	mov	r3, r0
 80046c8:	4611      	mov	r1, r2
 80046ca:	4620      	mov	r0, r4
 80046cc:	9308      	str	r3, [sp, #32]
 80046ce:	f000 f924 	bl	800491a <_Bfree>
 80046d2:	9b08      	ldr	r3, [sp, #32]
 80046d4:	b9a3      	cbnz	r3, 8004700 <_dtoa_r+0xa00>
 80046d6:	9a06      	ldr	r2, [sp, #24]
 80046d8:	b992      	cbnz	r2, 8004700 <_dtoa_r+0xa00>
 80046da:	9a07      	ldr	r2, [sp, #28]
 80046dc:	b982      	cbnz	r2, 8004700 <_dtoa_r+0xa00>
 80046de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80046e2:	d029      	beq.n	8004738 <_dtoa_r+0xa38>
 80046e4:	9b00      	ldr	r3, [sp, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	dd01      	ble.n	80046ee <_dtoa_r+0x9ee>
 80046ea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80046ee:	9b05      	ldr	r3, [sp, #20]
 80046f0:	1c5d      	adds	r5, r3, #1
 80046f2:	f883 8000 	strb.w	r8, [r3]
 80046f6:	e782      	b.n	80045fe <_dtoa_r+0x8fe>
 80046f8:	4630      	mov	r0, r6
 80046fa:	e7c2      	b.n	8004682 <_dtoa_r+0x982>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e7e3      	b.n	80046c8 <_dtoa_r+0x9c8>
 8004700:	9a00      	ldr	r2, [sp, #0]
 8004702:	2a00      	cmp	r2, #0
 8004704:	db04      	blt.n	8004710 <_dtoa_r+0xa10>
 8004706:	d125      	bne.n	8004754 <_dtoa_r+0xa54>
 8004708:	9a06      	ldr	r2, [sp, #24]
 800470a:	bb1a      	cbnz	r2, 8004754 <_dtoa_r+0xa54>
 800470c:	9a07      	ldr	r2, [sp, #28]
 800470e:	bb0a      	cbnz	r2, 8004754 <_dtoa_r+0xa54>
 8004710:	2b00      	cmp	r3, #0
 8004712:	ddec      	ble.n	80046ee <_dtoa_r+0x9ee>
 8004714:	2201      	movs	r2, #1
 8004716:	9904      	ldr	r1, [sp, #16]
 8004718:	4620      	mov	r0, r4
 800471a:	f000 fa8b 	bl	8004c34 <__lshift>
 800471e:	4639      	mov	r1, r7
 8004720:	9004      	str	r0, [sp, #16]
 8004722:	f000 fadb 	bl	8004cdc <__mcmp>
 8004726:	2800      	cmp	r0, #0
 8004728:	dc03      	bgt.n	8004732 <_dtoa_r+0xa32>
 800472a:	d1e0      	bne.n	80046ee <_dtoa_r+0x9ee>
 800472c:	f018 0f01 	tst.w	r8, #1
 8004730:	d0dd      	beq.n	80046ee <_dtoa_r+0x9ee>
 8004732:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004736:	d1d8      	bne.n	80046ea <_dtoa_r+0x9ea>
 8004738:	9b05      	ldr	r3, [sp, #20]
 800473a:	9a05      	ldr	r2, [sp, #20]
 800473c:	1c5d      	adds	r5, r3, #1
 800473e:	2339      	movs	r3, #57	; 0x39
 8004740:	7013      	strb	r3, [r2, #0]
 8004742:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004746:	2b39      	cmp	r3, #57	; 0x39
 8004748:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800474c:	d04f      	beq.n	80047ee <_dtoa_r+0xaee>
 800474e:	3301      	adds	r3, #1
 8004750:	7013      	strb	r3, [r2, #0]
 8004752:	e754      	b.n	80045fe <_dtoa_r+0x8fe>
 8004754:	9a05      	ldr	r2, [sp, #20]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f102 0501 	add.w	r5, r2, #1
 800475c:	dd06      	ble.n	800476c <_dtoa_r+0xa6c>
 800475e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004762:	d0e9      	beq.n	8004738 <_dtoa_r+0xa38>
 8004764:	f108 0801 	add.w	r8, r8, #1
 8004768:	9b05      	ldr	r3, [sp, #20]
 800476a:	e7c2      	b.n	80046f2 <_dtoa_r+0x9f2>
 800476c:	9a02      	ldr	r2, [sp, #8]
 800476e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004772:	eba5 030b 	sub.w	r3, r5, fp
 8004776:	4293      	cmp	r3, r2
 8004778:	d021      	beq.n	80047be <_dtoa_r+0xabe>
 800477a:	2300      	movs	r3, #0
 800477c:	220a      	movs	r2, #10
 800477e:	9904      	ldr	r1, [sp, #16]
 8004780:	4620      	mov	r0, r4
 8004782:	f000 f8e1 	bl	8004948 <__multadd>
 8004786:	45b1      	cmp	r9, r6
 8004788:	9004      	str	r0, [sp, #16]
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	f04f 020a 	mov.w	r2, #10
 8004792:	4649      	mov	r1, r9
 8004794:	4620      	mov	r0, r4
 8004796:	d105      	bne.n	80047a4 <_dtoa_r+0xaa4>
 8004798:	f000 f8d6 	bl	8004948 <__multadd>
 800479c:	4681      	mov	r9, r0
 800479e:	4606      	mov	r6, r0
 80047a0:	9505      	str	r5, [sp, #20]
 80047a2:	e776      	b.n	8004692 <_dtoa_r+0x992>
 80047a4:	f000 f8d0 	bl	8004948 <__multadd>
 80047a8:	4631      	mov	r1, r6
 80047aa:	4681      	mov	r9, r0
 80047ac:	2300      	movs	r3, #0
 80047ae:	220a      	movs	r2, #10
 80047b0:	4620      	mov	r0, r4
 80047b2:	f000 f8c9 	bl	8004948 <__multadd>
 80047b6:	4606      	mov	r6, r0
 80047b8:	e7f2      	b.n	80047a0 <_dtoa_r+0xaa0>
 80047ba:	f04f 0900 	mov.w	r9, #0
 80047be:	2201      	movs	r2, #1
 80047c0:	9904      	ldr	r1, [sp, #16]
 80047c2:	4620      	mov	r0, r4
 80047c4:	f000 fa36 	bl	8004c34 <__lshift>
 80047c8:	4639      	mov	r1, r7
 80047ca:	9004      	str	r0, [sp, #16]
 80047cc:	f000 fa86 	bl	8004cdc <__mcmp>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	dcb6      	bgt.n	8004742 <_dtoa_r+0xa42>
 80047d4:	d102      	bne.n	80047dc <_dtoa_r+0xadc>
 80047d6:	f018 0f01 	tst.w	r8, #1
 80047da:	d1b2      	bne.n	8004742 <_dtoa_r+0xa42>
 80047dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80047e0:	2b30      	cmp	r3, #48	; 0x30
 80047e2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80047e6:	f47f af0a 	bne.w	80045fe <_dtoa_r+0x8fe>
 80047ea:	4615      	mov	r5, r2
 80047ec:	e7f6      	b.n	80047dc <_dtoa_r+0xadc>
 80047ee:	4593      	cmp	fp, r2
 80047f0:	d105      	bne.n	80047fe <_dtoa_r+0xafe>
 80047f2:	2331      	movs	r3, #49	; 0x31
 80047f4:	f10a 0a01 	add.w	sl, sl, #1
 80047f8:	f88b 3000 	strb.w	r3, [fp]
 80047fc:	e6ff      	b.n	80045fe <_dtoa_r+0x8fe>
 80047fe:	4615      	mov	r5, r2
 8004800:	e79f      	b.n	8004742 <_dtoa_r+0xa42>
 8004802:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004868 <_dtoa_r+0xb68>
 8004806:	e007      	b.n	8004818 <_dtoa_r+0xb18>
 8004808:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800480a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800486c <_dtoa_r+0xb6c>
 800480e:	b11b      	cbz	r3, 8004818 <_dtoa_r+0xb18>
 8004810:	f10b 0308 	add.w	r3, fp, #8
 8004814:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	4658      	mov	r0, fp
 800481a:	b017      	add	sp, #92	; 0x5c
 800481c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004820:	9b06      	ldr	r3, [sp, #24]
 8004822:	2b01      	cmp	r3, #1
 8004824:	f77f ae35 	ble.w	8004492 <_dtoa_r+0x792>
 8004828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800482a:	9307      	str	r3, [sp, #28]
 800482c:	e649      	b.n	80044c2 <_dtoa_r+0x7c2>
 800482e:	9b02      	ldr	r3, [sp, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	dc03      	bgt.n	800483c <_dtoa_r+0xb3c>
 8004834:	9b06      	ldr	r3, [sp, #24]
 8004836:	2b02      	cmp	r3, #2
 8004838:	f73f aecc 	bgt.w	80045d4 <_dtoa_r+0x8d4>
 800483c:	465d      	mov	r5, fp
 800483e:	4639      	mov	r1, r7
 8004840:	9804      	ldr	r0, [sp, #16]
 8004842:	f7ff f9d0 	bl	8003be6 <quorem>
 8004846:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800484a:	f805 8b01 	strb.w	r8, [r5], #1
 800484e:	9a02      	ldr	r2, [sp, #8]
 8004850:	eba5 030b 	sub.w	r3, r5, fp
 8004854:	429a      	cmp	r2, r3
 8004856:	ddb0      	ble.n	80047ba <_dtoa_r+0xaba>
 8004858:	2300      	movs	r3, #0
 800485a:	220a      	movs	r2, #10
 800485c:	9904      	ldr	r1, [sp, #16]
 800485e:	4620      	mov	r0, r4
 8004860:	f000 f872 	bl	8004948 <__multadd>
 8004864:	9004      	str	r0, [sp, #16]
 8004866:	e7ea      	b.n	800483e <_dtoa_r+0xb3e>
 8004868:	080051c0 	.word	0x080051c0
 800486c:	080051c2 	.word	0x080051c2

08004870 <_localeconv_r>:
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <_localeconv_r+0x14>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6a18      	ldr	r0, [r3, #32]
 8004876:	4b04      	ldr	r3, [pc, #16]	; (8004888 <_localeconv_r+0x18>)
 8004878:	2800      	cmp	r0, #0
 800487a:	bf08      	it	eq
 800487c:	4618      	moveq	r0, r3
 800487e:	30f0      	adds	r0, #240	; 0xf0
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000110 	.word	0x20000110
 8004888:	20000174 	.word	0x20000174

0800488c <malloc>:
 800488c:	4b02      	ldr	r3, [pc, #8]	; (8004898 <malloc+0xc>)
 800488e:	4601      	mov	r1, r0
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	f000 baf7 	b.w	8004e84 <_malloc_r>
 8004896:	bf00      	nop
 8004898:	20000110 	.word	0x20000110

0800489c <memcpy>:
 800489c:	b510      	push	{r4, lr}
 800489e:	1e43      	subs	r3, r0, #1
 80048a0:	440a      	add	r2, r1
 80048a2:	4291      	cmp	r1, r2
 80048a4:	d100      	bne.n	80048a8 <memcpy+0xc>
 80048a6:	bd10      	pop	{r4, pc}
 80048a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048b0:	e7f7      	b.n	80048a2 <memcpy+0x6>

080048b2 <_Balloc>:
 80048b2:	b570      	push	{r4, r5, r6, lr}
 80048b4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80048b6:	4604      	mov	r4, r0
 80048b8:	460e      	mov	r6, r1
 80048ba:	b93d      	cbnz	r5, 80048cc <_Balloc+0x1a>
 80048bc:	2010      	movs	r0, #16
 80048be:	f7ff ffe5 	bl	800488c <malloc>
 80048c2:	6260      	str	r0, [r4, #36]	; 0x24
 80048c4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80048c8:	6005      	str	r5, [r0, #0]
 80048ca:	60c5      	str	r5, [r0, #12]
 80048cc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80048ce:	68eb      	ldr	r3, [r5, #12]
 80048d0:	b183      	cbz	r3, 80048f4 <_Balloc+0x42>
 80048d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80048da:	b9b8      	cbnz	r0, 800490c <_Balloc+0x5a>
 80048dc:	2101      	movs	r1, #1
 80048de:	fa01 f506 	lsl.w	r5, r1, r6
 80048e2:	1d6a      	adds	r2, r5, #5
 80048e4:	0092      	lsls	r2, r2, #2
 80048e6:	4620      	mov	r0, r4
 80048e8:	f000 fabe 	bl	8004e68 <_calloc_r>
 80048ec:	b160      	cbz	r0, 8004908 <_Balloc+0x56>
 80048ee:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80048f2:	e00e      	b.n	8004912 <_Balloc+0x60>
 80048f4:	2221      	movs	r2, #33	; 0x21
 80048f6:	2104      	movs	r1, #4
 80048f8:	4620      	mov	r0, r4
 80048fa:	f000 fab5 	bl	8004e68 <_calloc_r>
 80048fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004900:	60e8      	str	r0, [r5, #12]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e4      	bne.n	80048d2 <_Balloc+0x20>
 8004908:	2000      	movs	r0, #0
 800490a:	bd70      	pop	{r4, r5, r6, pc}
 800490c:	6802      	ldr	r2, [r0, #0]
 800490e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004912:	2300      	movs	r3, #0
 8004914:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004918:	e7f7      	b.n	800490a <_Balloc+0x58>

0800491a <_Bfree>:
 800491a:	b570      	push	{r4, r5, r6, lr}
 800491c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800491e:	4606      	mov	r6, r0
 8004920:	460d      	mov	r5, r1
 8004922:	b93c      	cbnz	r4, 8004934 <_Bfree+0x1a>
 8004924:	2010      	movs	r0, #16
 8004926:	f7ff ffb1 	bl	800488c <malloc>
 800492a:	6270      	str	r0, [r6, #36]	; 0x24
 800492c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004930:	6004      	str	r4, [r0, #0]
 8004932:	60c4      	str	r4, [r0, #12]
 8004934:	b13d      	cbz	r5, 8004946 <_Bfree+0x2c>
 8004936:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004938:	686a      	ldr	r2, [r5, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004940:	6029      	str	r1, [r5, #0]
 8004942:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004946:	bd70      	pop	{r4, r5, r6, pc}

08004948 <__multadd>:
 8004948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800494c:	690d      	ldr	r5, [r1, #16]
 800494e:	461f      	mov	r7, r3
 8004950:	4606      	mov	r6, r0
 8004952:	460c      	mov	r4, r1
 8004954:	f101 0c14 	add.w	ip, r1, #20
 8004958:	2300      	movs	r3, #0
 800495a:	f8dc 0000 	ldr.w	r0, [ip]
 800495e:	b281      	uxth	r1, r0
 8004960:	fb02 7101 	mla	r1, r2, r1, r7
 8004964:	0c0f      	lsrs	r7, r1, #16
 8004966:	0c00      	lsrs	r0, r0, #16
 8004968:	fb02 7000 	mla	r0, r2, r0, r7
 800496c:	b289      	uxth	r1, r1
 800496e:	3301      	adds	r3, #1
 8004970:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004974:	429d      	cmp	r5, r3
 8004976:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800497a:	f84c 1b04 	str.w	r1, [ip], #4
 800497e:	dcec      	bgt.n	800495a <__multadd+0x12>
 8004980:	b1d7      	cbz	r7, 80049b8 <__multadd+0x70>
 8004982:	68a3      	ldr	r3, [r4, #8]
 8004984:	42ab      	cmp	r3, r5
 8004986:	dc12      	bgt.n	80049ae <__multadd+0x66>
 8004988:	6861      	ldr	r1, [r4, #4]
 800498a:	4630      	mov	r0, r6
 800498c:	3101      	adds	r1, #1
 800498e:	f7ff ff90 	bl	80048b2 <_Balloc>
 8004992:	6922      	ldr	r2, [r4, #16]
 8004994:	3202      	adds	r2, #2
 8004996:	f104 010c 	add.w	r1, r4, #12
 800499a:	4680      	mov	r8, r0
 800499c:	0092      	lsls	r2, r2, #2
 800499e:	300c      	adds	r0, #12
 80049a0:	f7ff ff7c 	bl	800489c <memcpy>
 80049a4:	4621      	mov	r1, r4
 80049a6:	4630      	mov	r0, r6
 80049a8:	f7ff ffb7 	bl	800491a <_Bfree>
 80049ac:	4644      	mov	r4, r8
 80049ae:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80049b2:	3501      	adds	r5, #1
 80049b4:	615f      	str	r7, [r3, #20]
 80049b6:	6125      	str	r5, [r4, #16]
 80049b8:	4620      	mov	r0, r4
 80049ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080049be <__hi0bits>:
 80049be:	0c02      	lsrs	r2, r0, #16
 80049c0:	0412      	lsls	r2, r2, #16
 80049c2:	4603      	mov	r3, r0
 80049c4:	b9b2      	cbnz	r2, 80049f4 <__hi0bits+0x36>
 80049c6:	0403      	lsls	r3, r0, #16
 80049c8:	2010      	movs	r0, #16
 80049ca:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80049ce:	bf04      	itt	eq
 80049d0:	021b      	lsleq	r3, r3, #8
 80049d2:	3008      	addeq	r0, #8
 80049d4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80049d8:	bf04      	itt	eq
 80049da:	011b      	lsleq	r3, r3, #4
 80049dc:	3004      	addeq	r0, #4
 80049de:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80049e2:	bf04      	itt	eq
 80049e4:	009b      	lsleq	r3, r3, #2
 80049e6:	3002      	addeq	r0, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	db06      	blt.n	80049fa <__hi0bits+0x3c>
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	d503      	bpl.n	80049f8 <__hi0bits+0x3a>
 80049f0:	3001      	adds	r0, #1
 80049f2:	4770      	bx	lr
 80049f4:	2000      	movs	r0, #0
 80049f6:	e7e8      	b.n	80049ca <__hi0bits+0xc>
 80049f8:	2020      	movs	r0, #32
 80049fa:	4770      	bx	lr

080049fc <__lo0bits>:
 80049fc:	6803      	ldr	r3, [r0, #0]
 80049fe:	f013 0207 	ands.w	r2, r3, #7
 8004a02:	4601      	mov	r1, r0
 8004a04:	d00b      	beq.n	8004a1e <__lo0bits+0x22>
 8004a06:	07da      	lsls	r2, r3, #31
 8004a08:	d423      	bmi.n	8004a52 <__lo0bits+0x56>
 8004a0a:	0798      	lsls	r0, r3, #30
 8004a0c:	bf49      	itett	mi
 8004a0e:	085b      	lsrmi	r3, r3, #1
 8004a10:	089b      	lsrpl	r3, r3, #2
 8004a12:	2001      	movmi	r0, #1
 8004a14:	600b      	strmi	r3, [r1, #0]
 8004a16:	bf5c      	itt	pl
 8004a18:	600b      	strpl	r3, [r1, #0]
 8004a1a:	2002      	movpl	r0, #2
 8004a1c:	4770      	bx	lr
 8004a1e:	b298      	uxth	r0, r3
 8004a20:	b9a8      	cbnz	r0, 8004a4e <__lo0bits+0x52>
 8004a22:	0c1b      	lsrs	r3, r3, #16
 8004a24:	2010      	movs	r0, #16
 8004a26:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004a2a:	bf04      	itt	eq
 8004a2c:	0a1b      	lsreq	r3, r3, #8
 8004a2e:	3008      	addeq	r0, #8
 8004a30:	071a      	lsls	r2, r3, #28
 8004a32:	bf04      	itt	eq
 8004a34:	091b      	lsreq	r3, r3, #4
 8004a36:	3004      	addeq	r0, #4
 8004a38:	079a      	lsls	r2, r3, #30
 8004a3a:	bf04      	itt	eq
 8004a3c:	089b      	lsreq	r3, r3, #2
 8004a3e:	3002      	addeq	r0, #2
 8004a40:	07da      	lsls	r2, r3, #31
 8004a42:	d402      	bmi.n	8004a4a <__lo0bits+0x4e>
 8004a44:	085b      	lsrs	r3, r3, #1
 8004a46:	d006      	beq.n	8004a56 <__lo0bits+0x5a>
 8004a48:	3001      	adds	r0, #1
 8004a4a:	600b      	str	r3, [r1, #0]
 8004a4c:	4770      	bx	lr
 8004a4e:	4610      	mov	r0, r2
 8004a50:	e7e9      	b.n	8004a26 <__lo0bits+0x2a>
 8004a52:	2000      	movs	r0, #0
 8004a54:	4770      	bx	lr
 8004a56:	2020      	movs	r0, #32
 8004a58:	4770      	bx	lr

08004a5a <__i2b>:
 8004a5a:	b510      	push	{r4, lr}
 8004a5c:	460c      	mov	r4, r1
 8004a5e:	2101      	movs	r1, #1
 8004a60:	f7ff ff27 	bl	80048b2 <_Balloc>
 8004a64:	2201      	movs	r2, #1
 8004a66:	6144      	str	r4, [r0, #20]
 8004a68:	6102      	str	r2, [r0, #16]
 8004a6a:	bd10      	pop	{r4, pc}

08004a6c <__multiply>:
 8004a6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a70:	4614      	mov	r4, r2
 8004a72:	690a      	ldr	r2, [r1, #16]
 8004a74:	6923      	ldr	r3, [r4, #16]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	bfb8      	it	lt
 8004a7a:	460b      	movlt	r3, r1
 8004a7c:	4688      	mov	r8, r1
 8004a7e:	bfbc      	itt	lt
 8004a80:	46a0      	movlt	r8, r4
 8004a82:	461c      	movlt	r4, r3
 8004a84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004a88:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004a8c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004a90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004a94:	eb07 0609 	add.w	r6, r7, r9
 8004a98:	42b3      	cmp	r3, r6
 8004a9a:	bfb8      	it	lt
 8004a9c:	3101      	addlt	r1, #1
 8004a9e:	f7ff ff08 	bl	80048b2 <_Balloc>
 8004aa2:	f100 0514 	add.w	r5, r0, #20
 8004aa6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004aaa:	462b      	mov	r3, r5
 8004aac:	2200      	movs	r2, #0
 8004aae:	4573      	cmp	r3, lr
 8004ab0:	d316      	bcc.n	8004ae0 <__multiply+0x74>
 8004ab2:	f104 0214 	add.w	r2, r4, #20
 8004ab6:	f108 0114 	add.w	r1, r8, #20
 8004aba:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004abe:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	9b00      	ldr	r3, [sp, #0]
 8004ac6:	9201      	str	r2, [sp, #4]
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d80c      	bhi.n	8004ae6 <__multiply+0x7a>
 8004acc:	2e00      	cmp	r6, #0
 8004ace:	dd03      	ble.n	8004ad8 <__multiply+0x6c>
 8004ad0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d05d      	beq.n	8004b94 <__multiply+0x128>
 8004ad8:	6106      	str	r6, [r0, #16]
 8004ada:	b003      	add	sp, #12
 8004adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae0:	f843 2b04 	str.w	r2, [r3], #4
 8004ae4:	e7e3      	b.n	8004aae <__multiply+0x42>
 8004ae6:	f8b2 b000 	ldrh.w	fp, [r2]
 8004aea:	f1bb 0f00 	cmp.w	fp, #0
 8004aee:	d023      	beq.n	8004b38 <__multiply+0xcc>
 8004af0:	4689      	mov	r9, r1
 8004af2:	46ac      	mov	ip, r5
 8004af4:	f04f 0800 	mov.w	r8, #0
 8004af8:	f859 4b04 	ldr.w	r4, [r9], #4
 8004afc:	f8dc a000 	ldr.w	sl, [ip]
 8004b00:	b2a3      	uxth	r3, r4
 8004b02:	fa1f fa8a 	uxth.w	sl, sl
 8004b06:	fb0b a303 	mla	r3, fp, r3, sl
 8004b0a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004b0e:	f8dc 4000 	ldr.w	r4, [ip]
 8004b12:	4443      	add	r3, r8
 8004b14:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004b18:	fb0b 840a 	mla	r4, fp, sl, r8
 8004b1c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004b20:	46e2      	mov	sl, ip
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004b28:	454f      	cmp	r7, r9
 8004b2a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004b2e:	f84a 3b04 	str.w	r3, [sl], #4
 8004b32:	d82b      	bhi.n	8004b8c <__multiply+0x120>
 8004b34:	f8cc 8004 	str.w	r8, [ip, #4]
 8004b38:	9b01      	ldr	r3, [sp, #4]
 8004b3a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004b3e:	3204      	adds	r2, #4
 8004b40:	f1ba 0f00 	cmp.w	sl, #0
 8004b44:	d020      	beq.n	8004b88 <__multiply+0x11c>
 8004b46:	682b      	ldr	r3, [r5, #0]
 8004b48:	4689      	mov	r9, r1
 8004b4a:	46a8      	mov	r8, r5
 8004b4c:	f04f 0b00 	mov.w	fp, #0
 8004b50:	f8b9 c000 	ldrh.w	ip, [r9]
 8004b54:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004b58:	fb0a 440c 	mla	r4, sl, ip, r4
 8004b5c:	445c      	add	r4, fp
 8004b5e:	46c4      	mov	ip, r8
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004b66:	f84c 3b04 	str.w	r3, [ip], #4
 8004b6a:	f859 3b04 	ldr.w	r3, [r9], #4
 8004b6e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004b72:	0c1b      	lsrs	r3, r3, #16
 8004b74:	fb0a b303 	mla	r3, sl, r3, fp
 8004b78:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004b7c:	454f      	cmp	r7, r9
 8004b7e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004b82:	d805      	bhi.n	8004b90 <__multiply+0x124>
 8004b84:	f8c8 3004 	str.w	r3, [r8, #4]
 8004b88:	3504      	adds	r5, #4
 8004b8a:	e79b      	b.n	8004ac4 <__multiply+0x58>
 8004b8c:	46d4      	mov	ip, sl
 8004b8e:	e7b3      	b.n	8004af8 <__multiply+0x8c>
 8004b90:	46e0      	mov	r8, ip
 8004b92:	e7dd      	b.n	8004b50 <__multiply+0xe4>
 8004b94:	3e01      	subs	r6, #1
 8004b96:	e799      	b.n	8004acc <__multiply+0x60>

08004b98 <__pow5mult>:
 8004b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b9c:	4615      	mov	r5, r2
 8004b9e:	f012 0203 	ands.w	r2, r2, #3
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	460f      	mov	r7, r1
 8004ba6:	d007      	beq.n	8004bb8 <__pow5mult+0x20>
 8004ba8:	3a01      	subs	r2, #1
 8004baa:	4c21      	ldr	r4, [pc, #132]	; (8004c30 <__pow5mult+0x98>)
 8004bac:	2300      	movs	r3, #0
 8004bae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004bb2:	f7ff fec9 	bl	8004948 <__multadd>
 8004bb6:	4607      	mov	r7, r0
 8004bb8:	10ad      	asrs	r5, r5, #2
 8004bba:	d035      	beq.n	8004c28 <__pow5mult+0x90>
 8004bbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004bbe:	b93c      	cbnz	r4, 8004bd0 <__pow5mult+0x38>
 8004bc0:	2010      	movs	r0, #16
 8004bc2:	f7ff fe63 	bl	800488c <malloc>
 8004bc6:	6270      	str	r0, [r6, #36]	; 0x24
 8004bc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004bcc:	6004      	str	r4, [r0, #0]
 8004bce:	60c4      	str	r4, [r0, #12]
 8004bd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004bd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004bd8:	b94c      	cbnz	r4, 8004bee <__pow5mult+0x56>
 8004bda:	f240 2171 	movw	r1, #625	; 0x271
 8004bde:	4630      	mov	r0, r6
 8004be0:	f7ff ff3b 	bl	8004a5a <__i2b>
 8004be4:	2300      	movs	r3, #0
 8004be6:	f8c8 0008 	str.w	r0, [r8, #8]
 8004bea:	4604      	mov	r4, r0
 8004bec:	6003      	str	r3, [r0, #0]
 8004bee:	f04f 0800 	mov.w	r8, #0
 8004bf2:	07eb      	lsls	r3, r5, #31
 8004bf4:	d50a      	bpl.n	8004c0c <__pow5mult+0x74>
 8004bf6:	4639      	mov	r1, r7
 8004bf8:	4622      	mov	r2, r4
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f7ff ff36 	bl	8004a6c <__multiply>
 8004c00:	4639      	mov	r1, r7
 8004c02:	4681      	mov	r9, r0
 8004c04:	4630      	mov	r0, r6
 8004c06:	f7ff fe88 	bl	800491a <_Bfree>
 8004c0a:	464f      	mov	r7, r9
 8004c0c:	106d      	asrs	r5, r5, #1
 8004c0e:	d00b      	beq.n	8004c28 <__pow5mult+0x90>
 8004c10:	6820      	ldr	r0, [r4, #0]
 8004c12:	b938      	cbnz	r0, 8004c24 <__pow5mult+0x8c>
 8004c14:	4622      	mov	r2, r4
 8004c16:	4621      	mov	r1, r4
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f7ff ff27 	bl	8004a6c <__multiply>
 8004c1e:	6020      	str	r0, [r4, #0]
 8004c20:	f8c0 8000 	str.w	r8, [r0]
 8004c24:	4604      	mov	r4, r0
 8004c26:	e7e4      	b.n	8004bf2 <__pow5mult+0x5a>
 8004c28:	4638      	mov	r0, r7
 8004c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c2e:	bf00      	nop
 8004c30:	080052c0 	.word	0x080052c0

08004c34 <__lshift>:
 8004c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c38:	460c      	mov	r4, r1
 8004c3a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004c3e:	6923      	ldr	r3, [r4, #16]
 8004c40:	6849      	ldr	r1, [r1, #4]
 8004c42:	eb0a 0903 	add.w	r9, sl, r3
 8004c46:	68a3      	ldr	r3, [r4, #8]
 8004c48:	4607      	mov	r7, r0
 8004c4a:	4616      	mov	r6, r2
 8004c4c:	f109 0501 	add.w	r5, r9, #1
 8004c50:	42ab      	cmp	r3, r5
 8004c52:	db32      	blt.n	8004cba <__lshift+0x86>
 8004c54:	4638      	mov	r0, r7
 8004c56:	f7ff fe2c 	bl	80048b2 <_Balloc>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	4680      	mov	r8, r0
 8004c5e:	f100 0114 	add.w	r1, r0, #20
 8004c62:	461a      	mov	r2, r3
 8004c64:	4553      	cmp	r3, sl
 8004c66:	db2b      	blt.n	8004cc0 <__lshift+0x8c>
 8004c68:	6920      	ldr	r0, [r4, #16]
 8004c6a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004c6e:	f104 0314 	add.w	r3, r4, #20
 8004c72:	f016 021f 	ands.w	r2, r6, #31
 8004c76:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004c7a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004c7e:	d025      	beq.n	8004ccc <__lshift+0x98>
 8004c80:	f1c2 0e20 	rsb	lr, r2, #32
 8004c84:	2000      	movs	r0, #0
 8004c86:	681e      	ldr	r6, [r3, #0]
 8004c88:	468a      	mov	sl, r1
 8004c8a:	4096      	lsls	r6, r2
 8004c8c:	4330      	orrs	r0, r6
 8004c8e:	f84a 0b04 	str.w	r0, [sl], #4
 8004c92:	f853 0b04 	ldr.w	r0, [r3], #4
 8004c96:	459c      	cmp	ip, r3
 8004c98:	fa20 f00e 	lsr.w	r0, r0, lr
 8004c9c:	d814      	bhi.n	8004cc8 <__lshift+0x94>
 8004c9e:	6048      	str	r0, [r1, #4]
 8004ca0:	b108      	cbz	r0, 8004ca6 <__lshift+0x72>
 8004ca2:	f109 0502 	add.w	r5, r9, #2
 8004ca6:	3d01      	subs	r5, #1
 8004ca8:	4638      	mov	r0, r7
 8004caa:	f8c8 5010 	str.w	r5, [r8, #16]
 8004cae:	4621      	mov	r1, r4
 8004cb0:	f7ff fe33 	bl	800491a <_Bfree>
 8004cb4:	4640      	mov	r0, r8
 8004cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cba:	3101      	adds	r1, #1
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	e7c7      	b.n	8004c50 <__lshift+0x1c>
 8004cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	e7cd      	b.n	8004c64 <__lshift+0x30>
 8004cc8:	4651      	mov	r1, sl
 8004cca:	e7dc      	b.n	8004c86 <__lshift+0x52>
 8004ccc:	3904      	subs	r1, #4
 8004cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cd2:	f841 2f04 	str.w	r2, [r1, #4]!
 8004cd6:	459c      	cmp	ip, r3
 8004cd8:	d8f9      	bhi.n	8004cce <__lshift+0x9a>
 8004cda:	e7e4      	b.n	8004ca6 <__lshift+0x72>

08004cdc <__mcmp>:
 8004cdc:	6903      	ldr	r3, [r0, #16]
 8004cde:	690a      	ldr	r2, [r1, #16]
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	b530      	push	{r4, r5, lr}
 8004ce4:	d10c      	bne.n	8004d00 <__mcmp+0x24>
 8004ce6:	0092      	lsls	r2, r2, #2
 8004ce8:	3014      	adds	r0, #20
 8004cea:	3114      	adds	r1, #20
 8004cec:	1884      	adds	r4, r0, r2
 8004cee:	4411      	add	r1, r2
 8004cf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004cf4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004cf8:	4295      	cmp	r5, r2
 8004cfa:	d003      	beq.n	8004d04 <__mcmp+0x28>
 8004cfc:	d305      	bcc.n	8004d0a <__mcmp+0x2e>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4618      	mov	r0, r3
 8004d02:	bd30      	pop	{r4, r5, pc}
 8004d04:	42a0      	cmp	r0, r4
 8004d06:	d3f3      	bcc.n	8004cf0 <__mcmp+0x14>
 8004d08:	e7fa      	b.n	8004d00 <__mcmp+0x24>
 8004d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d0e:	e7f7      	b.n	8004d00 <__mcmp+0x24>

08004d10 <__mdiff>:
 8004d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d14:	460d      	mov	r5, r1
 8004d16:	4607      	mov	r7, r0
 8004d18:	4611      	mov	r1, r2
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	4614      	mov	r4, r2
 8004d1e:	f7ff ffdd 	bl	8004cdc <__mcmp>
 8004d22:	1e06      	subs	r6, r0, #0
 8004d24:	d108      	bne.n	8004d38 <__mdiff+0x28>
 8004d26:	4631      	mov	r1, r6
 8004d28:	4638      	mov	r0, r7
 8004d2a:	f7ff fdc2 	bl	80048b2 <_Balloc>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d38:	bfa4      	itt	ge
 8004d3a:	4623      	movge	r3, r4
 8004d3c:	462c      	movge	r4, r5
 8004d3e:	4638      	mov	r0, r7
 8004d40:	6861      	ldr	r1, [r4, #4]
 8004d42:	bfa6      	itte	ge
 8004d44:	461d      	movge	r5, r3
 8004d46:	2600      	movge	r6, #0
 8004d48:	2601      	movlt	r6, #1
 8004d4a:	f7ff fdb2 	bl	80048b2 <_Balloc>
 8004d4e:	692b      	ldr	r3, [r5, #16]
 8004d50:	60c6      	str	r6, [r0, #12]
 8004d52:	6926      	ldr	r6, [r4, #16]
 8004d54:	f105 0914 	add.w	r9, r5, #20
 8004d58:	f104 0214 	add.w	r2, r4, #20
 8004d5c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004d60:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004d64:	f100 0514 	add.w	r5, r0, #20
 8004d68:	f04f 0e00 	mov.w	lr, #0
 8004d6c:	f852 ab04 	ldr.w	sl, [r2], #4
 8004d70:	f859 4b04 	ldr.w	r4, [r9], #4
 8004d74:	fa1e f18a 	uxtah	r1, lr, sl
 8004d78:	b2a3      	uxth	r3, r4
 8004d7a:	1ac9      	subs	r1, r1, r3
 8004d7c:	0c23      	lsrs	r3, r4, #16
 8004d7e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004d82:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004d86:	b289      	uxth	r1, r1
 8004d88:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004d8c:	45c8      	cmp	r8, r9
 8004d8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004d92:	4694      	mov	ip, r2
 8004d94:	f845 3b04 	str.w	r3, [r5], #4
 8004d98:	d8e8      	bhi.n	8004d6c <__mdiff+0x5c>
 8004d9a:	45bc      	cmp	ip, r7
 8004d9c:	d304      	bcc.n	8004da8 <__mdiff+0x98>
 8004d9e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004da2:	b183      	cbz	r3, 8004dc6 <__mdiff+0xb6>
 8004da4:	6106      	str	r6, [r0, #16]
 8004da6:	e7c5      	b.n	8004d34 <__mdiff+0x24>
 8004da8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004dac:	fa1e f381 	uxtah	r3, lr, r1
 8004db0:	141a      	asrs	r2, r3, #16
 8004db2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dbc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004dc0:	f845 3b04 	str.w	r3, [r5], #4
 8004dc4:	e7e9      	b.n	8004d9a <__mdiff+0x8a>
 8004dc6:	3e01      	subs	r6, #1
 8004dc8:	e7e9      	b.n	8004d9e <__mdiff+0x8e>

08004dca <__d2b>:
 8004dca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004dce:	460e      	mov	r6, r1
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	ec59 8b10 	vmov	r8, r9, d0
 8004dd6:	4615      	mov	r5, r2
 8004dd8:	f7ff fd6b 	bl	80048b2 <_Balloc>
 8004ddc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004de0:	4607      	mov	r7, r0
 8004de2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004de6:	bb34      	cbnz	r4, 8004e36 <__d2b+0x6c>
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	f1b8 0300 	subs.w	r3, r8, #0
 8004dee:	d027      	beq.n	8004e40 <__d2b+0x76>
 8004df0:	a802      	add	r0, sp, #8
 8004df2:	f840 3d08 	str.w	r3, [r0, #-8]!
 8004df6:	f7ff fe01 	bl	80049fc <__lo0bits>
 8004dfa:	9900      	ldr	r1, [sp, #0]
 8004dfc:	b1f0      	cbz	r0, 8004e3c <__d2b+0x72>
 8004dfe:	9a01      	ldr	r2, [sp, #4]
 8004e00:	f1c0 0320 	rsb	r3, r0, #32
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	40c2      	lsrs	r2, r0
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	9201      	str	r2, [sp, #4]
 8004e10:	9b01      	ldr	r3, [sp, #4]
 8004e12:	61bb      	str	r3, [r7, #24]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bf14      	ite	ne
 8004e18:	2102      	movne	r1, #2
 8004e1a:	2101      	moveq	r1, #1
 8004e1c:	6139      	str	r1, [r7, #16]
 8004e1e:	b1c4      	cbz	r4, 8004e52 <__d2b+0x88>
 8004e20:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004e24:	4404      	add	r4, r0
 8004e26:	6034      	str	r4, [r6, #0]
 8004e28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004e2c:	6028      	str	r0, [r5, #0]
 8004e2e:	4638      	mov	r0, r7
 8004e30:	b003      	add	sp, #12
 8004e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e3a:	e7d5      	b.n	8004de8 <__d2b+0x1e>
 8004e3c:	6179      	str	r1, [r7, #20]
 8004e3e:	e7e7      	b.n	8004e10 <__d2b+0x46>
 8004e40:	a801      	add	r0, sp, #4
 8004e42:	f7ff fddb 	bl	80049fc <__lo0bits>
 8004e46:	9b01      	ldr	r3, [sp, #4]
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	6139      	str	r1, [r7, #16]
 8004e4e:	3020      	adds	r0, #32
 8004e50:	e7e5      	b.n	8004e1e <__d2b+0x54>
 8004e52:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004e56:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e5a:	6030      	str	r0, [r6, #0]
 8004e5c:	6918      	ldr	r0, [r3, #16]
 8004e5e:	f7ff fdae 	bl	80049be <__hi0bits>
 8004e62:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004e66:	e7e1      	b.n	8004e2c <__d2b+0x62>

08004e68 <_calloc_r>:
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	fb02 f401 	mul.w	r4, r2, r1
 8004e6e:	4621      	mov	r1, r4
 8004e70:	f000 f808 	bl	8004e84 <_malloc_r>
 8004e74:	4605      	mov	r5, r0
 8004e76:	b118      	cbz	r0, 8004e80 <_calloc_r+0x18>
 8004e78:	4622      	mov	r2, r4
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	f7fe fb62 	bl	8003544 <memset>
 8004e80:	4628      	mov	r0, r5
 8004e82:	bd38      	pop	{r3, r4, r5, pc}

08004e84 <_malloc_r>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	1ccd      	adds	r5, r1, #3
 8004e88:	f025 0503 	bic.w	r5, r5, #3
 8004e8c:	3508      	adds	r5, #8
 8004e8e:	2d0c      	cmp	r5, #12
 8004e90:	bf38      	it	cc
 8004e92:	250c      	movcc	r5, #12
 8004e94:	2d00      	cmp	r5, #0
 8004e96:	4606      	mov	r6, r0
 8004e98:	db01      	blt.n	8004e9e <_malloc_r+0x1a>
 8004e9a:	42a9      	cmp	r1, r5
 8004e9c:	d903      	bls.n	8004ea6 <_malloc_r+0x22>
 8004e9e:	230c      	movs	r3, #12
 8004ea0:	6033      	str	r3, [r6, #0]
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	bd70      	pop	{r4, r5, r6, pc}
 8004ea6:	f000 f869 	bl	8004f7c <__malloc_lock>
 8004eaa:	4a21      	ldr	r2, [pc, #132]	; (8004f30 <_malloc_r+0xac>)
 8004eac:	6814      	ldr	r4, [r2, #0]
 8004eae:	4621      	mov	r1, r4
 8004eb0:	b991      	cbnz	r1, 8004ed8 <_malloc_r+0x54>
 8004eb2:	4c20      	ldr	r4, [pc, #128]	; (8004f34 <_malloc_r+0xb0>)
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	b91b      	cbnz	r3, 8004ec0 <_malloc_r+0x3c>
 8004eb8:	4630      	mov	r0, r6
 8004eba:	f000 f83d 	bl	8004f38 <_sbrk_r>
 8004ebe:	6020      	str	r0, [r4, #0]
 8004ec0:	4629      	mov	r1, r5
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	f000 f838 	bl	8004f38 <_sbrk_r>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d124      	bne.n	8004f16 <_malloc_r+0x92>
 8004ecc:	230c      	movs	r3, #12
 8004ece:	6033      	str	r3, [r6, #0]
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	f000 f854 	bl	8004f7e <__malloc_unlock>
 8004ed6:	e7e4      	b.n	8004ea2 <_malloc_r+0x1e>
 8004ed8:	680b      	ldr	r3, [r1, #0]
 8004eda:	1b5b      	subs	r3, r3, r5
 8004edc:	d418      	bmi.n	8004f10 <_malloc_r+0x8c>
 8004ede:	2b0b      	cmp	r3, #11
 8004ee0:	d90f      	bls.n	8004f02 <_malloc_r+0x7e>
 8004ee2:	600b      	str	r3, [r1, #0]
 8004ee4:	50cd      	str	r5, [r1, r3]
 8004ee6:	18cc      	adds	r4, r1, r3
 8004ee8:	4630      	mov	r0, r6
 8004eea:	f000 f848 	bl	8004f7e <__malloc_unlock>
 8004eee:	f104 000b 	add.w	r0, r4, #11
 8004ef2:	1d23      	adds	r3, r4, #4
 8004ef4:	f020 0007 	bic.w	r0, r0, #7
 8004ef8:	1ac3      	subs	r3, r0, r3
 8004efa:	d0d3      	beq.n	8004ea4 <_malloc_r+0x20>
 8004efc:	425a      	negs	r2, r3
 8004efe:	50e2      	str	r2, [r4, r3]
 8004f00:	e7d0      	b.n	8004ea4 <_malloc_r+0x20>
 8004f02:	428c      	cmp	r4, r1
 8004f04:	684b      	ldr	r3, [r1, #4]
 8004f06:	bf16      	itet	ne
 8004f08:	6063      	strne	r3, [r4, #4]
 8004f0a:	6013      	streq	r3, [r2, #0]
 8004f0c:	460c      	movne	r4, r1
 8004f0e:	e7eb      	b.n	8004ee8 <_malloc_r+0x64>
 8004f10:	460c      	mov	r4, r1
 8004f12:	6849      	ldr	r1, [r1, #4]
 8004f14:	e7cc      	b.n	8004eb0 <_malloc_r+0x2c>
 8004f16:	1cc4      	adds	r4, r0, #3
 8004f18:	f024 0403 	bic.w	r4, r4, #3
 8004f1c:	42a0      	cmp	r0, r4
 8004f1e:	d005      	beq.n	8004f2c <_malloc_r+0xa8>
 8004f20:	1a21      	subs	r1, r4, r0
 8004f22:	4630      	mov	r0, r6
 8004f24:	f000 f808 	bl	8004f38 <_sbrk_r>
 8004f28:	3001      	adds	r0, #1
 8004f2a:	d0cf      	beq.n	8004ecc <_malloc_r+0x48>
 8004f2c:	6025      	str	r5, [r4, #0]
 8004f2e:	e7db      	b.n	8004ee8 <_malloc_r+0x64>
 8004f30:	20000300 	.word	0x20000300
 8004f34:	20000304 	.word	0x20000304

08004f38 <_sbrk_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4c06      	ldr	r4, [pc, #24]	; (8004f54 <_sbrk_r+0x1c>)
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	4605      	mov	r5, r0
 8004f40:	4608      	mov	r0, r1
 8004f42:	6023      	str	r3, [r4, #0]
 8004f44:	f7fe f9f0 	bl	8003328 <_sbrk>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d102      	bne.n	8004f52 <_sbrk_r+0x1a>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	b103      	cbz	r3, 8004f52 <_sbrk_r+0x1a>
 8004f50:	602b      	str	r3, [r5, #0]
 8004f52:	bd38      	pop	{r3, r4, r5, pc}
 8004f54:	200004d8 	.word	0x200004d8

08004f58 <__ascii_mbtowc>:
 8004f58:	b082      	sub	sp, #8
 8004f5a:	b901      	cbnz	r1, 8004f5e <__ascii_mbtowc+0x6>
 8004f5c:	a901      	add	r1, sp, #4
 8004f5e:	b142      	cbz	r2, 8004f72 <__ascii_mbtowc+0x1a>
 8004f60:	b14b      	cbz	r3, 8004f76 <__ascii_mbtowc+0x1e>
 8004f62:	7813      	ldrb	r3, [r2, #0]
 8004f64:	600b      	str	r3, [r1, #0]
 8004f66:	7812      	ldrb	r2, [r2, #0]
 8004f68:	1c10      	adds	r0, r2, #0
 8004f6a:	bf18      	it	ne
 8004f6c:	2001      	movne	r0, #1
 8004f6e:	b002      	add	sp, #8
 8004f70:	4770      	bx	lr
 8004f72:	4610      	mov	r0, r2
 8004f74:	e7fb      	b.n	8004f6e <__ascii_mbtowc+0x16>
 8004f76:	f06f 0001 	mvn.w	r0, #1
 8004f7a:	e7f8      	b.n	8004f6e <__ascii_mbtowc+0x16>

08004f7c <__malloc_lock>:
 8004f7c:	4770      	bx	lr

08004f7e <__malloc_unlock>:
 8004f7e:	4770      	bx	lr

08004f80 <__ascii_wctomb>:
 8004f80:	b149      	cbz	r1, 8004f96 <__ascii_wctomb+0x16>
 8004f82:	2aff      	cmp	r2, #255	; 0xff
 8004f84:	bf85      	ittet	hi
 8004f86:	238a      	movhi	r3, #138	; 0x8a
 8004f88:	6003      	strhi	r3, [r0, #0]
 8004f8a:	700a      	strbls	r2, [r1, #0]
 8004f8c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004f90:	bf98      	it	ls
 8004f92:	2001      	movls	r0, #1
 8004f94:	4770      	bx	lr
 8004f96:	4608      	mov	r0, r1
 8004f98:	4770      	bx	lr
	...

08004f9c <_init>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	bf00      	nop
 8004fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa2:	bc08      	pop	{r3}
 8004fa4:	469e      	mov	lr, r3
 8004fa6:	4770      	bx	lr

08004fa8 <_fini>:
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	bf00      	nop
 8004fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fae:	bc08      	pop	{r3}
 8004fb0:	469e      	mov	lr, r3
 8004fb2:	4770      	bx	lr
