
STM32_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b94  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08005d30  08005d30  00015d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006110  08006110  000202e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006110  08006110  00016110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006118  08006118  000202e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800611c  0800611c  0001611c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  08006120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  200002e4  08006404  000202e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  08006404  00020580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b59  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021b7  00000000  00000000  00029e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000938  00000000  00000000  0002c028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000810  00000000  00000000  0002c960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f8f  00000000  00000000  0002d170  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c78  00000000  00000000  000430ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084d68  00000000  00000000  0004cd77  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1adf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b08  00000000  00000000  000d1b5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002e4 	.word	0x200002e4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005d14 	.word	0x08005d14

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002e8 	.word	0x200002e8
 80001d4:	08005d14 	.word	0x08005d14

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_uldivmod>:
 8000b10:	b953      	cbnz	r3, 8000b28 <__aeabi_uldivmod+0x18>
 8000b12:	b94a      	cbnz	r2, 8000b28 <__aeabi_uldivmod+0x18>
 8000b14:	2900      	cmp	r1, #0
 8000b16:	bf08      	it	eq
 8000b18:	2800      	cmpeq	r0, #0
 8000b1a:	bf1c      	itt	ne
 8000b1c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b20:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b24:	f000 b972 	b.w	8000e0c <__aeabi_idiv0>
 8000b28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b30:	f000 f806 	bl	8000b40 <__udivmoddi4>
 8000b34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b3c:	b004      	add	sp, #16
 8000b3e:	4770      	bx	lr

08000b40 <__udivmoddi4>:
 8000b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b44:	9e08      	ldr	r6, [sp, #32]
 8000b46:	4604      	mov	r4, r0
 8000b48:	4688      	mov	r8, r1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d14b      	bne.n	8000be6 <__udivmoddi4+0xa6>
 8000b4e:	428a      	cmp	r2, r1
 8000b50:	4615      	mov	r5, r2
 8000b52:	d967      	bls.n	8000c24 <__udivmoddi4+0xe4>
 8000b54:	fab2 f282 	clz	r2, r2
 8000b58:	b14a      	cbz	r2, 8000b6e <__udivmoddi4+0x2e>
 8000b5a:	f1c2 0720 	rsb	r7, r2, #32
 8000b5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b62:	fa20 f707 	lsr.w	r7, r0, r7
 8000b66:	4095      	lsls	r5, r2
 8000b68:	ea47 0803 	orr.w	r8, r7, r3
 8000b6c:	4094      	lsls	r4, r2
 8000b6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b72:	0c23      	lsrs	r3, r4, #16
 8000b74:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b78:	fa1f fc85 	uxth.w	ip, r5
 8000b7c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b80:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b84:	fb07 f10c 	mul.w	r1, r7, ip
 8000b88:	4299      	cmp	r1, r3
 8000b8a:	d909      	bls.n	8000ba0 <__udivmoddi4+0x60>
 8000b8c:	18eb      	adds	r3, r5, r3
 8000b8e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b92:	f080 811b 	bcs.w	8000dcc <__udivmoddi4+0x28c>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 8118 	bls.w	8000dcc <__udivmoddi4+0x28c>
 8000b9c:	3f02      	subs	r7, #2
 8000b9e:	442b      	add	r3, r5
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb4:	45a4      	cmp	ip, r4
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x8c>
 8000bb8:	192c      	adds	r4, r5, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bbe:	f080 8107 	bcs.w	8000dd0 <__udivmoddi4+0x290>
 8000bc2:	45a4      	cmp	ip, r4
 8000bc4:	f240 8104 	bls.w	8000dd0 <__udivmoddi4+0x290>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	442c      	add	r4, r5
 8000bcc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd0:	eba4 040c 	sub.w	r4, r4, ip
 8000bd4:	2700      	movs	r7, #0
 8000bd6:	b11e      	cbz	r6, 8000be0 <__udivmoddi4+0xa0>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c6 4300 	strd	r4, r3, [r6]
 8000be0:	4639      	mov	r1, r7
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xbe>
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	f000 80eb 	beq.w	8000dc6 <__udivmoddi4+0x286>
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf6:	4638      	mov	r0, r7
 8000bf8:	4639      	mov	r1, r7
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f783 	clz	r7, r3
 8000c02:	2f00      	cmp	r7, #0
 8000c04:	d147      	bne.n	8000c96 <__udivmoddi4+0x156>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd0>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80fa 	bhi.w	8000e04 <__udivmoddi4+0x2c4>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	4698      	mov	r8, r3
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa0>
 8000c1e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xe8>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 808f 	bne.w	8000d50 <__udivmoddi4+0x210>
 8000c32:	1b49      	subs	r1, r1, r5
 8000c34:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c38:	fa1f f885 	uxth.w	r8, r5
 8000c3c:	2701      	movs	r7, #1
 8000c3e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d907      	bls.n	8000c64 <__udivmoddi4+0x124>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x122>
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	f200 80cd 	bhi.w	8000dfc <__udivmoddi4+0x2bc>
 8000c62:	4684      	mov	ip, r0
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	b2a3      	uxth	r3, r4
 8000c68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c70:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c74:	fb08 f800 	mul.w	r8, r8, r0
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0x14c>
 8000c7c:	192c      	adds	r4, r5, r4
 8000c7e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x14a>
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	f200 80b6 	bhi.w	8000df6 <__udivmoddi4+0x2b6>
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	eba4 0408 	sub.w	r4, r4, r8
 8000c90:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c94:	e79f      	b.n	8000bd6 <__udivmoddi4+0x96>
 8000c96:	f1c7 0c20 	rsb	ip, r7, #32
 8000c9a:	40bb      	lsls	r3, r7
 8000c9c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca4:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cac:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb4:	4325      	orrs	r5, r4
 8000cb6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cba:	0c2c      	lsrs	r4, r5, #16
 8000cbc:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc0:	fa1f fa8e 	uxth.w	sl, lr
 8000cc4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc8:	fb09 f40a 	mul.w	r4, r9, sl
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd6:	d90b      	bls.n	8000cf0 <__udivmoddi4+0x1b0>
 8000cd8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cdc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ce0:	f080 8087 	bcs.w	8000df2 <__udivmoddi4+0x2b2>
 8000ce4:	429c      	cmp	r4, r3
 8000ce6:	f240 8084 	bls.w	8000df2 <__udivmoddi4+0x2b2>
 8000cea:	f1a9 0902 	sub.w	r9, r9, #2
 8000cee:	4473      	add	r3, lr
 8000cf0:	1b1b      	subs	r3, r3, r4
 8000cf2:	b2ad      	uxth	r5, r5
 8000cf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cfc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d00:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d04:	45a2      	cmp	sl, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x1da>
 8000d08:	eb1e 0404 	adds.w	r4, lr, r4
 8000d0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d10:	d26b      	bcs.n	8000dea <__udivmoddi4+0x2aa>
 8000d12:	45a2      	cmp	sl, r4
 8000d14:	d969      	bls.n	8000dea <__udivmoddi4+0x2aa>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4474      	add	r4, lr
 8000d1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d22:	eba4 040a 	sub.w	r4, r4, sl
 8000d26:	454c      	cmp	r4, r9
 8000d28:	46c2      	mov	sl, r8
 8000d2a:	464b      	mov	r3, r9
 8000d2c:	d354      	bcc.n	8000dd8 <__udivmoddi4+0x298>
 8000d2e:	d051      	beq.n	8000dd4 <__udivmoddi4+0x294>
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d069      	beq.n	8000e08 <__udivmoddi4+0x2c8>
 8000d34:	ebb1 050a 	subs.w	r5, r1, sl
 8000d38:	eb64 0403 	sbc.w	r4, r4, r3
 8000d3c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d40:	40fd      	lsrs	r5, r7
 8000d42:	40fc      	lsrs	r4, r7
 8000d44:	ea4c 0505 	orr.w	r5, ip, r5
 8000d48:	e9c6 5400 	strd	r5, r4, [r6]
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	e747      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f703 	lsr.w	r7, r0, r3
 8000d58:	4095      	lsls	r5, r2
 8000d5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d66:	4338      	orrs	r0, r7
 8000d68:	0c01      	lsrs	r1, r0, #16
 8000d6a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6e:	fa1f f885 	uxth.w	r8, r5
 8000d72:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7a:	fb07 f308 	mul.w	r3, r7, r8
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	fa04 f402 	lsl.w	r4, r4, r2
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x256>
 8000d86:	1869      	adds	r1, r5, r1
 8000d88:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d8c:	d22f      	bcs.n	8000dee <__udivmoddi4+0x2ae>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d92d      	bls.n	8000dee <__udivmoddi4+0x2ae>
 8000d92:	3f02      	subs	r7, #2
 8000d94:	4429      	add	r1, r5
 8000d96:	1acb      	subs	r3, r1, r3
 8000d98:	b281      	uxth	r1, r0
 8000d9a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da6:	fb00 f308 	mul.w	r3, r0, r8
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x27e>
 8000dae:	1869      	adds	r1, r5, r1
 8000db0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db4:	d217      	bcs.n	8000de6 <__udivmoddi4+0x2a6>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d915      	bls.n	8000de6 <__udivmoddi4+0x2a6>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4429      	add	r1, r5
 8000dbe:	1ac9      	subs	r1, r1, r3
 8000dc0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc4:	e73b      	b.n	8000c3e <__udivmoddi4+0xfe>
 8000dc6:	4637      	mov	r7, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e709      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000dcc:	4607      	mov	r7, r0
 8000dce:	e6e7      	b.n	8000ba0 <__udivmoddi4+0x60>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6fb      	b.n	8000bcc <__udivmoddi4+0x8c>
 8000dd4:	4541      	cmp	r1, r8
 8000dd6:	d2ab      	bcs.n	8000d30 <__udivmoddi4+0x1f0>
 8000dd8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ddc:	eb69 020e 	sbc.w	r2, r9, lr
 8000de0:	3801      	subs	r0, #1
 8000de2:	4613      	mov	r3, r2
 8000de4:	e7a4      	b.n	8000d30 <__udivmoddi4+0x1f0>
 8000de6:	4660      	mov	r0, ip
 8000de8:	e7e9      	b.n	8000dbe <__udivmoddi4+0x27e>
 8000dea:	4618      	mov	r0, r3
 8000dec:	e795      	b.n	8000d1a <__udivmoddi4+0x1da>
 8000dee:	4667      	mov	r7, ip
 8000df0:	e7d1      	b.n	8000d96 <__udivmoddi4+0x256>
 8000df2:	4681      	mov	r9, r0
 8000df4:	e77c      	b.n	8000cf0 <__udivmoddi4+0x1b0>
 8000df6:	3802      	subs	r0, #2
 8000df8:	442c      	add	r4, r5
 8000dfa:	e747      	b.n	8000c8c <__udivmoddi4+0x14c>
 8000dfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e00:	442b      	add	r3, r5
 8000e02:	e72f      	b.n	8000c64 <__udivmoddi4+0x124>
 8000e04:	4638      	mov	r0, r7
 8000e06:	e708      	b.n	8000c1a <__udivmoddi4+0xda>
 8000e08:	4637      	mov	r7, r6
 8000e0a:	e6e9      	b.n	8000be0 <__udivmoddi4+0xa0>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <HAL_Init+0x40>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <HAL_Init+0x40>)
 8000e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <HAL_Init+0x40>)
 8000e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f995 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 f83c 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e44:	f003 f8a6 	bl	8003f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023c00 	.word	0x40023c00

08000e54 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <HAL_DeInit+0x54>)
 8000e5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e5e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <HAL_DeInit+0x54>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_DeInit+0x54>)
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_DeInit+0x54>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_DeInit+0x54>)
 8000e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e7a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_DeInit+0x54>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_DeInit+0x54>)
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e88:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_DeInit+0x54>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_DeInit+0x54>)
 8000e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e96:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_DeInit+0x54>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000e9e:	f000 f805 	bl	8000eac <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40023800 	.word	0x40023800

08000eac <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f9ac 	bl	8001238 <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef8:	f000 f956 	bl	80011a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000110 	.word	0x20000110
 8000f14:	20000004 	.word	0x20000004
 8000f18:	20000000 	.word	0x20000000

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000004 	.word	0x20000004
 8000f40:	2000030c 	.word	0x2000030c

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	2000030c 	.word	0x2000030c

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_Delay+0x40>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4907      	ldr	r1, [pc, #28]	; (800103c <__NVIC_EnableIRQ+0x38>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001100:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <__NVIC_SystemReset+0x20>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800110c:	4903      	ldr	r1, [pc, #12]	; (800111c <__NVIC_SystemReset+0x20>)
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_SystemReset+0x24>)
 8001110:	4313      	orrs	r3, r2
 8001112:	60cb      	str	r3, [r1, #12]
 8001114:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <__NVIC_SystemReset+0x1c>
 800111c:	e000ed00 	.word	0xe000ed00
 8001120:	05fa0004 	.word	0x05fa0004

08001124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001134:	d301      	bcc.n	800113a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2301      	movs	r3, #1
 8001138:	e00f      	b.n	800115a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <SysTick_Config+0x40>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001142:	210f      	movs	r1, #15
 8001144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001148:	f7ff ff7a 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <SysTick_Config+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <SysTick_Config+0x40>)
 8001154:	2207      	movs	r2, #7
 8001156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010

08001168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b07      	cmp	r3, #7
 8001174:	d00f      	beq.n	8001196 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b06      	cmp	r3, #6
 800117a:	d00c      	beq.n	8001196 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b05      	cmp	r3, #5
 8001180:	d009      	beq.n	8001196 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b04      	cmp	r3, #4
 8001186:	d006      	beq.n	8001196 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d003      	beq.n	8001196 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800118e:	2192      	movs	r1, #146	; 0x92
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001192:	f002 fef4 	bl	8003f7e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ff02 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	08005d30 	.word	0x08005d30

080011a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d903      	bls.n	80011c8 <HAL_NVIC_SetPriority+0x20>
 80011c0:	21aa      	movs	r1, #170	; 0xaa
 80011c2:	480e      	ldr	r0, [pc, #56]	; (80011fc <HAL_NVIC_SetPriority+0x54>)
 80011c4:	f002 fedb 	bl	8003f7e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	d903      	bls.n	80011d6 <HAL_NVIC_SetPriority+0x2e>
 80011ce:	21ab      	movs	r1, #171	; 0xab
 80011d0:	480a      	ldr	r0, [pc, #40]	; (80011fc <HAL_NVIC_SetPriority+0x54>)
 80011d2:	f002 fed4 	bl	8003f7e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d6:	f7ff ff07 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 80011da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	6978      	ldr	r0, [r7, #20]
 80011e2:	f7ff ff57 	bl	8001094 <NVIC_EncodePriority>
 80011e6:	4602      	mov	r2, r0
 80011e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff26 	bl	8001040 <__NVIC_SetPriority>
}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	08005d30 	.word	0x08005d30

08001200 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	da03      	bge.n	800121a <HAL_NVIC_EnableIRQ+0x1a>
 8001212:	21be      	movs	r1, #190	; 0xbe
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <HAL_NVIC_EnableIRQ+0x2c>)
 8001216:	f002 feb2 	bl	8003f7e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fef0 	bl	8001004 <__NVIC_EnableIRQ>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	08005d30 	.word	0x08005d30

08001230 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001234:	f7ff ff62 	bl	80010fc <__NVIC_SystemReset>

08001238 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff6f 	bl	8001124 <SysTick_Config>
 8001246:	4603      	mov	r3, r0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e01a      	b.n	8001298 <HAL_CRC_Init+0x48>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_CRC_Init+0x50>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d003      	beq.n	8001274 <HAL_CRC_Init+0x24>
 800126c:	2168      	movs	r1, #104	; 0x68
 800126e:	480d      	ldr	r0, [pc, #52]	; (80012a4 <HAL_CRC_Init+0x54>)
 8001270:	f002 fe85 	bl	8003f7e <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	795b      	ldrb	r3, [r3, #5]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d105      	bne.n	800128a <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f002 fd15 	bl	8003cb4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2202      	movs	r2, #2
 800128e:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023000 	.word	0x40023000
 80012a4:	08005d6c 	.word	0x08005d6c

080012a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d004      	beq.n	80012c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2280      	movs	r2, #128	; 0x80
 80012c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00c      	b.n	80012e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2205      	movs	r2, #5
 80012ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0201 	bic.w	r2, r2, #1
 80012dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012fe:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <HAL_FLASH_Program+0xc0>)
 8001300:	7e1b      	ldrb	r3, [r3, #24]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_FLASH_Program+0x1e>
 8001306:	2302      	movs	r3, #2
 8001308:	e04b      	b.n	80013a2 <HAL_FLASH_Program+0xb6>
 800130a:	4b28      	ldr	r3, [pc, #160]	; (80013ac <HAL_FLASH_Program+0xc0>)
 800130c:	2201      	movs	r2, #1
 800130e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00c      	beq.n	8001330 <HAL_FLASH_Program+0x44>
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d009      	beq.n	8001330 <HAL_FLASH_Program+0x44>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d006      	beq.n	8001330 <HAL_FLASH_Program+0x44>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2b03      	cmp	r3, #3
 8001326:	d003      	beq.n	8001330 <HAL_FLASH_Program+0x44>
 8001328:	21a4      	movs	r1, #164	; 0xa4
 800132a:	4821      	ldr	r0, [pc, #132]	; (80013b0 <HAL_FLASH_Program+0xc4>)
 800132c:	f002 fe27 	bl	8003f7e <assert_failed>
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001330:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001334:	f000 f872 	bl	800141c <FLASH_WaitForLastOperation>
 8001338:	4603      	mov	r3, r0
 800133a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d12b      	bne.n	800139a <HAL_FLASH_Program+0xae>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d105      	bne.n	8001354 <HAL_FLASH_Program+0x68>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001348:	783b      	ldrb	r3, [r7, #0]
 800134a:	4619      	mov	r1, r3
 800134c:	68b8      	ldr	r0, [r7, #8]
 800134e:	f000 f96b 	bl	8001628 <FLASH_Program_Byte>
 8001352:	e016      	b.n	8001382 <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d105      	bne.n	8001366 <HAL_FLASH_Program+0x7a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800135a:	883b      	ldrh	r3, [r7, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	68b8      	ldr	r0, [r7, #8]
 8001360:	f000 f924 	bl	80015ac <FLASH_Program_HalfWord>
 8001364:	e00d      	b.n	8001382 <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d105      	bne.n	8001378 <HAL_FLASH_Program+0x8c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	4619      	mov	r1, r3
 8001370:	68b8      	ldr	r0, [r7, #8]
 8001372:	f000 f8dd 	bl	8001530 <FLASH_Program_Word>
 8001376:	e004      	b.n	8001382 <HAL_FLASH_Program+0x96>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800137c:	68b8      	ldr	r0, [r7, #8]
 800137e:	f000 f88d 	bl	800149c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001382:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001386:	f000 f849 	bl	800141c <FLASH_WaitForLastOperation>
 800138a:	4603      	mov	r3, r0
 800138c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_FLASH_Program+0xc8>)
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <HAL_FLASH_Program+0xc8>)
 8001394:	f023 0301 	bic.w	r3, r3, #1
 8001398:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <HAL_FLASH_Program+0xc0>)
 800139c:	2200      	movs	r2, #0
 800139e:	761a      	strb	r2, [r3, #24]
  
  return status;
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000310 	.word	0x20000310
 80013b0:	08005da4 	.word	0x08005da4
 80013b4:	40023c00 	.word	0x40023c00

080013b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_FLASH_Unlock+0x38>)
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da0b      	bge.n	80013e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_FLASH_Unlock+0x38>)
 80013cc:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <HAL_FLASH_Unlock+0x3c>)
 80013ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <HAL_FLASH_Unlock+0x38>)
 80013d2:	4a09      	ldr	r2, [pc, #36]	; (80013f8 <HAL_FLASH_Unlock+0x40>)
 80013d4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_FLASH_Unlock+0x38>)
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	da01      	bge.n	80013e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80013e2:	79fb      	ldrb	r3, [r7, #7]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	40023c00 	.word	0x40023c00
 80013f4:	45670123 	.word	0x45670123
 80013f8:	cdef89ab 	.word	0xcdef89ab

080013fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_FLASH_Lock+0x1c>)
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_FLASH_Lock+0x1c>)
 8001406:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800140a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	40023c00 	.word	0x40023c00

0800141c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <FLASH_WaitForLastOperation+0x78>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800142e:	f7ff fd89 	bl	8000f44 <HAL_GetTick>
 8001432:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001434:	e010      	b.n	8001458 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800143c:	d00c      	beq.n	8001458 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d007      	beq.n	8001454 <FLASH_WaitForLastOperation+0x38>
 8001444:	f7ff fd7e 	bl	8000f44 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	d201      	bcs.n	8001458 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e019      	b.n	800148c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <FLASH_WaitForLastOperation+0x7c>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1e8      	bne.n	8001436 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <FLASH_WaitForLastOperation+0x7c>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <FLASH_WaitForLastOperation+0x7c>)
 8001472:	2201      	movs	r2, #1
 8001474:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <FLASH_WaitForLastOperation+0x7c>)
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001482:	f000 f90d 	bl	80016a0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
  
}  
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000310 	.word	0x20000310
 8001498:	40023c00 	.word	0x40023c00

0800149c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80014ae:	d303      	bcc.n	80014b8 <FLASH_Program_DoubleWord+0x1c>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a1a      	ldr	r2, [pc, #104]	; (800151c <FLASH_Program_DoubleWord+0x80>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d90c      	bls.n	80014d2 <FLASH_Program_DoubleWord+0x36>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4a19      	ldr	r2, [pc, #100]	; (8001520 <FLASH_Program_DoubleWord+0x84>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d903      	bls.n	80014c8 <FLASH_Program_DoubleWord+0x2c>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4a18      	ldr	r2, [pc, #96]	; (8001524 <FLASH_Program_DoubleWord+0x88>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d904      	bls.n	80014d2 <FLASH_Program_DoubleWord+0x36>
 80014c8:	f240 2167 	movw	r1, #615	; 0x267
 80014cc:	4816      	ldr	r0, [pc, #88]	; (8001528 <FLASH_Program_DoubleWord+0x8c>)
 80014ce:	f002 fd56 	bl	8003f7e <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014d2:	4b16      	ldr	r3, [pc, #88]	; (800152c <FLASH_Program_DoubleWord+0x90>)
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	4a15      	ldr	r2, [pc, #84]	; (800152c <FLASH_Program_DoubleWord+0x90>)
 80014d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <FLASH_Program_DoubleWord+0x90>)
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <FLASH_Program_DoubleWord+0x90>)
 80014e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80014e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <FLASH_Program_DoubleWord+0x90>)
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	4a0f      	ldr	r2, [pc, #60]	; (800152c <FLASH_Program_DoubleWord+0x90>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80014fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	f04f 0400 	mov.w	r4, #0
 8001508:	0013      	movs	r3, r2
 800150a:	2400      	movs	r4, #0
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	3204      	adds	r2, #4
 8001510:	6013      	str	r3, [r2, #0]
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}
 800151a:	bf00      	nop
 800151c:	0807ffff 	.word	0x0807ffff
 8001520:	1fff77ff 	.word	0x1fff77ff
 8001524:	1fff7a0f 	.word	0x1fff7a0f
 8001528:	08005da4 	.word	0x08005da4
 800152c:	40023c00 	.word	0x40023c00

08001530 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001540:	d303      	bcc.n	800154a <FLASH_Program_Word+0x1a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a14      	ldr	r2, [pc, #80]	; (8001598 <FLASH_Program_Word+0x68>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d90c      	bls.n	8001564 <FLASH_Program_Word+0x34>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a13      	ldr	r2, [pc, #76]	; (800159c <FLASH_Program_Word+0x6c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d903      	bls.n	800155a <FLASH_Program_Word+0x2a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <FLASH_Program_Word+0x70>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d904      	bls.n	8001564 <FLASH_Program_Word+0x34>
 800155a:	f240 2183 	movw	r1, #643	; 0x283
 800155e:	4811      	ldr	r0, [pc, #68]	; (80015a4 <FLASH_Program_Word+0x74>)
 8001560:	f002 fd0d 	bl	8003f7e <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <FLASH_Program_Word+0x78>)
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	4a0f      	ldr	r2, [pc, #60]	; (80015a8 <FLASH_Program_Word+0x78>)
 800156a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800156e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <FLASH_Program_Word+0x78>)
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <FLASH_Program_Word+0x78>)
 8001576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <FLASH_Program_Word+0x78>)
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <FLASH_Program_Word+0x78>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	601a      	str	r2, [r3, #0]
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	0807ffff 	.word	0x0807ffff
 800159c:	1fff77ff 	.word	0x1fff77ff
 80015a0:	1fff7a0f 	.word	0x1fff7a0f
 80015a4:	08005da4 	.word	0x08005da4
 80015a8:	40023c00 	.word	0x40023c00

080015ac <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015be:	d303      	bcc.n	80015c8 <FLASH_Program_HalfWord+0x1c>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a14      	ldr	r2, [pc, #80]	; (8001614 <FLASH_Program_HalfWord+0x68>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d90c      	bls.n	80015e2 <FLASH_Program_HalfWord+0x36>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a13      	ldr	r2, [pc, #76]	; (8001618 <FLASH_Program_HalfWord+0x6c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d903      	bls.n	80015d8 <FLASH_Program_HalfWord+0x2c>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <FLASH_Program_HalfWord+0x70>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d904      	bls.n	80015e2 <FLASH_Program_HalfWord+0x36>
 80015d8:	f44f 7127 	mov.w	r1, #668	; 0x29c
 80015dc:	4810      	ldr	r0, [pc, #64]	; (8001620 <FLASH_Program_HalfWord+0x74>)
 80015de:	f002 fcce 	bl	8003f7e <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <FLASH_Program_HalfWord+0x78>)
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	4a0f      	ldr	r2, [pc, #60]	; (8001624 <FLASH_Program_HalfWord+0x78>)
 80015e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <FLASH_Program_HalfWord+0x78>)
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <FLASH_Program_HalfWord+0x78>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <FLASH_Program_HalfWord+0x78>)
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	4a09      	ldr	r2, [pc, #36]	; (8001624 <FLASH_Program_HalfWord+0x78>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	887a      	ldrh	r2, [r7, #2]
 800160a:	801a      	strh	r2, [r3, #0]
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	0807ffff 	.word	0x0807ffff
 8001618:	1fff77ff 	.word	0x1fff77ff
 800161c:	1fff7a0f 	.word	0x1fff7a0f
 8001620:	08005da4 	.word	0x08005da4
 8001624:	40023c00 	.word	0x40023c00

08001628 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800163a:	d303      	bcc.n	8001644 <FLASH_Program_Byte+0x1c>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a13      	ldr	r2, [pc, #76]	; (800168c <FLASH_Program_Byte+0x64>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d90c      	bls.n	800165e <FLASH_Program_Byte+0x36>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a12      	ldr	r2, [pc, #72]	; (8001690 <FLASH_Program_Byte+0x68>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d903      	bls.n	8001654 <FLASH_Program_Byte+0x2c>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a11      	ldr	r2, [pc, #68]	; (8001694 <FLASH_Program_Byte+0x6c>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d904      	bls.n	800165e <FLASH_Program_Byte+0x36>
 8001654:	f240 21b5 	movw	r1, #693	; 0x2b5
 8001658:	480f      	ldr	r0, [pc, #60]	; (8001698 <FLASH_Program_Byte+0x70>)
 800165a:	f002 fc90 	bl	8003f7e <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <FLASH_Program_Byte+0x74>)
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	4a0e      	ldr	r2, [pc, #56]	; (800169c <FLASH_Program_Byte+0x74>)
 8001664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001668:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <FLASH_Program_Byte+0x74>)
 800166c:	4a0b      	ldr	r2, [pc, #44]	; (800169c <FLASH_Program_Byte+0x74>)
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <FLASH_Program_Byte+0x74>)
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	4a09      	ldr	r2, [pc, #36]	; (800169c <FLASH_Program_Byte+0x74>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	78fa      	ldrb	r2, [r7, #3]
 8001682:	701a      	strb	r2, [r3, #0]
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	0807ffff 	.word	0x0807ffff
 8001690:	1fff77ff 	.word	0x1fff77ff
 8001694:	1fff7a0f 	.word	0x1fff7a0f
 8001698:	08005da4 	.word	0x08005da4
 800169c:	40023c00 	.word	0x40023c00

080016a0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80016a4:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <FLASH_SetErrorCode+0xc4>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <FLASH_SetErrorCode+0xc8>)
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	f043 0310 	orr.w	r3, r3, #16
 80016b8:	4a2b      	ldr	r2, [pc, #172]	; (8001768 <FLASH_SetErrorCode+0xc8>)
 80016ba:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80016bc:	4b29      	ldr	r3, [pc, #164]	; (8001764 <FLASH_SetErrorCode+0xc4>)
 80016be:	2210      	movs	r2, #16
 80016c0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80016c2:	4b28      	ldr	r3, [pc, #160]	; (8001764 <FLASH_SetErrorCode+0xc4>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f003 0320 	and.w	r3, r3, #32
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d008      	beq.n	80016e0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80016ce:	4b26      	ldr	r3, [pc, #152]	; (8001768 <FLASH_SetErrorCode+0xc8>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f043 0308 	orr.w	r3, r3, #8
 80016d6:	4a24      	ldr	r2, [pc, #144]	; (8001768 <FLASH_SetErrorCode+0xc8>)
 80016d8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80016da:	4b22      	ldr	r3, [pc, #136]	; (8001764 <FLASH_SetErrorCode+0xc4>)
 80016dc:	2220      	movs	r2, #32
 80016de:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80016e0:	4b20      	ldr	r3, [pc, #128]	; (8001764 <FLASH_SetErrorCode+0xc4>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <FLASH_SetErrorCode+0xc8>)
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <FLASH_SetErrorCode+0xc8>)
 80016f6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <FLASH_SetErrorCode+0xc4>)
 80016fa:	2240      	movs	r2, #64	; 0x40
 80016fc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <FLASH_SetErrorCode+0xc4>)
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001706:	2b00      	cmp	r3, #0
 8001708:	d008      	beq.n	800171c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <FLASH_SetErrorCode+0xc8>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	f043 0302 	orr.w	r3, r3, #2
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <FLASH_SetErrorCode+0xc8>)
 8001714:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <FLASH_SetErrorCode+0xc4>)
 8001718:	2280      	movs	r2, #128	; 0x80
 800171a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <FLASH_SetErrorCode+0xc4>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d009      	beq.n	800173c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <FLASH_SetErrorCode+0xc8>)
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <FLASH_SetErrorCode+0xc8>)
 8001732:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <FLASH_SetErrorCode+0xc4>)
 8001736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800173a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <FLASH_SetErrorCode+0xc4>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <FLASH_SetErrorCode+0xc8>)
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	f043 0320 	orr.w	r3, r3, #32
 8001750:	4a05      	ldr	r2, [pc, #20]	; (8001768 <FLASH_SetErrorCode+0xc8>)
 8001752:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <FLASH_SetErrorCode+0xc4>)
 8001756:	2202      	movs	r2, #2
 8001758:	60da      	str	r2, [r3, #12]
  }
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	40023c00 	.word	0x40023c00
 8001768:	20000310 	.word	0x20000310

0800176c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800177e:	4b40      	ldr	r3, [pc, #256]	; (8001880 <HAL_FLASHEx_Erase+0x114>)
 8001780:	7e1b      	ldrb	r3, [r3, #24]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_FLASHEx_Erase+0x1e>
 8001786:	2302      	movs	r3, #2
 8001788:	e076      	b.n	8001878 <HAL_FLASHEx_Erase+0x10c>
 800178a:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <HAL_FLASHEx_Erase+0x114>)
 800178c:	2201      	movs	r2, #1
 800178e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d007      	beq.n	80017a8 <HAL_FLASHEx_Erase+0x3c>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d003      	beq.n	80017a8 <HAL_FLASHEx_Erase+0x3c>
 80017a0:	21ab      	movs	r1, #171	; 0xab
 80017a2:	4838      	ldr	r0, [pc, #224]	; (8001884 <HAL_FLASHEx_Erase+0x118>)
 80017a4:	f002 fbeb 	bl	8003f7e <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017ac:	f7ff fe36 	bl	800141c <FLASH_WaitForLastOperation>
 80017b0:	4603      	mov	r3, r0
 80017b2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d15a      	bne.n	8001870 <HAL_FLASHEx_Erase+0x104>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017c0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d115      	bne.n	80017f6 <HAL_FLASHEx_Erase+0x8a>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	4619      	mov	r1, r3
 80017d6:	4610      	mov	r0, r2
 80017d8:	f000 f858 	bl	800188c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017e0:	f7ff fe1c 	bl	800141c <FLASH_WaitForLastOperation>
 80017e4:	4603      	mov	r3, r0
 80017e6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80017e8:	4b27      	ldr	r3, [pc, #156]	; (8001888 <HAL_FLASHEx_Erase+0x11c>)
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	4a26      	ldr	r2, [pc, #152]	; (8001888 <HAL_FLASHEx_Erase+0x11c>)
 80017ee:	f023 0304 	bic.w	r3, r3, #4
 80017f2:	6113      	str	r3, [r2, #16]
 80017f4:	e03a      	b.n	800186c <HAL_FLASHEx_Erase+0x100>
    }
    else
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	4413      	add	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <HAL_FLASHEx_Erase+0xa6>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4413      	add	r3, r2
 800180e:	2b08      	cmp	r3, #8
 8001810:	d903      	bls.n	800181a <HAL_FLASHEx_Erase+0xae>
 8001812:	21c3      	movs	r1, #195	; 0xc3
 8001814:	481b      	ldr	r0, [pc, #108]	; (8001884 <HAL_FLASHEx_Erase+0x118>)
 8001816:	f002 fbb2 	bl	8003f7e <assert_failed>

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	e01c      	b.n	800185c <HAL_FLASHEx_Erase+0xf0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	4619      	mov	r1, r3
 800182a:	68b8      	ldr	r0, [r7, #8]
 800182c:	f000 f86a 	bl	8001904 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001830:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001834:	f7ff fdf2 	bl	800141c <FLASH_WaitForLastOperation>
 8001838:	4603      	mov	r3, r0
 800183a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_FLASHEx_Erase+0x11c>)
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <HAL_FLASHEx_Erase+0x11c>)
 8001842:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001846:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_FLASHEx_Erase+0xea>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	601a      	str	r2, [r3, #0]
          break;
 8001854:	e00a      	b.n	800186c <HAL_FLASHEx_Erase+0x100>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	3301      	adds	r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68da      	ldr	r2, [r3, #12]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4413      	add	r3, r2
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	429a      	cmp	r2, r3
 800186a:	d3da      	bcc.n	8001822 <HAL_FLASHEx_Erase+0xb6>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800186c:	f000 f8c0 	bl	80019f0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_FLASHEx_Erase+0x114>)
 8001872:	2200      	movs	r2, #0
 8001874:	761a      	strb	r2, [r3, #24]

  return status;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000310 	.word	0x20000310
 8001884:	08005de0 	.word	0x08005de0
 8001888:	40023c00 	.word	0x40023c00

0800188c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00d      	beq.n	80018ba <FLASH_MassErase+0x2e>
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d00a      	beq.n	80018ba <FLASH_MassErase+0x2e>
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d007      	beq.n	80018ba <FLASH_MassErase+0x2e>
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d004      	beq.n	80018ba <FLASH_MassErase+0x2e>
 80018b0:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 80018b4:	4811      	ldr	r0, [pc, #68]	; (80018fc <FLASH_MassErase+0x70>)
 80018b6:	f002 fb62 	bl	8003f7e <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d004      	beq.n	80018ca <FLASH_MassErase+0x3e>
 80018c0:	f240 31bd 	movw	r1, #957	; 0x3bd
 80018c4:	480d      	ldr	r0, [pc, #52]	; (80018fc <FLASH_MassErase+0x70>)
 80018c6:	f002 fb5a 	bl	8003f7e <assert_failed>
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <FLASH_MassErase+0x74>)
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	4a0c      	ldr	r2, [pc, #48]	; (8001900 <FLASH_MassErase+0x74>)
 80018d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <FLASH_MassErase+0x74>)
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <FLASH_MassErase+0x74>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <FLASH_MassErase+0x74>)
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	4313      	orrs	r3, r2
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <FLASH_MassErase+0x74>)
 80018ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f2:	6113      	str	r3, [r2, #16]
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	08005de0 	.word	0x08005de0
 8001900:	40023c00 	.word	0x40023c00

08001904 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d019      	beq.n	800194e <FLASH_Erase_Sector+0x4a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d016      	beq.n	800194e <FLASH_Erase_Sector+0x4a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d013      	beq.n	800194e <FLASH_Erase_Sector+0x4a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b03      	cmp	r3, #3
 800192a:	d010      	beq.n	800194e <FLASH_Erase_Sector+0x4a>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b04      	cmp	r3, #4
 8001930:	d00d      	beq.n	800194e <FLASH_Erase_Sector+0x4a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b05      	cmp	r3, #5
 8001936:	d00a      	beq.n	800194e <FLASH_Erase_Sector+0x4a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b06      	cmp	r3, #6
 800193c:	d007      	beq.n	800194e <FLASH_Erase_Sector+0x4a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b07      	cmp	r3, #7
 8001942:	d004      	beq.n	800194e <FLASH_Erase_Sector+0x4a>
 8001944:	f240 31db 	movw	r1, #987	; 0x3db
 8001948:	4827      	ldr	r0, [pc, #156]	; (80019e8 <FLASH_Erase_Sector+0xe4>)
 800194a:	f002 fb18 	bl	8003f7e <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00d      	beq.n	8001970 <FLASH_Erase_Sector+0x6c>
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d00a      	beq.n	8001970 <FLASH_Erase_Sector+0x6c>
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d007      	beq.n	8001970 <FLASH_Erase_Sector+0x6c>
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d004      	beq.n	8001970 <FLASH_Erase_Sector+0x6c>
 8001966:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 800196a:	481f      	ldr	r0, [pc, #124]	; (80019e8 <FLASH_Erase_Sector+0xe4>)
 800196c:	f002 fb07 	bl	8003f7e <assert_failed>
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d102      	bne.n	800197c <FLASH_Erase_Sector+0x78>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	e010      	b.n	800199e <FLASH_Erase_Sector+0x9a>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d103      	bne.n	800198a <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e009      	b.n	800199e <FLASH_Erase_Sector+0x9a>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d103      	bne.n	8001998 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	e002      	b.n	800199e <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001998:	f44f 7340 	mov.w	r3, #768	; 0x300
 800199c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <FLASH_Erase_Sector+0xe8>)
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <FLASH_Erase_Sector+0xe8>)
 80019a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <FLASH_Erase_Sector+0xe8>)
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	490f      	ldr	r1, [pc, #60]	; (80019ec <FLASH_Erase_Sector+0xe8>)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <FLASH_Erase_Sector+0xe8>)
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <FLASH_Erase_Sector+0xe8>)
 80019bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <FLASH_Erase_Sector+0xe8>)
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4313      	orrs	r3, r2
 80019cc:	4a07      	ldr	r2, [pc, #28]	; (80019ec <FLASH_Erase_Sector+0xe8>)
 80019ce:	f043 0302 	orr.w	r3, r3, #2
 80019d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <FLASH_Erase_Sector+0xe8>)
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <FLASH_Erase_Sector+0xe8>)
 80019da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019de:	6113      	str	r3, [r2, #16]
}
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	08005de0 	.word	0x08005de0
 80019ec:	40023c00 	.word	0x40023c00

080019f0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <FLASH_FlushCaches+0x88>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d017      	beq.n	8001a30 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <FLASH_FlushCaches+0x88>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1c      	ldr	r2, [pc, #112]	; (8001a78 <FLASH_FlushCaches+0x88>)
 8001a06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a0a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <FLASH_FlushCaches+0x88>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a19      	ldr	r2, [pc, #100]	; (8001a78 <FLASH_FlushCaches+0x88>)
 8001a12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <FLASH_FlushCaches+0x88>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a16      	ldr	r2, [pc, #88]	; (8001a78 <FLASH_FlushCaches+0x88>)
 8001a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a22:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <FLASH_FlushCaches+0x88>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <FLASH_FlushCaches+0x88>)
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <FLASH_FlushCaches+0x88>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d017      	beq.n	8001a6c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <FLASH_FlushCaches+0x88>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <FLASH_FlushCaches+0x88>)
 8001a42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a46:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <FLASH_FlushCaches+0x88>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <FLASH_FlushCaches+0x88>)
 8001a4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <FLASH_FlushCaches+0x88>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <FLASH_FlushCaches+0x88>)
 8001a5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a5e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <FLASH_FlushCaches+0x88>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <FLASH_FlushCaches+0x88>)
 8001a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a6a:	6013      	str	r3, [r2, #0]
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a3b      	ldr	r2, [pc, #236]	; (8001b84 <HAL_GPIO_Init+0x108>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d017      	beq.n	8001aca <HAL_GPIO_Init+0x4e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a3a      	ldr	r2, [pc, #232]	; (8001b88 <HAL_GPIO_Init+0x10c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_GPIO_Init+0x4e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a39      	ldr	r2, [pc, #228]	; (8001b8c <HAL_GPIO_Init+0x110>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d00f      	beq.n	8001aca <HAL_GPIO_Init+0x4e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a38      	ldr	r2, [pc, #224]	; (8001b90 <HAL_GPIO_Init+0x114>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00b      	beq.n	8001aca <HAL_GPIO_Init+0x4e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a37      	ldr	r2, [pc, #220]	; (8001b94 <HAL_GPIO_Init+0x118>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x4e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a36      	ldr	r2, [pc, #216]	; (8001b98 <HAL_GPIO_Init+0x11c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x4e>
 8001ac2:	21b3      	movs	r1, #179	; 0xb3
 8001ac4:	4835      	ldr	r0, [pc, #212]	; (8001b9c <HAL_GPIO_Init+0x120>)
 8001ac6:	f002 fa5a 	bl	8003f7e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_GPIO_Init+0x64>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0c1b      	lsrs	r3, r3, #16
 8001ada:	041b      	lsls	r3, r3, #16
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x6c>
 8001ae0:	21b4      	movs	r1, #180	; 0xb4
 8001ae2:	482e      	ldr	r0, [pc, #184]	; (8001b9c <HAL_GPIO_Init+0x120>)
 8001ae4:	f002 fa4b 	bl	8003f7e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d035      	beq.n	8001b5c <HAL_GPIO_Init+0xe0>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d031      	beq.n	8001b5c <HAL_GPIO_Init+0xe0>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b11      	cmp	r3, #17
 8001afe:	d02d      	beq.n	8001b5c <HAL_GPIO_Init+0xe0>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d029      	beq.n	8001b5c <HAL_GPIO_Init+0xe0>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b12      	cmp	r3, #18
 8001b0e:	d025      	beq.n	8001b5c <HAL_GPIO_Init+0xe0>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4a22      	ldr	r2, [pc, #136]	; (8001ba0 <HAL_GPIO_Init+0x124>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d020      	beq.n	8001b5c <HAL_GPIO_Init+0xe0>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a21      	ldr	r2, [pc, #132]	; (8001ba4 <HAL_GPIO_Init+0x128>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d01b      	beq.n	8001b5c <HAL_GPIO_Init+0xe0>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4a1f      	ldr	r2, [pc, #124]	; (8001ba8 <HAL_GPIO_Init+0x12c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d016      	beq.n	8001b5c <HAL_GPIO_Init+0xe0>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4a1e      	ldr	r2, [pc, #120]	; (8001bac <HAL_GPIO_Init+0x130>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d011      	beq.n	8001b5c <HAL_GPIO_Init+0xe0>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <HAL_GPIO_Init+0x134>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00c      	beq.n	8001b5c <HAL_GPIO_Init+0xe0>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4a1b      	ldr	r2, [pc, #108]	; (8001bb4 <HAL_GPIO_Init+0x138>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d007      	beq.n	8001b5c <HAL_GPIO_Init+0xe0>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0xe0>
 8001b54:	21b5      	movs	r1, #181	; 0xb5
 8001b56:	4811      	ldr	r0, [pc, #68]	; (8001b9c <HAL_GPIO_Init+0x120>)
 8001b58:	f002 fa11 	bl	8003f7e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00b      	beq.n	8001b7c <HAL_GPIO_Init+0x100>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d007      	beq.n	8001b7c <HAL_GPIO_Init+0x100>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x100>
 8001b74:	21b6      	movs	r1, #182	; 0xb6
 8001b76:	4809      	ldr	r0, [pc, #36]	; (8001b9c <HAL_GPIO_Init+0x120>)
 8001b78:	f002 fa01 	bl	8003f7e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61fb      	str	r3, [r7, #28]
 8001b80:	e201      	b.n	8001f86 <HAL_GPIO_Init+0x50a>
 8001b82:	bf00      	nop
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40021c00 	.word	0x40021c00
 8001b9c:	08005e20 	.word	0x08005e20
 8001ba0:	10110000 	.word	0x10110000
 8001ba4:	10210000 	.word	0x10210000
 8001ba8:	10310000 	.word	0x10310000
 8001bac:	10120000 	.word	0x10120000
 8001bb0:	10220000 	.word	0x10220000
 8001bb4:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb8:	2201      	movs	r2, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	f040 81d5 	bne.w	8001f80 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d004      	beq.n	8001be8 <HAL_GPIO_Init+0x16c>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b12      	cmp	r3, #18
 8001be4:	f040 808c 	bne.w	8001d00 <HAL_GPIO_Init+0x284>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d063      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b0c      	cmp	r3, #12
 8001bf6:	d05f      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d05b      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d057      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d053      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d04f      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d04b      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d047      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d043      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d03f      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d03b      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d037      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d033      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d02f      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b05      	cmp	r3, #5
 8001c5e:	d02b      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	2b05      	cmp	r3, #5
 8001c66:	d027      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	2b06      	cmp	r3, #6
 8001c6e:	d023      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d01f      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	2b07      	cmp	r3, #7
 8001c7e:	d01b      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	2b07      	cmp	r3, #7
 8001c86:	d017      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d013      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	2b0a      	cmp	r3, #10
 8001c96:	d00f      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	2b09      	cmp	r3, #9
 8001c9e:	d00b      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	2b09      	cmp	r3, #9
 8001ca6:	d007      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	2b0f      	cmp	r3, #15
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x23c>
 8001cb0:	21c7      	movs	r1, #199	; 0xc7
 8001cb2:	4879      	ldr	r0, [pc, #484]	; (8001e98 <HAL_GPIO_Init+0x41c>)
 8001cb4:	f002 f963 	bl	8003f7e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	08da      	lsrs	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3208      	adds	r2, #8
 8001cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	220f      	movs	r2, #15
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	69b9      	ldr	r1, [r7, #24]
 8001cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0203 	and.w	r2, r3, #3
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d00b      	beq.n	8001d54 <HAL_GPIO_Init+0x2d8>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d007      	beq.n	8001d54 <HAL_GPIO_Init+0x2d8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d48:	2b11      	cmp	r3, #17
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x2d8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b12      	cmp	r3, #18
 8001d52:	d144      	bne.n	8001dde <HAL_GPIO_Init+0x362>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00f      	beq.n	8001d7c <HAL_GPIO_Init+0x300>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d00b      	beq.n	8001d7c <HAL_GPIO_Init+0x300>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d007      	beq.n	8001d7c <HAL_GPIO_Init+0x300>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x300>
 8001d74:	21da      	movs	r1, #218	; 0xda
 8001d76:	4848      	ldr	r0, [pc, #288]	; (8001e98 <HAL_GPIO_Init+0x41c>)
 8001d78:	f002 f901 	bl	8003f7e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db2:	2201      	movs	r2, #1
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	f003 0201 	and.w	r2, r3, #1
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 80b2 	beq.w	8001f80 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <HAL_GPIO_Init+0x420>)
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	4a1d      	ldr	r2, [pc, #116]	; (8001e9c <HAL_GPIO_Init+0x420>)
 8001e26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e2a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <HAL_GPIO_Init+0x420>)
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <HAL_GPIO_Init+0x424>)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a11      	ldr	r2, [pc, #68]	; (8001ea4 <HAL_GPIO_Init+0x428>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d029      	beq.n	8001eb8 <HAL_GPIO_Init+0x43c>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a10      	ldr	r2, [pc, #64]	; (8001ea8 <HAL_GPIO_Init+0x42c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d013      	beq.n	8001e94 <HAL_GPIO_Init+0x418>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <HAL_GPIO_Init+0x430>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d00d      	beq.n	8001e90 <HAL_GPIO_Init+0x414>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <HAL_GPIO_Init+0x434>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d007      	beq.n	8001e8c <HAL_GPIO_Init+0x410>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <HAL_GPIO_Init+0x438>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d101      	bne.n	8001e88 <HAL_GPIO_Init+0x40c>
 8001e84:	2304      	movs	r3, #4
 8001e86:	e018      	b.n	8001eba <HAL_GPIO_Init+0x43e>
 8001e88:	2307      	movs	r3, #7
 8001e8a:	e016      	b.n	8001eba <HAL_GPIO_Init+0x43e>
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e014      	b.n	8001eba <HAL_GPIO_Init+0x43e>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e012      	b.n	8001eba <HAL_GPIO_Init+0x43e>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e010      	b.n	8001eba <HAL_GPIO_Init+0x43e>
 8001e98:	08005e20 	.word	0x08005e20
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40013800 	.word	0x40013800
 8001ea4:	40020000 	.word	0x40020000
 8001ea8:	40020400 	.word	0x40020400
 8001eac:	40020800 	.word	0x40020800
 8001eb0:	40020c00 	.word	0x40020c00
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	2300      	movs	r3, #0
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	f002 0203 	and.w	r2, r2, #3
 8001ec0:	0092      	lsls	r2, r2, #2
 8001ec2:	4093      	lsls	r3, r2
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eca:	4933      	ldr	r1, [pc, #204]	; (8001f98 <HAL_GPIO_Init+0x51c>)
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed8:	4b30      	ldr	r3, [pc, #192]	; (8001f9c <HAL_GPIO_Init+0x520>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001efc:	4a27      	ldr	r2, [pc, #156]	; (8001f9c <HAL_GPIO_Init+0x520>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f02:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <HAL_GPIO_Init+0x520>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f26:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <HAL_GPIO_Init+0x520>)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_GPIO_Init+0x520>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f50:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <HAL_GPIO_Init+0x520>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_GPIO_Init+0x520>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f7a:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <HAL_GPIO_Init+0x520>)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	3301      	adds	r3, #1
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	2b0f      	cmp	r3, #15
 8001f8a:	f67f ae15 	bls.w	8001bb8 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8001f8e:	bf00      	nop
 8001f90:	3720      	adds	r7, #32
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40013800 	.word	0x40013800
 8001f9c:	40013c00 	.word	0x40013c00

08001fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
 8001fac:	4613      	mov	r3, r2
 8001fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d004      	beq.n	8001fc0 <HAL_GPIO_WritePin+0x20>
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	0c1b      	lsrs	r3, r3, #16
 8001fba:	041b      	lsls	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d004      	beq.n	8001fca <HAL_GPIO_WritePin+0x2a>
 8001fc0:	f240 119f 	movw	r1, #415	; 0x19f
 8001fc4:	480e      	ldr	r0, [pc, #56]	; (8002000 <HAL_GPIO_WritePin+0x60>)
 8001fc6:	f001 ffda 	bl	8003f7e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001fca:	787b      	ldrb	r3, [r7, #1]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <HAL_GPIO_WritePin+0x40>
 8001fd0:	787b      	ldrb	r3, [r7, #1]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d004      	beq.n	8001fe0 <HAL_GPIO_WritePin+0x40>
 8001fd6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001fda:	4809      	ldr	r0, [pc, #36]	; (8002000 <HAL_GPIO_WritePin+0x60>)
 8001fdc:	f001 ffcf 	bl	8003f7e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fec:	e003      	b.n	8001ff6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fee:	887b      	ldrh	r3, [r7, #2]
 8001ff0:	041a      	lsls	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	619a      	str	r2, [r3, #24]
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	08005e20 	.word	0x08005e20

08002004 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e2e0      	b.n	80025d8 <HAL_RCC_OscConfig+0x5d4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b0f      	cmp	r3, #15
 800201c:	d903      	bls.n	8002026 <HAL_RCC_OscConfig+0x22>
 800201e:	21e8      	movs	r1, #232	; 0xe8
 8002020:	48a3      	ldr	r0, [pc, #652]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002022:	f001 ffac 	bl	8003f7e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 8088 	beq.w	8002144 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00d      	beq.n	8002058 <HAL_RCC_OscConfig+0x54>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002044:	d008      	beq.n	8002058 <HAL_RCC_OscConfig+0x54>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800204e:	d003      	beq.n	8002058 <HAL_RCC_OscConfig+0x54>
 8002050:	21ed      	movs	r1, #237	; 0xed
 8002052:	4897      	ldr	r0, [pc, #604]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	f001 ff93 	bl	8003f7e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002058:	4b96      	ldr	r3, [pc, #600]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b04      	cmp	r3, #4
 8002062:	d00c      	beq.n	800207e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002064:	4b93      	ldr	r3, [pc, #588]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800206c:	2b08      	cmp	r3, #8
 800206e:	d112      	bne.n	8002096 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002070:	4b90      	ldr	r3, [pc, #576]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800207c:	d10b      	bne.n	8002096 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207e:	4b8d      	ldr	r3, [pc, #564]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d05b      	beq.n	8002142 <HAL_RCC_OscConfig+0x13e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d157      	bne.n	8002142 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e2a0      	b.n	80025d8 <HAL_RCC_OscConfig+0x5d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0xaa>
 80020a0:	4b84      	ldr	r3, [pc, #528]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a83      	ldr	r2, [pc, #524]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 80020a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	e01d      	b.n	80020ea <HAL_RCC_OscConfig+0xe6>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCC_OscConfig+0xce>
 80020b8:	4b7e      	ldr	r3, [pc, #504]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a7d      	ldr	r2, [pc, #500]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 80020be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	4b7b      	ldr	r3, [pc, #492]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a7a      	ldr	r2, [pc, #488]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 80020ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	e00b      	b.n	80020ea <HAL_RCC_OscConfig+0xe6>
 80020d2:	4b78      	ldr	r3, [pc, #480]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a77      	ldr	r2, [pc, #476]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 80020d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b75      	ldr	r3, [pc, #468]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a74      	ldr	r2, [pc, #464]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 80020e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d013      	beq.n	800211a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7fe ff27 	bl	8000f44 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020fa:	f7fe ff23 	bl	8000f44 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b64      	cmp	r3, #100	; 0x64
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e265      	b.n	80025d8 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210c:	4b69      	ldr	r3, [pc, #420]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0xf6>
 8002118:	e014      	b.n	8002144 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7fe ff13 	bl	8000f44 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002122:	f7fe ff0f 	bl	8000f44 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b64      	cmp	r3, #100	; 0x64
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e251      	b.n	80025d8 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002134:	4b5f      	ldr	r3, [pc, #380]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x11e>
 8002140:	e000      	b.n	8002144 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002142:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d079      	beq.n	8002244 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_RCC_OscConfig+0x166>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d004      	beq.n	800216a <HAL_RCC_OscConfig+0x166>
 8002160:	f240 111f 	movw	r1, #287	; 0x11f
 8002164:	4852      	ldr	r0, [pc, #328]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002166:	f001 ff0a 	bl	8003f7e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2b1f      	cmp	r3, #31
 8002170:	d904      	bls.n	800217c <HAL_RCC_OscConfig+0x178>
 8002172:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002176:	484e      	ldr	r0, [pc, #312]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	f001 ff01 	bl	8003f7e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800217c:	4b4d      	ldr	r3, [pc, #308]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00b      	beq.n	80021a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002188:	4b4a      	ldr	r3, [pc, #296]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002190:	2b08      	cmp	r3, #8
 8002192:	d11c      	bne.n	80021ce <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002194:	4b47      	ldr	r3, [pc, #284]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d116      	bne.n	80021ce <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a0:	4b44      	ldr	r3, [pc, #272]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_OscConfig+0x1b4>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e20f      	b.n	80025d8 <HAL_RCC_OscConfig+0x5d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b8:	4b3e      	ldr	r3, [pc, #248]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	493b      	ldr	r1, [pc, #236]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021cc:	e03a      	b.n	8002244 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d020      	beq.n	8002218 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d6:	4b38      	ldr	r3, [pc, #224]	; (80022b8 <HAL_RCC_OscConfig+0x2b4>)
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe feb2 	bl	8000f44 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e4:	f7fe feae 	bl	8000f44 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e1f0      	b.n	80025d8 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f6:	4b2f      	ldr	r3, [pc, #188]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002202:	4b2c      	ldr	r3, [pc, #176]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4928      	ldr	r1, [pc, #160]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]
 8002216:	e015      	b.n	8002244 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002218:	4b27      	ldr	r3, [pc, #156]	; (80022b8 <HAL_RCC_OscConfig+0x2b4>)
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221e:	f7fe fe91 	bl	8000f44 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002226:	f7fe fe8d 	bl	8000f44 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e1cf      	b.n	80025d8 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f0      	bne.n	8002226 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d046      	beq.n	80022de <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_RCC_OscConfig+0x266>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d004      	beq.n	800226a <HAL_RCC_OscConfig+0x266>
 8002260:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8002264:	4812      	ldr	r0, [pc, #72]	; (80022b0 <HAL_RCC_OscConfig+0x2ac>)
 8002266:	f001 fe8a 	bl	8003f7e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d016      	beq.n	80022a0 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_RCC_OscConfig+0x2b8>)
 8002274:	2201      	movs	r2, #1
 8002276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002278:	f7fe fe64 	bl	8000f44 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002280:	f7fe fe60 	bl	8000f44 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e1a2      	b.n	80025d8 <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_RCC_OscConfig+0x2b0>)
 8002294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x27c>
 800229e:	e01e      	b.n	80022de <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCC_OscConfig+0x2b8>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a6:	f7fe fe4d 	bl	8000f44 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ac:	e011      	b.n	80022d2 <HAL_RCC_OscConfig+0x2ce>
 80022ae:	bf00      	nop
 80022b0:	08005e5c 	.word	0x08005e5c
 80022b4:	40023800 	.word	0x40023800
 80022b8:	42470000 	.word	0x42470000
 80022bc:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c0:	f7fe fe40 	bl	8000f44 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e182      	b.n	80025d8 <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d2:	4b97      	ldr	r3, [pc, #604]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 80022d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80a8 	beq.w	800243c <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ec:	2300      	movs	r3, #0
 80022ee:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00c      	beq.n	8002312 <HAL_RCC_OscConfig+0x30e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d008      	beq.n	8002312 <HAL_RCC_OscConfig+0x30e>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b05      	cmp	r3, #5
 8002306:	d004      	beq.n	8002312 <HAL_RCC_OscConfig+0x30e>
 8002308:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800230c:	4889      	ldr	r0, [pc, #548]	; (8002534 <HAL_RCC_OscConfig+0x530>)
 800230e:	f001 fe36 	bl	8003f7e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002312:	4b87      	ldr	r3, [pc, #540]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10f      	bne.n	800233e <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b83      	ldr	r3, [pc, #524]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a82      	ldr	r2, [pc, #520]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 8002328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
 800232e:	4b80      	ldr	r3, [pc, #512]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800233a:	2301      	movs	r3, #1
 800233c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233e:	4b7e      	ldr	r3, [pc, #504]	; (8002538 <HAL_RCC_OscConfig+0x534>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002346:	2b00      	cmp	r3, #0
 8002348:	d118      	bne.n	800237c <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234a:	4b7b      	ldr	r3, [pc, #492]	; (8002538 <HAL_RCC_OscConfig+0x534>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a7a      	ldr	r2, [pc, #488]	; (8002538 <HAL_RCC_OscConfig+0x534>)
 8002350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002356:	f7fe fdf5 	bl	8000f44 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235e:	f7fe fdf1 	bl	8000f44 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e133      	b.n	80025d8 <HAL_RCC_OscConfig+0x5d4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	4b71      	ldr	r3, [pc, #452]	; (8002538 <HAL_RCC_OscConfig+0x534>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d106      	bne.n	8002392 <HAL_RCC_OscConfig+0x38e>
 8002384:	4b6a      	ldr	r3, [pc, #424]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	4a69      	ldr	r2, [pc, #420]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6713      	str	r3, [r2, #112]	; 0x70
 8002390:	e01c      	b.n	80023cc <HAL_RCC_OscConfig+0x3c8>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b05      	cmp	r3, #5
 8002398:	d10c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x3b0>
 800239a:	4b65      	ldr	r3, [pc, #404]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239e:	4a64      	ldr	r2, [pc, #400]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 80023a0:	f043 0304 	orr.w	r3, r3, #4
 80023a4:	6713      	str	r3, [r2, #112]	; 0x70
 80023a6:	4b62      	ldr	r3, [pc, #392]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 80023a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023aa:	4a61      	ldr	r2, [pc, #388]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6713      	str	r3, [r2, #112]	; 0x70
 80023b2:	e00b      	b.n	80023cc <HAL_RCC_OscConfig+0x3c8>
 80023b4:	4b5e      	ldr	r3, [pc, #376]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	4a5d      	ldr	r2, [pc, #372]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 80023ba:	f023 0301 	bic.w	r3, r3, #1
 80023be:	6713      	str	r3, [r2, #112]	; 0x70
 80023c0:	4b5b      	ldr	r3, [pc, #364]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 80023c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c4:	4a5a      	ldr	r2, [pc, #360]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 80023c6:	f023 0304 	bic.w	r3, r3, #4
 80023ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d015      	beq.n	8002400 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7fe fdb6 	bl	8000f44 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023da:	e00a      	b.n	80023f2 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023dc:	f7fe fdb2 	bl	8000f44 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e0f2      	b.n	80025d8 <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f2:	4b4f      	ldr	r3, [pc, #316]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0ee      	beq.n	80023dc <HAL_RCC_OscConfig+0x3d8>
 80023fe:	e014      	b.n	800242a <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002400:	f7fe fda0 	bl	8000f44 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002406:	e00a      	b.n	800241e <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002408:	f7fe fd9c 	bl	8000f44 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e0dc      	b.n	80025d8 <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241e:	4b44      	ldr	r3, [pc, #272]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1ee      	bne.n	8002408 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800242a:	7dfb      	ldrb	r3, [r7, #23]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d105      	bne.n	800243c <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002430:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	4a3e      	ldr	r2, [pc, #248]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 8002436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00c      	beq.n	800245e <HAL_RCC_OscConfig+0x45a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d008      	beq.n	800245e <HAL_RCC_OscConfig+0x45a>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d004      	beq.n	800245e <HAL_RCC_OscConfig+0x45a>
 8002454:	f240 11cf 	movw	r1, #463	; 0x1cf
 8002458:	4836      	ldr	r0, [pc, #216]	; (8002534 <HAL_RCC_OscConfig+0x530>)
 800245a:	f001 fd90 	bl	8003f7e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80b7 	beq.w	80025d6 <HAL_RCC_OscConfig+0x5d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002468:	4b31      	ldr	r3, [pc, #196]	; (8002530 <HAL_RCC_OscConfig+0x52c>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b08      	cmp	r3, #8
 8002472:	f000 80ae 	beq.w	80025d2 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	2b02      	cmp	r3, #2
 800247c:	f040 8092 	bne.w	80025a4 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d009      	beq.n	800249c <HAL_RCC_OscConfig+0x498>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002490:	d004      	beq.n	800249c <HAL_RCC_OscConfig+0x498>
 8002492:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002496:	4827      	ldr	r0, [pc, #156]	; (8002534 <HAL_RCC_OscConfig+0x530>)
 8002498:	f001 fd71 	bl	8003f7e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	2b3f      	cmp	r3, #63	; 0x3f
 80024a2:	d904      	bls.n	80024ae <HAL_RCC_OscConfig+0x4aa>
 80024a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80024a8:	4822      	ldr	r0, [pc, #136]	; (8002534 <HAL_RCC_OscConfig+0x530>)
 80024aa:	f001 fd68 	bl	8003f7e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	2b31      	cmp	r3, #49	; 0x31
 80024b4:	d904      	bls.n	80024c0 <HAL_RCC_OscConfig+0x4bc>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80024be:	d904      	bls.n	80024ca <HAL_RCC_OscConfig+0x4c6>
 80024c0:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80024c4:	481b      	ldr	r0, [pc, #108]	; (8002534 <HAL_RCC_OscConfig+0x530>)
 80024c6:	f001 fd5a 	bl	8003f7e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d010      	beq.n	80024f4 <HAL_RCC_OscConfig+0x4f0>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d00c      	beq.n	80024f4 <HAL_RCC_OscConfig+0x4f0>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d008      	beq.n	80024f4 <HAL_RCC_OscConfig+0x4f0>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d004      	beq.n	80024f4 <HAL_RCC_OscConfig+0x4f0>
 80024ea:	f240 11db 	movw	r1, #475	; 0x1db
 80024ee:	4811      	ldr	r0, [pc, #68]	; (8002534 <HAL_RCC_OscConfig+0x530>)
 80024f0:	f001 fd45 	bl	8003f7e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d903      	bls.n	8002504 <HAL_RCC_OscConfig+0x500>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	2b0f      	cmp	r3, #15
 8002502:	d904      	bls.n	800250e <HAL_RCC_OscConfig+0x50a>
 8002504:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8002508:	480a      	ldr	r0, [pc, #40]	; (8002534 <HAL_RCC_OscConfig+0x530>)
 800250a:	f001 fd38 	bl	8003f7e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_RCC_OscConfig+0x538>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7fe fd16 	bl	8000f44 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251a:	e011      	b.n	8002540 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251c:	f7fe fd12 	bl	8000f44 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d90a      	bls.n	8002540 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e054      	b.n	80025d8 <HAL_RCC_OscConfig+0x5d4>
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800
 8002534:	08005e5c 	.word	0x08005e5c
 8002538:	40007000 	.word	0x40007000
 800253c:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002540:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <HAL_RCC_OscConfig+0x5dc>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1e7      	bne.n	800251c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69da      	ldr	r2, [r3, #28]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	019b      	lsls	r3, r3, #6
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002562:	085b      	lsrs	r3, r3, #1
 8002564:	3b01      	subs	r3, #1
 8002566:	041b      	lsls	r3, r3, #16
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	061b      	lsls	r3, r3, #24
 8002570:	491b      	ldr	r1, [pc, #108]	; (80025e0 <HAL_RCC_OscConfig+0x5dc>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002576:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x5e0>)
 8002578:	2201      	movs	r2, #1
 800257a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7fe fce2 	bl	8000f44 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002584:	f7fe fcde 	bl	8000f44 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e020      	b.n	80025d8 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_RCC_OscConfig+0x5dc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x580>
 80025a2:	e018      	b.n	80025d6 <HAL_RCC_OscConfig+0x5d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x5e0>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7fe fccb 	bl	8000f44 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b2:	f7fe fcc7 	bl	8000f44 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e009      	b.n	80025d8 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_RCC_OscConfig+0x5dc>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f0      	bne.n	80025b2 <HAL_RCC_OscConfig+0x5ae>
 80025d0:	e001      	b.n	80025d6 <HAL_RCC_OscConfig+0x5d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_OscConfig+0x5d4>
    }
  }
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40023800 	.word	0x40023800
 80025e4:	42470060 	.word	0x42470060

080025e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e172      	b.n	80028e2 <HAL_RCC_ClockConfig+0x2fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_RCC_ClockConfig+0x24>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b0f      	cmp	r3, #15
 800260a:	d904      	bls.n	8002616 <HAL_RCC_ClockConfig+0x2e>
 800260c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002610:	487b      	ldr	r0, [pc, #492]	; (8002800 <HAL_RCC_ClockConfig+0x218>)
 8002612:	f001 fcb4 	bl	8003f7e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d019      	beq.n	8002650 <HAL_RCC_ClockConfig+0x68>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d016      	beq.n	8002650 <HAL_RCC_ClockConfig+0x68>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d013      	beq.n	8002650 <HAL_RCC_ClockConfig+0x68>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b03      	cmp	r3, #3
 800262c:	d010      	beq.n	8002650 <HAL_RCC_ClockConfig+0x68>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b04      	cmp	r3, #4
 8002632:	d00d      	beq.n	8002650 <HAL_RCC_ClockConfig+0x68>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b05      	cmp	r3, #5
 8002638:	d00a      	beq.n	8002650 <HAL_RCC_ClockConfig+0x68>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b06      	cmp	r3, #6
 800263e:	d007      	beq.n	8002650 <HAL_RCC_ClockConfig+0x68>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b07      	cmp	r3, #7
 8002644:	d004      	beq.n	8002650 <HAL_RCC_ClockConfig+0x68>
 8002646:	f240 2141 	movw	r1, #577	; 0x241
 800264a:	486d      	ldr	r0, [pc, #436]	; (8002800 <HAL_RCC_ClockConfig+0x218>)
 800264c:	f001 fc97 	bl	8003f7e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002650:	4b6c      	ldr	r3, [pc, #432]	; (8002804 <HAL_RCC_ClockConfig+0x21c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d90c      	bls.n	8002678 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b69      	ldr	r3, [pc, #420]	; (8002804 <HAL_RCC_ClockConfig+0x21c>)
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b67      	ldr	r3, [pc, #412]	; (8002804 <HAL_RCC_ClockConfig+0x21c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e134      	b.n	80028e2 <HAL_RCC_ClockConfig+0x2fa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d049      	beq.n	8002718 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002690:	4b5d      	ldr	r3, [pc, #372]	; (8002808 <HAL_RCC_ClockConfig+0x220>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4a5c      	ldr	r2, [pc, #368]	; (8002808 <HAL_RCC_ClockConfig+0x220>)
 8002696:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800269a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a8:	4b57      	ldr	r3, [pc, #348]	; (8002808 <HAL_RCC_ClockConfig+0x220>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4a56      	ldr	r2, [pc, #344]	; (8002808 <HAL_RCC_ClockConfig+0x220>)
 80026ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d024      	beq.n	8002706 <HAL_RCC_ClockConfig+0x11e>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b80      	cmp	r3, #128	; 0x80
 80026c2:	d020      	beq.n	8002706 <HAL_RCC_ClockConfig+0x11e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b90      	cmp	r3, #144	; 0x90
 80026ca:	d01c      	beq.n	8002706 <HAL_RCC_ClockConfig+0x11e>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2ba0      	cmp	r3, #160	; 0xa0
 80026d2:	d018      	beq.n	8002706 <HAL_RCC_ClockConfig+0x11e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2bb0      	cmp	r3, #176	; 0xb0
 80026da:	d014      	beq.n	8002706 <HAL_RCC_ClockConfig+0x11e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2bc0      	cmp	r3, #192	; 0xc0
 80026e2:	d010      	beq.n	8002706 <HAL_RCC_ClockConfig+0x11e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2bd0      	cmp	r3, #208	; 0xd0
 80026ea:	d00c      	beq.n	8002706 <HAL_RCC_ClockConfig+0x11e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2be0      	cmp	r3, #224	; 0xe0
 80026f2:	d008      	beq.n	8002706 <HAL_RCC_ClockConfig+0x11e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2bf0      	cmp	r3, #240	; 0xf0
 80026fa:	d004      	beq.n	8002706 <HAL_RCC_ClockConfig+0x11e>
 80026fc:	f44f 7119 	mov.w	r1, #612	; 0x264
 8002700:	483f      	ldr	r0, [pc, #252]	; (8002800 <HAL_RCC_ClockConfig+0x218>)
 8002702:	f001 fc3c 	bl	8003f7e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002706:	4b40      	ldr	r3, [pc, #256]	; (8002808 <HAL_RCC_ClockConfig+0x220>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	493d      	ldr	r1, [pc, #244]	; (8002808 <HAL_RCC_ClockConfig+0x220>)
 8002714:	4313      	orrs	r3, r2
 8002716:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d059      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d010      	beq.n	800274e <HAL_RCC_ClockConfig+0x166>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d00c      	beq.n	800274e <HAL_RCC_ClockConfig+0x166>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d008      	beq.n	800274e <HAL_RCC_ClockConfig+0x166>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d004      	beq.n	800274e <HAL_RCC_ClockConfig+0x166>
 8002744:	f240 216b 	movw	r1, #619	; 0x26b
 8002748:	482d      	ldr	r0, [pc, #180]	; (8002800 <HAL_RCC_ClockConfig+0x218>)
 800274a:	f001 fc18 	bl	8003f7e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d107      	bne.n	8002766 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <HAL_RCC_ClockConfig+0x220>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d119      	bne.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0bd      	b.n	80028e2 <HAL_RCC_ClockConfig+0x2fa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d003      	beq.n	8002776 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002772:	2b03      	cmp	r3, #3
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_RCC_ClockConfig+0x220>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d109      	bne.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0ad      	b.n	80028e2 <HAL_RCC_ClockConfig+0x2fa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <HAL_RCC_ClockConfig+0x220>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0a5      	b.n	80028e2 <HAL_RCC_ClockConfig+0x2fa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002796:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <HAL_RCC_ClockConfig+0x220>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f023 0203 	bic.w	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4919      	ldr	r1, [pc, #100]	; (8002808 <HAL_RCC_ClockConfig+0x220>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a8:	f7fe fbcc 	bl	8000f44 <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b0:	f7fe fbc8 	bl	8000f44 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e08d      	b.n	80028e2 <HAL_RCC_ClockConfig+0x2fa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <HAL_RCC_ClockConfig+0x220>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 020c 	and.w	r2, r3, #12
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d1eb      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027d8:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <HAL_RCC_ClockConfig+0x21c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d212      	bcs.n	800280c <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_RCC_ClockConfig+0x21c>)
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_RCC_ClockConfig+0x21c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d007      	beq.n	800280c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e070      	b.n	80028e2 <HAL_RCC_ClockConfig+0x2fa>
 8002800:	08005e5c 	.word	0x08005e5c
 8002804:	40023c00 	.word	0x40023c00
 8002808:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d025      	beq.n	8002864 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d018      	beq.n	8002852 <HAL_RCC_ClockConfig+0x26a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002828:	d013      	beq.n	8002852 <HAL_RCC_ClockConfig+0x26a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002832:	d00e      	beq.n	8002852 <HAL_RCC_ClockConfig+0x26a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800283c:	d009      	beq.n	8002852 <HAL_RCC_ClockConfig+0x26a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002846:	d004      	beq.n	8002852 <HAL_RCC_ClockConfig+0x26a>
 8002848:	f240 21a9 	movw	r1, #681	; 0x2a9
 800284c:	4827      	ldr	r0, [pc, #156]	; (80028ec <HAL_RCC_ClockConfig+0x304>)
 800284e:	f001 fb96 	bl	8003f7e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002852:	4b27      	ldr	r3, [pc, #156]	; (80028f0 <HAL_RCC_ClockConfig+0x308>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	4924      	ldr	r1, [pc, #144]	; (80028f0 <HAL_RCC_ClockConfig+0x308>)
 8002860:	4313      	orrs	r3, r2
 8002862:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d026      	beq.n	80028be <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d018      	beq.n	80028aa <HAL_RCC_ClockConfig+0x2c2>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002880:	d013      	beq.n	80028aa <HAL_RCC_ClockConfig+0x2c2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800288a:	d00e      	beq.n	80028aa <HAL_RCC_ClockConfig+0x2c2>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002894:	d009      	beq.n	80028aa <HAL_RCC_ClockConfig+0x2c2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800289e:	d004      	beq.n	80028aa <HAL_RCC_ClockConfig+0x2c2>
 80028a0:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 80028a4:	4811      	ldr	r0, [pc, #68]	; (80028ec <HAL_RCC_ClockConfig+0x304>)
 80028a6:	f001 fb6a 	bl	8003f7e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028aa:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <HAL_RCC_ClockConfig+0x308>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	490d      	ldr	r1, [pc, #52]	; (80028f0 <HAL_RCC_ClockConfig+0x308>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028be:	f000 f81d 	bl	80028fc <HAL_RCC_GetSysClockFreq>
 80028c2:	4601      	mov	r1, r0
 80028c4:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_RCC_ClockConfig+0x308>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <HAL_RCC_ClockConfig+0x30c>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	fa21 f303 	lsr.w	r3, r1, r3
 80028d6:	4a08      	ldr	r2, [pc, #32]	; (80028f8 <HAL_RCC_ClockConfig+0x310>)
 80028d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80028da:	2000      	movs	r0, #0
 80028dc:	f7fe faee 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	08005e5c 	.word	0x08005e5c
 80028f0:	40023800 	.word	0x40023800
 80028f4:	08005ed0 	.word	0x08005ed0
 80028f8:	20000110 	.word	0x20000110

080028fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	607b      	str	r3, [r7, #4]
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	2300      	movs	r3, #0
 800290c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002912:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b04      	cmp	r3, #4
 800291c:	d007      	beq.n	800292e <HAL_RCC_GetSysClockFreq+0x32>
 800291e:	2b08      	cmp	r3, #8
 8002920:	d008      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x38>
 8002922:	2b00      	cmp	r3, #0
 8002924:	f040 80b4 	bne.w	8002a90 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002928:	4b5e      	ldr	r3, [pc, #376]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800292a:	60bb      	str	r3, [r7, #8]
       break;
 800292c:	e0b3      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800292e:	4b5e      	ldr	r3, [pc, #376]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002930:	60bb      	str	r3, [r7, #8]
      break;
 8002932:	e0b0      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002934:	4b5a      	ldr	r3, [pc, #360]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800293c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800293e:	4b58      	ldr	r3, [pc, #352]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d04a      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294a:	4b55      	ldr	r3, [pc, #340]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	099b      	lsrs	r3, r3, #6
 8002950:	f04f 0400 	mov.w	r4, #0
 8002954:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	ea03 0501 	and.w	r5, r3, r1
 8002960:	ea04 0602 	and.w	r6, r4, r2
 8002964:	4629      	mov	r1, r5
 8002966:	4632      	mov	r2, r6
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	f04f 0400 	mov.w	r4, #0
 8002970:	0154      	lsls	r4, r2, #5
 8002972:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002976:	014b      	lsls	r3, r1, #5
 8002978:	4619      	mov	r1, r3
 800297a:	4622      	mov	r2, r4
 800297c:	1b49      	subs	r1, r1, r5
 800297e:	eb62 0206 	sbc.w	r2, r2, r6
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	f04f 0400 	mov.w	r4, #0
 800298a:	0194      	lsls	r4, r2, #6
 800298c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002990:	018b      	lsls	r3, r1, #6
 8002992:	1a5b      	subs	r3, r3, r1
 8002994:	eb64 0402 	sbc.w	r4, r4, r2
 8002998:	f04f 0100 	mov.w	r1, #0
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	00e2      	lsls	r2, r4, #3
 80029a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029a6:	00d9      	lsls	r1, r3, #3
 80029a8:	460b      	mov	r3, r1
 80029aa:	4614      	mov	r4, r2
 80029ac:	195b      	adds	r3, r3, r5
 80029ae:	eb44 0406 	adc.w	r4, r4, r6
 80029b2:	f04f 0100 	mov.w	r1, #0
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	0262      	lsls	r2, r4, #9
 80029bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80029c0:	0259      	lsls	r1, r3, #9
 80029c2:	460b      	mov	r3, r1
 80029c4:	4614      	mov	r4, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	4621      	mov	r1, r4
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f04f 0400 	mov.w	r4, #0
 80029d0:	461a      	mov	r2, r3
 80029d2:	4623      	mov	r3, r4
 80029d4:	f7fe f89c 	bl	8000b10 <__aeabi_uldivmod>
 80029d8:	4603      	mov	r3, r0
 80029da:	460c      	mov	r4, r1
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	e049      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e0:	4b2f      	ldr	r3, [pc, #188]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	f04f 0400 	mov.w	r4, #0
 80029ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	ea03 0501 	and.w	r5, r3, r1
 80029f6:	ea04 0602 	and.w	r6, r4, r2
 80029fa:	4629      	mov	r1, r5
 80029fc:	4632      	mov	r2, r6
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	0154      	lsls	r4, r2, #5
 8002a08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a0c:	014b      	lsls	r3, r1, #5
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4622      	mov	r2, r4
 8002a12:	1b49      	subs	r1, r1, r5
 8002a14:	eb62 0206 	sbc.w	r2, r2, r6
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	0194      	lsls	r4, r2, #6
 8002a22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a26:	018b      	lsls	r3, r1, #6
 8002a28:	1a5b      	subs	r3, r3, r1
 8002a2a:	eb64 0402 	sbc.w	r4, r4, r2
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	00e2      	lsls	r2, r4, #3
 8002a38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a3c:	00d9      	lsls	r1, r3, #3
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4614      	mov	r4, r2
 8002a42:	195b      	adds	r3, r3, r5
 8002a44:	eb44 0406 	adc.w	r4, r4, r6
 8002a48:	f04f 0100 	mov.w	r1, #0
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	02a2      	lsls	r2, r4, #10
 8002a52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a56:	0299      	lsls	r1, r3, #10
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4614      	mov	r4, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	4621      	mov	r1, r4
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f04f 0400 	mov.w	r4, #0
 8002a66:	461a      	mov	r2, r3
 8002a68:	4623      	mov	r3, r4
 8002a6a:	f7fe f851 	bl	8000b10 <__aeabi_uldivmod>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	460c      	mov	r4, r1
 8002a72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a74:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	60bb      	str	r3, [r7, #8]
      break;
 8002a8e:	e002      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a92:	60bb      	str	r3, [r7, #8]
      break;
 8002a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a96:	68bb      	ldr	r3, [r7, #8]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	007a1200 	.word	0x007a1200

08002aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000110 	.word	0x20000110

08002ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ac8:	f7ff fff0 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002acc:	4601      	mov	r1, r0
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	0a9b      	lsrs	r3, r3, #10
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4a03      	ldr	r2, [pc, #12]	; (8002ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ada:	5cd3      	ldrb	r3, [r2, r3]
 8002adc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	08005ee0 	.word	0x08005ee0

08002aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002af0:	f7ff ffdc 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002af4:	4601      	mov	r1, r0
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	0b5b      	lsrs	r3, r3, #13
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	4a03      	ldr	r2, [pc, #12]	; (8002b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b02:	5cd3      	ldrb	r3, [r2, r3]
 8002b04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	08005ee0 	.word	0x08005ee0

08002b14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e0a0      	b.n	8002c68 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d02c      	beq.n	8002b88 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a4f      	ldr	r2, [pc, #316]	; (8002c70 <HAL_UART_Init+0x15c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00e      	beq.n	8002b56 <HAL_UART_Init+0x42>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a4d      	ldr	r2, [pc, #308]	; (8002c74 <HAL_UART_Init+0x160>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d009      	beq.n	8002b56 <HAL_UART_Init+0x42>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a4c      	ldr	r2, [pc, #304]	; (8002c78 <HAL_UART_Init+0x164>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d004      	beq.n	8002b56 <HAL_UART_Init+0x42>
 8002b4c:	f240 1149 	movw	r1, #329	; 0x149
 8002b50:	484a      	ldr	r0, [pc, #296]	; (8002c7c <HAL_UART_Init+0x168>)
 8002b52:	f001 fa14 	bl	8003f7e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d028      	beq.n	8002bb0 <HAL_UART_Init+0x9c>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b66:	d023      	beq.n	8002bb0 <HAL_UART_Init+0x9c>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b70:	d01e      	beq.n	8002bb0 <HAL_UART_Init+0x9c>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b7a:	d019      	beq.n	8002bb0 <HAL_UART_Init+0x9c>
 8002b7c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002b80:	483e      	ldr	r0, [pc, #248]	; (8002c7c <HAL_UART_Init+0x168>)
 8002b82:	f001 f9fc 	bl	8003f7e <assert_failed>
 8002b86:	e013      	b.n	8002bb0 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a38      	ldr	r2, [pc, #224]	; (8002c70 <HAL_UART_Init+0x15c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00e      	beq.n	8002bb0 <HAL_UART_Init+0x9c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a37      	ldr	r2, [pc, #220]	; (8002c74 <HAL_UART_Init+0x160>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_UART_Init+0x9c>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a35      	ldr	r2, [pc, #212]	; (8002c78 <HAL_UART_Init+0x164>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_UART_Init+0x9c>
 8002ba6:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8002baa:	4834      	ldr	r0, [pc, #208]	; (8002c7c <HAL_UART_Init+0x168>)
 8002bac:	f001 f9e7 	bl	8003f7e <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d009      	beq.n	8002bcc <HAL_UART_Init+0xb8>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc0:	d004      	beq.n	8002bcc <HAL_UART_Init+0xb8>
 8002bc2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8002bc6:	482d      	ldr	r0, [pc, #180]	; (8002c7c <HAL_UART_Init+0x168>)
 8002bc8:	f001 f9d9 	bl	8003f7e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d009      	beq.n	8002be8 <HAL_UART_Init+0xd4>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bdc:	d004      	beq.n	8002be8 <HAL_UART_Init+0xd4>
 8002bde:	f240 1151 	movw	r1, #337	; 0x151
 8002be2:	4826      	ldr	r0, [pc, #152]	; (8002c7c <HAL_UART_Init+0x168>)
 8002be4:	f001 f9cb 	bl	8003f7e <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d106      	bne.n	8002c02 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f001 fab7 	bl	8004170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2224      	movs	r2, #36	; 0x24
 8002c06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c18:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fb5c 	bl	80032d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c2e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c3e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c4e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40011000 	.word	0x40011000
 8002c74:	40004400 	.word	0x40004400
 8002c78:	40011400 	.word	0x40011400
 8002c7c:	08005e94 	.word	0x08005e94

08002c80 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	f040 8090 	bne.w	8002dc2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <HAL_UART_Receive+0x2e>
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e088      	b.n	8002dc4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_UART_Receive+0x40>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e081      	b.n	8002dc4 <HAL_UART_Receive+0x144>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2222      	movs	r2, #34	; 0x22
 8002cd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002cd6:	f7fe f935 	bl	8000f44 <HAL_GetTick>
 8002cda:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	88fa      	ldrh	r2, [r7, #6]
 8002ce0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	88fa      	ldrh	r2, [r7, #6]
 8002ce6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ce8:	e05c      	b.n	8002da4 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d00:	d12b      	bne.n	8002d5a <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2120      	movs	r1, #32
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f977 	bl	8003000 <UART_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e053      	b.n	8002dc4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10c      	bne.n	8002d42 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	e030      	b.n	8002da4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	3301      	adds	r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	e024      	b.n	8002da4 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2200      	movs	r2, #0
 8002d62:	2120      	movs	r1, #32
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f94b 	bl	8003000 <UART_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e027      	b.n	8002dc4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d108      	bne.n	8002d8e <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6859      	ldr	r1, [r3, #4]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	60ba      	str	r2, [r7, #8]
 8002d88:	b2ca      	uxtb	r2, r1
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	e00a      	b.n	8002da4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	1c59      	adds	r1, r3, #1
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d19d      	bne.n	8002cea <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e000      	b.n	8002dc4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002dc2:	2302      	movs	r3, #2
  }
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10d      	bne.n	8002e1e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_UART_IRQHandler+0x52>
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f9dc 	bl	80031d4 <UART_Receive_IT>
      return;
 8002e1c:	e0cc      	b.n	8002fb8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80ab 	beq.w	8002f7c <HAL_UART_IRQHandler+0x1b0>
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <HAL_UART_IRQHandler+0x70>
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80a0 	beq.w	8002f7c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_UART_IRQHandler+0x90>
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	f043 0201 	orr.w	r2, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_UART_IRQHandler+0xb0>
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e74:	f043 0202 	orr.w	r2, r3, #2
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_UART_IRQHandler+0xd0>
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e94:	f043 0204 	orr.w	r2, r3, #4
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_UART_IRQHandler+0xf0>
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb4:	f043 0208 	orr.w	r2, r3, #8
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d078      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <HAL_UART_IRQHandler+0x112>
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f97b 	bl	80031d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee8:	2b40      	cmp	r3, #64	; 0x40
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <HAL_UART_IRQHandler+0x13a>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d031      	beq.n	8002f6a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f8c4 	bl	8003094 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b40      	cmp	r3, #64	; 0x40
 8002f18:	d123      	bne.n	8002f62 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f28:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d013      	beq.n	8002f5a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f36:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <HAL_UART_IRQHandler+0x1f4>)
 8002f38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe f9b2 	bl	80012a8 <HAL_DMA_Abort_IT>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d016      	beq.n	8002f78 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f54:	4610      	mov	r0, r2
 8002f56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f58:	e00e      	b.n	8002f78 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f846 	bl	8002fec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f60:	e00a      	b.n	8002f78 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f842 	bl	8002fec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f68:	e006      	b.n	8002f78 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f83e 	bl	8002fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002f76:	e01e      	b.n	8002fb6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f78:	bf00      	nop
    return;
 8002f7a:	e01c      	b.n	8002fb6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <HAL_UART_IRQHandler+0x1cc>
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f8b1 	bl	80030f8 <UART_Transmit_IT>
    return;
 8002f96:	e00f      	b.n	8002fb8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x1ec>
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f8f9 	bl	80031a4 <UART_EndTransmit_IT>
    return;
 8002fb2:	bf00      	nop
 8002fb4:	e000      	b.n	8002fb8 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002fb6:	bf00      	nop
  }
}
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	080030d1 	.word	0x080030d1

08002fc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003010:	e02c      	b.n	800306c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003018:	d028      	beq.n	800306c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d007      	beq.n	8003030 <UART_WaitOnFlagUntilTimeout+0x30>
 8003020:	f7fd ff90 	bl	8000f44 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	429a      	cmp	r2, r3
 800302e:	d21d      	bcs.n	800306c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800303e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e00f      	b.n	800308c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4013      	ands	r3, r2
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	429a      	cmp	r2, r3
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	429a      	cmp	r2, r3
 8003088:	d0c3      	beq.n	8003012 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80030aa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f7ff ff7e 	bl	8002fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b21      	cmp	r3, #33	; 0x21
 800310a:	d144      	bne.n	8003196 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003114:	d11a      	bne.n	800314c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800312a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	1c9a      	adds	r2, r3, #2
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	621a      	str	r2, [r3, #32]
 800313e:	e00e      	b.n	800315e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	621a      	str	r2, [r3, #32]
 800314a:	e008      	b.n	800315e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	1c59      	adds	r1, r3, #1
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6211      	str	r1, [r2, #32]
 8003156:	781a      	ldrb	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29b      	uxth	r3, r3
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4619      	mov	r1, r3
 800316c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10f      	bne.n	8003192 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003180:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003190:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	e000      	b.n	8003198 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003196:	2302      	movs	r3, #2
  }
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff fefd 	bl	8002fc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b22      	cmp	r3, #34	; 0x22
 80031e6:	d171      	bne.n	80032cc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f0:	d123      	bne.n	800323a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10e      	bne.n	800321e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	b29b      	uxth	r3, r3
 8003208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	1c9a      	adds	r2, r3, #2
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28
 800321c:	e029      	b.n	8003272 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	b29b      	uxth	r3, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	629a      	str	r2, [r3, #40]	; 0x28
 8003238:	e01b      	b.n	8003272 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10a      	bne.n	8003258 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6858      	ldr	r0, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	1c59      	adds	r1, r3, #1
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6291      	str	r1, [r2, #40]	; 0x28
 8003252:	b2c2      	uxtb	r2, r0
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	e00c      	b.n	8003272 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	b2da      	uxtb	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	1c58      	adds	r0, r3, #1
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	6288      	str	r0, [r1, #40]	; 0x28
 800326a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29b      	uxth	r3, r3
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4619      	mov	r1, r3
 8003280:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003282:	2b00      	cmp	r3, #0
 8003284:	d120      	bne.n	80032c8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0220 	bic.w	r2, r2, #32
 8003294:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695a      	ldr	r2, [r3, #20]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff fe8a 	bl	8002fd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	e002      	b.n	80032ce <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e000      	b.n	80032ce <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80032cc:	2302      	movs	r3, #2
  }
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032d8:	b5b0      	push	{r4, r5, r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	4aa8      	ldr	r2, [pc, #672]	; (8003588 <UART_SetConfig+0x2b0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d904      	bls.n	80032f4 <UART_SetConfig+0x1c>
 80032ea:	f640 31e5 	movw	r1, #3045	; 0xbe5
 80032ee:	48a7      	ldr	r0, [pc, #668]	; (800358c <UART_SetConfig+0x2b4>)
 80032f0:	f000 fe45 	bl	8003f7e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <UART_SetConfig+0x38>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003304:	d004      	beq.n	8003310 <UART_SetConfig+0x38>
 8003306:	f640 31e6 	movw	r1, #3046	; 0xbe6
 800330a:	48a0      	ldr	r0, [pc, #640]	; (800358c <UART_SetConfig+0x2b4>)
 800330c:	f000 fe37 	bl	8003f7e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00e      	beq.n	8003336 <UART_SetConfig+0x5e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003320:	d009      	beq.n	8003336 <UART_SetConfig+0x5e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800332a:	d004      	beq.n	8003336 <UART_SetConfig+0x5e>
 800332c:	f640 31e7 	movw	r1, #3047	; 0xbe7
 8003330:	4896      	ldr	r0, [pc, #600]	; (800358c <UART_SetConfig+0x2b4>)
 8003332:	f000 fe24 	bl	8003f7e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d103      	bne.n	800334c <UART_SetConfig+0x74>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d104      	bne.n	8003356 <UART_SetConfig+0x7e>
 800334c:	f640 31e8 	movw	r1, #3048	; 0xbe8
 8003350:	488e      	ldr	r0, [pc, #568]	; (800358c <UART_SetConfig+0x2b4>)
 8003352:	f000 fe14 	bl	8003f7e <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800338e:	f023 030c 	bic.w	r3, r3, #12
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	68f9      	ldr	r1, [r7, #12]
 8003398:	430b      	orrs	r3, r1
 800339a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ba:	f040 80ef 	bne.w	800359c <UART_SetConfig+0x2c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a73      	ldr	r2, [pc, #460]	; (8003590 <UART_SetConfig+0x2b8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d004      	beq.n	80033d2 <UART_SetConfig+0xfa>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a71      	ldr	r2, [pc, #452]	; (8003594 <UART_SetConfig+0x2bc>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d16c      	bne.n	80034ac <UART_SetConfig+0x1d4>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80033d2:	f7ff fb8b 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 80033d6:	4602      	mov	r2, r0
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	009a      	lsls	r2, r3, #2
 80033e0:	441a      	add	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ec:	4a6a      	ldr	r2, [pc, #424]	; (8003598 <UART_SetConfig+0x2c0>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	011c      	lsls	r4, r3, #4
 80033f6:	f7ff fb79 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 80033fa:	4602      	mov	r2, r0
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	009a      	lsls	r2, r3, #2
 8003404:	441a      	add	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003410:	f7ff fb6c 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 8003414:	4602      	mov	r2, r0
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	009a      	lsls	r2, r3, #2
 800341e:	441a      	add	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	4a5b      	ldr	r2, [pc, #364]	; (8003598 <UART_SetConfig+0x2c0>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	2264      	movs	r2, #100	; 0x64
 8003434:	fb02 f303 	mul.w	r3, r2, r3
 8003438:	1aeb      	subs	r3, r5, r3
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	3332      	adds	r3, #50	; 0x32
 800343e:	4a56      	ldr	r2, [pc, #344]	; (8003598 <UART_SetConfig+0x2c0>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800344c:	441c      	add	r4, r3
 800344e:	f7ff fb4d 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 8003452:	4602      	mov	r2, r0
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	009a      	lsls	r2, r3, #2
 800345c:	441a      	add	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	fbb2 f5f3 	udiv	r5, r2, r3
 8003468:	f7ff fb40 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 800346c:	4602      	mov	r2, r0
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	009a      	lsls	r2, r3, #2
 8003476:	441a      	add	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003482:	4a45      	ldr	r2, [pc, #276]	; (8003598 <UART_SetConfig+0x2c0>)
 8003484:	fba2 2303 	umull	r2, r3, r2, r3
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	2264      	movs	r2, #100	; 0x64
 800348c:	fb02 f303 	mul.w	r3, r2, r3
 8003490:	1aeb      	subs	r3, r5, r3
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	3332      	adds	r3, #50	; 0x32
 8003496:	4a40      	ldr	r2, [pc, #256]	; (8003598 <UART_SetConfig+0x2c0>)
 8003498:	fba2 2303 	umull	r2, r3, r2, r3
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	f003 0207 	and.w	r2, r3, #7
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4422      	add	r2, r4
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	e159      	b.n	8003760 <UART_SetConfig+0x488>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80034ac:	f7ff fb0a 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	009a      	lsls	r2, r3, #2
 80034ba:	441a      	add	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c6:	4a34      	ldr	r2, [pc, #208]	; (8003598 <UART_SetConfig+0x2c0>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	011c      	lsls	r4, r3, #4
 80034d0:	f7ff faf8 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 80034d4:	4602      	mov	r2, r0
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	009a      	lsls	r2, r3, #2
 80034de:	441a      	add	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	fbb2 f5f3 	udiv	r5, r2, r3
 80034ea:	f7ff faeb 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 80034ee:	4602      	mov	r2, r0
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	009a      	lsls	r2, r3, #2
 80034f8:	441a      	add	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fbb2 f3f3 	udiv	r3, r2, r3
 8003504:	4a24      	ldr	r2, [pc, #144]	; (8003598 <UART_SetConfig+0x2c0>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	2264      	movs	r2, #100	; 0x64
 800350e:	fb02 f303 	mul.w	r3, r2, r3
 8003512:	1aeb      	subs	r3, r5, r3
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	3332      	adds	r3, #50	; 0x32
 8003518:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <UART_SetConfig+0x2c0>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003526:	441c      	add	r4, r3
 8003528:	f7ff facc 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 800352c:	4602      	mov	r2, r0
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	009a      	lsls	r2, r3, #2
 8003536:	441a      	add	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003542:	f7ff fabf 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 8003546:	4602      	mov	r2, r0
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	009a      	lsls	r2, r3, #2
 8003550:	441a      	add	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	4a0e      	ldr	r2, [pc, #56]	; (8003598 <UART_SetConfig+0x2c0>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	2264      	movs	r2, #100	; 0x64
 8003566:	fb02 f303 	mul.w	r3, r2, r3
 800356a:	1aeb      	subs	r3, r5, r3
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	3332      	adds	r3, #50	; 0x32
 8003570:	4a09      	ldr	r2, [pc, #36]	; (8003598 <UART_SetConfig+0x2c0>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	f003 0207 	and.w	r2, r3, #7
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4422      	add	r2, r4
 8003582:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003584:	e0ec      	b.n	8003760 <UART_SetConfig+0x488>
 8003586:	bf00      	nop
 8003588:	00a037a0 	.word	0x00a037a0
 800358c:	08005e94 	.word	0x08005e94
 8003590:	40011000 	.word	0x40011000
 8003594:	40011400 	.word	0x40011400
 8003598:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a71      	ldr	r2, [pc, #452]	; (8003768 <UART_SetConfig+0x490>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d004      	beq.n	80035b0 <UART_SetConfig+0x2d8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a70      	ldr	r2, [pc, #448]	; (800376c <UART_SetConfig+0x494>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d16b      	bne.n	8003688 <UART_SetConfig+0x3b0>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80035b0:	f7ff fa9c 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 80035b4:	4602      	mov	r2, r0
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	009a      	lsls	r2, r3, #2
 80035be:	441a      	add	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ca:	4a69      	ldr	r2, [pc, #420]	; (8003770 <UART_SetConfig+0x498>)
 80035cc:	fba2 2303 	umull	r2, r3, r2, r3
 80035d0:	095b      	lsrs	r3, r3, #5
 80035d2:	011c      	lsls	r4, r3, #4
 80035d4:	f7ff fa8a 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	009a      	lsls	r2, r3, #2
 80035e2:	441a      	add	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	fbb2 f5f3 	udiv	r5, r2, r3
 80035ee:	f7ff fa7d 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 80035f2:	4602      	mov	r2, r0
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	009a      	lsls	r2, r3, #2
 80035fc:	441a      	add	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	4a59      	ldr	r2, [pc, #356]	; (8003770 <UART_SetConfig+0x498>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	2264      	movs	r2, #100	; 0x64
 8003612:	fb02 f303 	mul.w	r3, r2, r3
 8003616:	1aeb      	subs	r3, r5, r3
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	3332      	adds	r3, #50	; 0x32
 800361c:	4a54      	ldr	r2, [pc, #336]	; (8003770 <UART_SetConfig+0x498>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003628:	441c      	add	r4, r3
 800362a:	f7ff fa5f 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 800362e:	4602      	mov	r2, r0
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009a      	lsls	r2, r3, #2
 8003638:	441a      	add	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	fbb2 f5f3 	udiv	r5, r2, r3
 8003644:	f7ff fa52 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 8003648:	4602      	mov	r2, r0
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	009a      	lsls	r2, r3, #2
 8003652:	441a      	add	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	fbb2 f3f3 	udiv	r3, r2, r3
 800365e:	4a44      	ldr	r2, [pc, #272]	; (8003770 <UART_SetConfig+0x498>)
 8003660:	fba2 2303 	umull	r2, r3, r2, r3
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	2264      	movs	r2, #100	; 0x64
 8003668:	fb02 f303 	mul.w	r3, r2, r3
 800366c:	1aeb      	subs	r3, r5, r3
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	3332      	adds	r3, #50	; 0x32
 8003672:	4a3f      	ldr	r2, [pc, #252]	; (8003770 <UART_SetConfig+0x498>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	f003 020f 	and.w	r2, r3, #15
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4422      	add	r2, r4
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	e06b      	b.n	8003760 <UART_SetConfig+0x488>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003688:	f7ff fa1c 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 800368c:	4602      	mov	r2, r0
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	009a      	lsls	r2, r3, #2
 8003696:	441a      	add	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a2:	4a33      	ldr	r2, [pc, #204]	; (8003770 <UART_SetConfig+0x498>)
 80036a4:	fba2 2303 	umull	r2, r3, r2, r3
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	011c      	lsls	r4, r3, #4
 80036ac:	f7ff fa0a 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	009a      	lsls	r2, r3, #2
 80036ba:	441a      	add	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	fbb2 f5f3 	udiv	r5, r2, r3
 80036c6:	f7ff f9fd 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 80036ca:	4602      	mov	r2, r0
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	009a      	lsls	r2, r3, #2
 80036d4:	441a      	add	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	4a23      	ldr	r2, [pc, #140]	; (8003770 <UART_SetConfig+0x498>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	2264      	movs	r2, #100	; 0x64
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
 80036ee:	1aeb      	subs	r3, r5, r3
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	3332      	adds	r3, #50	; 0x32
 80036f4:	4a1e      	ldr	r2, [pc, #120]	; (8003770 <UART_SetConfig+0x498>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003700:	441c      	add	r4, r3
 8003702:	f7ff f9df 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 8003706:	4602      	mov	r2, r0
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009a      	lsls	r2, r3, #2
 8003710:	441a      	add	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	fbb2 f5f3 	udiv	r5, r2, r3
 800371c:	f7ff f9d2 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 8003720:	4602      	mov	r2, r0
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	009a      	lsls	r2, r3, #2
 800372a:	441a      	add	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	fbb2 f3f3 	udiv	r3, r2, r3
 8003736:	4a0e      	ldr	r2, [pc, #56]	; (8003770 <UART_SetConfig+0x498>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	2264      	movs	r2, #100	; 0x64
 8003740:	fb02 f303 	mul.w	r3, r2, r3
 8003744:	1aeb      	subs	r3, r5, r3
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	3332      	adds	r3, #50	; 0x32
 800374a:	4a09      	ldr	r2, [pc, #36]	; (8003770 <UART_SetConfig+0x498>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	f003 020f 	and.w	r2, r3, #15
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4422      	add	r2, r4
 800375c:	609a      	str	r2, [r3, #8]
}
 800375e:	e7ff      	b.n	8003760 <UART_SetConfig+0x488>
 8003760:	bf00      	nop
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bdb0      	pop	{r4, r5, r7, pc}
 8003768:	40011000 	.word	0x40011000
 800376c:	40011400 	.word	0x40011400
 8003770:	51eb851f 	.word	0x51eb851f

08003774 <CRC8>:
	233, 183, 85, 11, 136, 214, 52, 106, 43, 117, 151, 201, 74, 20, 246, 168,
	116, 42, 200, 150, 21, 75, 169, 247, 182, 232, 10, 84, 215, 137, 107, 53
    };

uint8_t CRC8(uint8_t* data, uint8_t len)
    {
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	70fb      	strb	r3, [r7, #3]

    uint8_t crc = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	73fb      	strb	r3, [r7, #15]

    for(uint8_t i=0; i<len; i++)
 8003784:	2300      	movs	r3, #0
 8003786:	73bb      	strb	r3, [r7, #14]
 8003788:	e00d      	b.n	80037a6 <CRC8+0x32>
	{
	crc = CRC8_Table[crc^ data[i]];
 800378a:	7bbb      	ldrb	r3, [r7, #14]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	4413      	add	r3, r2
 8003790:	781a      	ldrb	r2, [r3, #0]
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	4053      	eors	r3, r2
 8003796:	b2db      	uxtb	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <CRC8+0x48>)
 800379c:	5c9b      	ldrb	r3, [r3, r2]
 800379e:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i=0; i<len; i++)
 80037a0:	7bbb      	ldrb	r3, [r7, #14]
 80037a2:	3301      	adds	r3, #1
 80037a4:	73bb      	strb	r3, [r7, #14]
 80037a6:	7bba      	ldrb	r2, [r7, #14]
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d3ed      	bcc.n	800378a <CRC8+0x16>
	}

    return crc;
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
    }
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	20000010 	.word	0x20000010

080037c0 <BL_UART_Send_Char>:



void BL_UART_Send_Char(char data)
    {
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
    BL_UART->Instance->DR = data;
 80037ca:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <BL_UART_Send_Char+0x34>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	79fa      	ldrb	r2, [r7, #7]
 80037d2:	605a      	str	r2, [r3, #4]
    while (__HAL_UART_GET_FLAG(BL_UART,UART_FLAG_TC) == 0);
 80037d4:	bf00      	nop
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <BL_UART_Send_Char+0x34>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e2:	2b40      	cmp	r3, #64	; 0x40
 80037e4:	d1f7      	bne.n	80037d6 <BL_UART_Send_Char+0x16>
    }
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000008 	.word	0x20000008

080037f8 <Write_Callback>:
	}

    }

void Write_Callback(uint32_t address, const uint8_t *data, uint32_t len)
    {
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b089      	sub	sp, #36	; 0x24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]

    uint8_t status = 1;
 8003804:	2301      	movs	r3, #1
 8003806:	77fb      	strb	r3, [r7, #31]

    uint32_t Aligned_Word[1];

    uint8_t *byte_ptr = (uint8_t*) Aligned_Word;
 8003808:	f107 0310 	add.w	r3, r7, #16
 800380c:	617b      	str	r3, [r7, #20]

    if (address >= USER_FLASH_START_ADDRESS
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a32      	ldr	r2, [pc, #200]	; (80038dc <Write_Callback+0xe4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d951      	bls.n	80038ba <Write_Callback+0xc2>
	    && address <= USER_FLASH_END_ADDRESS - len)
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	4b31      	ldr	r3, [pc, #196]	; (80038e0 <Write_Callback+0xe8>)
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	429a      	cmp	r2, r3
 8003820:	d84b      	bhi.n	80038ba <Write_Callback+0xc2>
	{

	if (len % 4 != 0)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <Write_Callback+0x40>
	    {
	    len += (len % 4);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	607b      	str	r3, [r7, #4]
	    }

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8003838:	f7fd fdbe 	bl	80013b8 <HAL_FLASH_Unlock>

	for (uint32_t i = 0; i < len/4 ; i++)
 800383c:	2300      	movs	r3, #0
 800383e:	61bb      	str	r3, [r7, #24]
 8003840:	e033      	b.n	80038aa <Write_Callback+0xb2>
	    {

	    // forced aligned start
	    byte_ptr[0] = data[0];
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	781a      	ldrb	r2, [r3, #0]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	701a      	strb	r2, [r3, #0]
	    byte_ptr[1] = data[1];
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	3301      	adds	r3, #1
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	7852      	ldrb	r2, [r2, #1]
 8003852:	701a      	strb	r2, [r3, #0]
	    byte_ptr[2] = data[2];
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	3302      	adds	r3, #2
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	7892      	ldrb	r2, [r2, #2]
 800385c:	701a      	strb	r2, [r3, #0]
	    byte_ptr[3] = data[3];
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	3303      	adds	r3, #3
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	78d2      	ldrb	r2, [r2, #3]
 8003866:	701a      	strb	r2, [r3, #0]
	    // forced aligned end

	    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address,
		    Aligned_Word[0]) == HAL_OK)
 8003868:	693b      	ldr	r3, [r7, #16]
	    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address,
 800386a:	f04f 0400 	mov.w	r4, #0
 800386e:	461a      	mov	r2, r3
 8003870:	4623      	mov	r3, r4
 8003872:	68f9      	ldr	r1, [r7, #12]
 8003874:	2002      	movs	r0, #2
 8003876:	f7fd fd39 	bl	80012ec <HAL_FLASH_Program>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10e      	bne.n	800389e <Write_Callback+0xa6>
		{
		/* Check the written value */
		if (*(uint32_t*) address != Aligned_Word[0])
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	429a      	cmp	r2, r3
 8003888:	d002      	beq.n	8003890 <Write_Callback+0x98>
		    {
		    /* Flash content doesn't match SRAM content */
		    status = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	77fb      	strb	r3, [r7, #31]
		    break;
 800388e:	e011      	b.n	80038b4 <Write_Callback+0xbc>
		    }
		/* Increment FLASH destination address */
		address += 4;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	3304      	adds	r3, #4
 8003894:	60fb      	str	r3, [r7, #12]
		data += 4;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	3304      	adds	r3, #4
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	e002      	b.n	80038a4 <Write_Callback+0xac>
		}
	    else
		{
		/* Error occurred while writing data in Flash memory */
		status = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	77fb      	strb	r3, [r7, #31]
		break;
 80038a2:	e007      	b.n	80038b4 <Write_Callback+0xbc>
	for (uint32_t i = 0; i < len/4 ; i++)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	3301      	adds	r3, #1
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	089b      	lsrs	r3, r3, #2
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d3c6      	bcc.n	8003842 <Write_Callback+0x4a>
		}
	    }

	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 80038b4:	f7fd fda2 	bl	80013fc <HAL_FLASH_Lock>
 80038b8:	e001      	b.n	80038be <Write_Callback+0xc6>
	}
    else
	{
	status = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	77fb      	strb	r3, [r7, #31]
	}

    if (status)
 80038be:	7ffb      	ldrb	r3, [r7, #31]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <Write_Callback+0xd4>
	{
	BL_UART_Send_Char(CMD_ACK);
 80038c4:	2090      	movs	r0, #144	; 0x90
 80038c6:	f7ff ff7b 	bl	80037c0 <BL_UART_Send_Char>
    else
	{
	BL_UART_Send_Char(CMD_NACK);
	}

    }
 80038ca:	e002      	b.n	80038d2 <Write_Callback+0xda>
	BL_UART_Send_Char(CMD_NACK);
 80038cc:	2091      	movs	r0, #145	; 0x91
 80038ce:	f7ff ff77 	bl	80037c0 <BL_UART_Send_Char>
    }
 80038d2:	bf00      	nop
 80038d4:	3724      	adds	r7, #36	; 0x24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd90      	pop	{r4, r7, pc}
 80038da:	bf00      	nop
 80038dc:	08007fff 	.word	0x08007fff
 80038e0:	0807d300 	.word	0x0807d300

080038e4 <Read_Callback>:

void Read_Callback(uint32_t address, uint32_t len)
    {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]

    uint8_t crc;
    uint8_t* add_ptr = (uint8_t*)address;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	617b      	str	r3, [r7, #20]

    if (address >= USER_FLASH_START_ADDRESS
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a1c      	ldr	r2, [pc, #112]	; (8003968 <Read_Callback+0x84>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d92f      	bls.n	800395a <Read_Callback+0x76>
	    && address <= USER_FLASH_END_ADDRESS - len)
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <Read_Callback+0x88>)
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	429a      	cmp	r2, r3
 8003904:	d829      	bhi.n	800395a <Read_Callback+0x76>
	{

	BL_UART_Send_Char(CMD_ACK);
 8003906:	2090      	movs	r0, #144	; 0x90
 8003908:	f7ff ff5a 	bl	80037c0 <BL_UART_Send_Char>


	for (uint32_t i = 0; i < len; i++)
 800390c:	2300      	movs	r3, #0
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	e012      	b.n	8003938 <Read_Callback+0x54>
	    {
	    TX_Buffer[i] = *add_ptr++;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	617a      	str	r2, [r7, #20]
 8003918:	7819      	ldrb	r1, [r3, #0]
 800391a:	4a15      	ldr	r2, [pc, #84]	; (8003970 <Read_Callback+0x8c>)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	460a      	mov	r2, r1
 8003922:	701a      	strb	r2, [r3, #0]
	    BL_UART_Send_Char(TX_Buffer[i]);
 8003924:	4a12      	ldr	r2, [pc, #72]	; (8003970 <Read_Callback+0x8c>)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4413      	add	r3, r2
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ff47 	bl	80037c0 <BL_UART_Send_Char>
	for (uint32_t i = 0; i < len; i++)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	3301      	adds	r3, #1
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d3e8      	bcc.n	8003912 <Read_Callback+0x2e>
	    }

	crc = CRC8(TX_Buffer, len);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	4619      	mov	r1, r3
 8003946:	480a      	ldr	r0, [pc, #40]	; (8003970 <Read_Callback+0x8c>)
 8003948:	f7ff ff14 	bl	8003774 <CRC8>
 800394c:	4603      	mov	r3, r0
 800394e:	73fb      	strb	r3, [r7, #15]

	BL_UART_Send_Char(crc);
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff ff34 	bl	80037c0 <BL_UART_Send_Char>
 8003958:	e002      	b.n	8003960 <Read_Callback+0x7c>

	}
    else
	{
	BL_UART_Send_Char(CMD_NACK);
 800395a:	2091      	movs	r0, #145	; 0x91
 800395c:	f7ff ff30 	bl	80037c0 <BL_UART_Send_Char>
	}

    }
 8003960:	bf00      	nop
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	08007fff 	.word	0x08007fff
 800396c:	0807d300 	.word	0x0807d300
 8003970:	20000430 	.word	0x20000430

08003974 <Erase_Callback>:

void Erase_Callback()
    {
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0

    if (BL_Erase_Flash())
 8003978:	f000 f84e 	bl	8003a18 <BL_Erase_Flash>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <Erase_Callback+0x16>
	{
	BL_UART_Send_Char(CMD_ACK);
 8003982:	2090      	movs	r0, #144	; 0x90
 8003984:	f7ff ff1c 	bl	80037c0 <BL_UART_Send_Char>
	}
    else
	{
	BL_UART_Send_Char(CMD_NACK);
	}
    }
 8003988:	e002      	b.n	8003990 <Erase_Callback+0x1c>
	BL_UART_Send_Char(CMD_NACK);
 800398a:	2091      	movs	r0, #145	; 0x91
 800398c:	f7ff ff18 	bl	80037c0 <BL_UART_Send_Char>
    }
 8003990:	bf00      	nop
 8003992:	bd80      	pop	{r7, pc}

08003994 <Reset_Callback>:

void Reset_Callback()
    {
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
    // reset mcu
    BL_UART_Send_Char(CMD_ACK);
 8003998:	2090      	movs	r0, #144	; 0x90
 800399a:	f7ff ff11 	bl	80037c0 <BL_UART_Send_Char>
    HAL_NVIC_SystemReset();
 800399e:	f7fd fc47 	bl	8001230 <HAL_NVIC_SystemReset>
    }
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <Jump_Callback>:
typedef  void (*pFunction)(void);

pFunction Jump_To_App;

void Jump_Callback()
    {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0

    uint32_t app_adress = 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	607b      	str	r3, [r7, #4]

    BL_UART_Send_Char(CMD_ACK);
 80039b2:	2090      	movs	r0, #144	; 0x90
 80039b4:	f7ff ff04 	bl	80037c0 <BL_UART_Send_Char>

    HAL_DeInit();
 80039b8:	f7fd fa4c 	bl	8000e54 <HAL_DeInit>

    /* execute the new program */
    app_adress = *(__IO uint32_t*) (USER_FLASH_START_ADDRESS + 4);
 80039bc:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <Jump_Callback+0x3c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	607b      	str	r3, [r7, #4]

    /* Jump to user application */
    Jump_To_App = (pFunction) app_adress;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a08      	ldr	r2, [pc, #32]	; (80039e8 <Jump_Callback+0x40>)
 80039c6:	6013      	str	r3, [r2, #0]

    /* Initialize user application's Stack Pointer */
    __set_MSP(*(__IO uint32_t*) USER_FLASH_START_ADDRESS);
 80039c8:	4b08      	ldr	r3, [pc, #32]	; (80039ec <Jump_Callback+0x44>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	f383 8808 	msr	MSP, r3

    Jump_To_App();
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <Jump_Callback+0x40>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4798      	blx	r3

    }
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	08008004 	.word	0x08008004
 80039e8:	20000530 	.word	0x20000530
 80039ec:	08008000 	.word	0x08008000

080039f0 <Verify_Callback>:


void Verify_Callback(uint32_t address, const uint8_t* data, uint8_t len)
    {
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	4613      	mov	r3, r2
 80039fc:	71fb      	strb	r3, [r7, #7]
    // verify flash
    }
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <Help_Callback>:


void Help_Callback()
    {
 8003a0a:	b480      	push	{r7}
 8003a0c:	af00      	add	r7, sp, #0

    }
 8003a0e:	bf00      	nop
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <BL_Erase_Flash>:

uint8_t BL_Erase_Flash()
    {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af00      	add	r7, sp, #0

    uint8_t status = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	77fb      	strb	r3, [r7, #31]
    uint32_t error = 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61bb      	str	r3, [r7, #24]

    FLASH_EraseInitTypeDef flash_erase_handle;

    flash_erase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8003a26:	2300      	movs	r3, #0
 8003a28:	607b      	str	r3, [r7, #4]
    flash_erase_handle.Banks = FLASH_BANK_1;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	60bb      	str	r3, [r7, #8]
    flash_erase_handle.Sector = BL_USED_SECTORS;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	60fb      	str	r3, [r7, #12]
    flash_erase_handle.NbSectors = 6;
 8003a32:	2306      	movs	r3, #6
 8003a34:	613b      	str	r3, [r7, #16]
    flash_erase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8003a36:	2302      	movs	r3, #2
 8003a38:	617b      	str	r3, [r7, #20]

    HAL_FLASH_Unlock();
 8003a3a:	f7fd fcbd 	bl	80013b8 <HAL_FLASH_Unlock>

    if (HAL_FLASHEx_Erase(&flash_erase_handle, &error) == HAL_OK)
 8003a3e:	f107 0218 	add.w	r2, r7, #24
 8003a42:	1d3b      	adds	r3, r7, #4
 8003a44:	4611      	mov	r1, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fd fe90 	bl	800176c <HAL_FLASHEx_Erase>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <BL_Erase_Flash+0x3e>
	{
	status = 1;
 8003a52:	2301      	movs	r3, #1
 8003a54:	77fb      	strb	r3, [r7, #31]
	}

    HAL_FLASH_Lock();
 8003a56:	f7fd fcd1 	bl	80013fc <HAL_FLASH_Lock>

    return status;
 8003a5a:	7ffb      	ldrb	r3, [r7, #31]
    }
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <Bootloader>:


void Bootloader()
    {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0

    uint32_t address = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
    uint32_t len = 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]

    while (1)
	{

	memset(RX_Buffer, 0x00, RX_BUFFER_SIZE);
 8003a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a76:	2100      	movs	r1, #0
 8003a78:	486a      	ldr	r0, [pc, #424]	; (8003c24 <Bootloader+0x1c0>)
 8003a7a:	f000 fc1d 	bl	80042b8 <memset>

	/* wait for sync char*/
	if (HAL_UART_Receive(BL_UART, RX_Buffer, 1, HAL_MAX_DELAY)
 8003a7e:	4b6a      	ldr	r3, [pc, #424]	; (8003c28 <Bootloader+0x1c4>)
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a86:	2201      	movs	r2, #1
 8003a88:	4966      	ldr	r1, [pc, #408]	; (8003c24 <Bootloader+0x1c0>)
 8003a8a:	f7ff f8f9 	bl	8002c80 <HAL_UART_Receive>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f040 80c3 	bne.w	8003c1c <Bootloader+0x1b8>
		== HAL_OK)
	    {

	    uint8_t sync_char = RX_Buffer[0];
 8003a96:	4b63      	ldr	r3, [pc, #396]	; (8003c24 <Bootloader+0x1c0>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	71fb      	strb	r3, [r7, #7]

	    if (sync_char == SYNC_CHAR)
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	2b24      	cmp	r3, #36	; 0x24
 8003aa0:	f040 80bc 	bne.w	8003c1c <Bootloader+0x1b8>
		{

		/* wait for packet len char*/
		if (HAL_UART_Receive(BL_UART, RX_Buffer, 1, 100) == HAL_OK)
 8003aa4:	4b60      	ldr	r3, [pc, #384]	; (8003c28 <Bootloader+0x1c4>)
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	2364      	movs	r3, #100	; 0x64
 8003aaa:	2201      	movs	r2, #1
 8003aac:	495d      	ldr	r1, [pc, #372]	; (8003c24 <Bootloader+0x1c0>)
 8003aae:	f7ff f8e7 	bl	8002c80 <HAL_UART_Receive>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f040 80b1 	bne.w	8003c1c <Bootloader+0x1b8>
		    {

		    uint8_t packet_len = RX_Buffer[0];
 8003aba:	4b5a      	ldr	r3, [pc, #360]	; (8003c24 <Bootloader+0x1c0>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	71bb      	strb	r3, [r7, #6]

		    if (HAL_UART_Receive(BL_UART, RX_Buffer, packet_len,
 8003ac0:	4b59      	ldr	r3, [pc, #356]	; (8003c28 <Bootloader+0x1c4>)
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	79bb      	ldrb	r3, [r7, #6]
 8003ac6:	b29a      	uxth	r2, r3
			    (packet_len + 100)) == HAL_OK)
 8003ac8:	79bb      	ldrb	r3, [r7, #6]
 8003aca:	3364      	adds	r3, #100	; 0x64
		    if (HAL_UART_Receive(BL_UART, RX_Buffer, packet_len,
 8003acc:	4955      	ldr	r1, [pc, #340]	; (8003c24 <Bootloader+0x1c0>)
 8003ace:	f7ff f8d7 	bl	8002c80 <HAL_UART_Receive>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f040 80a1 	bne.w	8003c1c <Bootloader+0x1b8>
			{

			uint8_t cmd = RX_Buffer[0];
 8003ada:	4b52      	ldr	r3, [pc, #328]	; (8003c24 <Bootloader+0x1c0>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	717b      	strb	r3, [r7, #5]

			/* last byte is crc*/
			uint8_t crc_recvd = RX_Buffer[packet_len - 1];
 8003ae0:	79bb      	ldrb	r3, [r7, #6]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	4a4f      	ldr	r2, [pc, #316]	; (8003c24 <Bootloader+0x1c0>)
 8003ae6:	5cd3      	ldrb	r3, [r2, r3]
 8003ae8:	713b      	strb	r3, [r7, #4]

			/* calculate crc */
			uint8_t crc_calc = CRC8(RX_Buffer, (packet_len - 1));
 8003aea:	79bb      	ldrb	r3, [r7, #6]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	4619      	mov	r1, r3
 8003af2:	484c      	ldr	r0, [pc, #304]	; (8003c24 <Bootloader+0x1c0>)
 8003af4:	f7ff fe3e 	bl	8003774 <CRC8>
 8003af8:	4603      	mov	r3, r0
 8003afa:	70fb      	strb	r3, [r7, #3]

			if (crc_calc == crc_recvd)
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	793b      	ldrb	r3, [r7, #4]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	f040 808b 	bne.w	8003c1c <Bootloader+0x1b8>
			    {

			    switch (cmd)
 8003b06:	797b      	ldrb	r3, [r7, #5]
 8003b08:	3b40      	subs	r3, #64	; 0x40
 8003b0a:	2b15      	cmp	r3, #21
 8003b0c:	f200 8088 	bhi.w	8003c20 <Bootloader+0x1bc>
 8003b10:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <Bootloader+0xb4>)
 8003b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b16:	bf00      	nop
 8003b18:	08003c17 	.word	0x08003c17
 8003b1c:	08003c21 	.word	0x08003c21
 8003b20:	08003c21 	.word	0x08003c21
 8003b24:	08003c21 	.word	0x08003c21
 8003b28:	08003c21 	.word	0x08003c21
 8003b2c:	08003c21 	.word	0x08003c21
 8003b30:	08003c21 	.word	0x08003c21
 8003b34:	08003c21 	.word	0x08003c21
 8003b38:	08003c21 	.word	0x08003c21
 8003b3c:	08003c21 	.word	0x08003c21
 8003b40:	08003c21 	.word	0x08003c21
 8003b44:	08003c21 	.word	0x08003c21
 8003b48:	08003c21 	.word	0x08003c21
 8003b4c:	08003c21 	.word	0x08003c21
 8003b50:	08003c21 	.word	0x08003c21
 8003b54:	08003c21 	.word	0x08003c21
 8003b58:	08003b71 	.word	0x08003b71
 8003b5c:	08003ba3 	.word	0x08003ba3
 8003b60:	08003bd1 	.word	0x08003bd1
 8003b64:	08003bd7 	.word	0x08003bd7
 8003b68:	08003bdd 	.word	0x08003bdd
 8003b6c:	08003be3 	.word	0x08003be3
				{

			    case CMD_WRITE:

				address = RX_Buffer[1] << 24|
 8003b70:	4b2c      	ldr	r3, [pc, #176]	; (8003c24 <Bootloader+0x1c0>)
 8003b72:	785b      	ldrb	r3, [r3, #1]
 8003b74:	061a      	lsls	r2, r3, #24
				                RX_Buffer[2] << 16|
 8003b76:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <Bootloader+0x1c0>)
 8003b78:	789b      	ldrb	r3, [r3, #2]
 8003b7a:	041b      	lsls	r3, r3, #16
				address = RX_Buffer[1] << 24|
 8003b7c:	431a      	orrs	r2, r3
				                RX_Buffer[3] << 8 |
 8003b7e:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <Bootloader+0x1c0>)
 8003b80:	78db      	ldrb	r3, [r3, #3]
 8003b82:	021b      	lsls	r3, r3, #8
				                RX_Buffer[2] << 16|
 8003b84:	4313      	orrs	r3, r2
				                RX_Buffer[4] << 0;
 8003b86:	4a27      	ldr	r2, [pc, #156]	; (8003c24 <Bootloader+0x1c0>)
 8003b88:	7912      	ldrb	r2, [r2, #4]
				                RX_Buffer[3] << 8 |
 8003b8a:	4313      	orrs	r3, r2
				address = RX_Buffer[1] << 24|
 8003b8c:	60fb      	str	r3, [r7, #12]

				len = RX_Buffer[5]; // number of bytes to write
 8003b8e:	4b25      	ldr	r3, [pc, #148]	; (8003c24 <Bootloader+0x1c0>)
 8003b90:	795b      	ldrb	r3, [r3, #5]
 8003b92:	60bb      	str	r3, [r7, #8]

				Write_Callback(address, (RX_Buffer + 6), len);
 8003b94:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <Bootloader+0x1c8>)
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f7ff fe2c 	bl	80037f8 <Write_Callback>
				break;
 8003ba0:	e03f      	b.n	8003c22 <Bootloader+0x1be>

			    case CMD_READ:

				address = RX_Buffer[1] << 24 |
 8003ba2:	4b20      	ldr	r3, [pc, #128]	; (8003c24 <Bootloader+0x1c0>)
 8003ba4:	785b      	ldrb	r3, [r3, #1]
 8003ba6:	061a      	lsls	r2, r3, #24
				               RX_Buffer[2] << 16 |
 8003ba8:	4b1e      	ldr	r3, [pc, #120]	; (8003c24 <Bootloader+0x1c0>)
 8003baa:	789b      	ldrb	r3, [r3, #2]
 8003bac:	041b      	lsls	r3, r3, #16
				address = RX_Buffer[1] << 24 |
 8003bae:	431a      	orrs	r2, r3
					       RX_Buffer[3] << 8  |
 8003bb0:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <Bootloader+0x1c0>)
 8003bb2:	78db      	ldrb	r3, [r3, #3]
 8003bb4:	021b      	lsls	r3, r3, #8
				               RX_Buffer[2] << 16 |
 8003bb6:	4313      	orrs	r3, r2
					       RX_Buffer[4] << 0;
 8003bb8:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <Bootloader+0x1c0>)
 8003bba:	7912      	ldrb	r2, [r2, #4]
					       RX_Buffer[3] << 8  |
 8003bbc:	4313      	orrs	r3, r2
				address = RX_Buffer[1] << 24 |
 8003bbe:	60fb      	str	r3, [r7, #12]

				len = RX_Buffer[5];
 8003bc0:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <Bootloader+0x1c0>)
 8003bc2:	795b      	ldrb	r3, [r3, #5]
 8003bc4:	60bb      	str	r3, [r7, #8]

				Read_Callback(address, len);
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f7ff fe8b 	bl	80038e4 <Read_Callback>
				break;
 8003bce:	e028      	b.n	8003c22 <Bootloader+0x1be>

			    case CMD_ERASE:
				Erase_Callback();
 8003bd0:	f7ff fed0 	bl	8003974 <Erase_Callback>
				break;
 8003bd4:	e025      	b.n	8003c22 <Bootloader+0x1be>

			    case CMD_RESET:
				Reset_Callback();
 8003bd6:	f7ff fedd 	bl	8003994 <Reset_Callback>
				break;
 8003bda:	e022      	b.n	8003c22 <Bootloader+0x1be>

			    case CMD_JUMP:
				Jump_Callback();
 8003bdc:	f7ff fee4 	bl	80039a8 <Jump_Callback>
				break;
 8003be0:	e01f      	b.n	8003c22 <Bootloader+0x1be>

			    case CMD_VERIFY:

				address = RX_Buffer[1] << 24 |
 8003be2:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <Bootloader+0x1c0>)
 8003be4:	785b      	ldrb	r3, [r3, #1]
 8003be6:	061a      	lsls	r2, r3, #24
				                 RX_Buffer[2] << 16 |
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <Bootloader+0x1c0>)
 8003bea:	789b      	ldrb	r3, [r3, #2]
 8003bec:	041b      	lsls	r3, r3, #16
				address = RX_Buffer[1] << 24 |
 8003bee:	431a      	orrs	r2, r3
						 RX_Buffer[3] << 8  |
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <Bootloader+0x1c0>)
 8003bf2:	78db      	ldrb	r3, [r3, #3]
 8003bf4:	021b      	lsls	r3, r3, #8
				                 RX_Buffer[2] << 16 |
 8003bf6:	4313      	orrs	r3, r2
						 RX_Buffer[4] << 0;
 8003bf8:	4a0a      	ldr	r2, [pc, #40]	; (8003c24 <Bootloader+0x1c0>)
 8003bfa:	7912      	ldrb	r2, [r2, #4]
						 RX_Buffer[3] << 8  |
 8003bfc:	4313      	orrs	r3, r2
				address = RX_Buffer[1] << 24 |
 8003bfe:	60fb      	str	r3, [r7, #12]

				len = RX_Buffer[5];
 8003c00:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <Bootloader+0x1c0>)
 8003c02:	795b      	ldrb	r3, [r3, #5]
 8003c04:	60bb      	str	r3, [r7, #8]

				Verify_Callback(address, (RX_Buffer + 6), len);
 8003c06:	4909      	ldr	r1, [pc, #36]	; (8003c2c <Bootloader+0x1c8>)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f7ff feee 	bl	80039f0 <Verify_Callback>
				break;
 8003c14:	e005      	b.n	8003c22 <Bootloader+0x1be>

			    case CMD_HELP:
				Help_Callback();
 8003c16:	f7ff fef8 	bl	8003a0a <Help_Callback>
				break;
 8003c1a:	e002      	b.n	8003c22 <Bootloader+0x1be>

			    default:
				//print CMD_ERROR
				break;
				}
			    }
 8003c1c:	bf00      	nop
 8003c1e:	e728      	b.n	8003a72 <Bootloader+0xe>
				break;
 8003c20:	bf00      	nop
	memset(RX_Buffer, 0x00, RX_BUFFER_SIZE);
 8003c22:	e726      	b.n	8003a72 <Bootloader+0xe>
 8003c24:	20000330 	.word	0x20000330
 8003c28:	20000008 	.word	0x20000008
 8003c2c:	20000336 	.word	0x20000336

08003c30 <BL_Main_Loop>:
	}
    }


void BL_Main_Loop()
    {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0

    HAL_Delay(1);
 8003c34:	2001      	movs	r0, #1
 8003c36:	f7fd f991 	bl	8000f5c <HAL_Delay>

    BL_UART_Send_Char(CMD_ACK);
 8003c3a:	2090      	movs	r0, #144	; 0x90
 8003c3c:	f7ff fdc0 	bl	80037c0 <BL_UART_Send_Char>

    /* wait for ack to enter bootloader char*/
    if (HAL_UART_Receive(BL_UART, RX_Buffer, 1, Bootloader_Timeout) == HAL_OK)
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <BL_Main_Loop+0x40>)
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <BL_Main_Loop+0x44>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	490b      	ldr	r1, [pc, #44]	; (8003c78 <BL_Main_Loop+0x48>)
 8003c4c:	f7ff f818 	bl	8002c80 <HAL_UART_Receive>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d108      	bne.n	8003c68 <BL_Main_Loop+0x38>
	{

	if(RX_Buffer[0] == CMD_ACK)
 8003c56:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <BL_Main_Loop+0x48>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b90      	cmp	r3, #144	; 0x90
 8003c5c:	d106      	bne.n	8003c6c <BL_Main_Loop+0x3c>
	    {
		Bootloader();
 8003c5e:	f7ff ff01 	bl	8003a64 <Bootloader>
		Reset_Callback();
 8003c62:	f7ff fe97 	bl	8003994 <Reset_Callback>
    else
	{
	// jump to user application
	Jump_Callback();
	}
    }
 8003c66:	e001      	b.n	8003c6c <BL_Main_Loop+0x3c>
	Jump_Callback();
 8003c68:	f7ff fe9e 	bl	80039a8 <Jump_Callback>
    }
 8003c6c:	bf00      	nop
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000008 	.word	0x20000008
 8003c74:	2000000c 	.word	0x2000000c
 8003c78:	20000330 	.word	0x20000330

08003c7c <BL_UART_RX_ISR>:

void BL_UART_RX_ISR()
    {
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0

    }
 8003c80:	bf00      	nop
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8003c90:	4b06      	ldr	r3, [pc, #24]	; (8003cac <MX_CRC_Init+0x20>)
 8003c92:	4a07      	ldr	r2, [pc, #28]	; (8003cb0 <MX_CRC_Init+0x24>)
 8003c94:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003c96:	4805      	ldr	r0, [pc, #20]	; (8003cac <MX_CRC_Init+0x20>)
 8003c98:	f7fd fada 	bl	8001250 <HAL_CRC_Init>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003ca2:	f000 f965 	bl	8003f70 <Error_Handler>
  }

}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000534 	.word	0x20000534
 8003cb0:	40023000 	.word	0x40023000

08003cb4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a0b      	ldr	r2, [pc, #44]	; (8003cf0 <HAL_CRC_MspInit+0x3c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d10d      	bne.n	8003ce2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <HAL_CRC_MspInit+0x40>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	4a09      	ldr	r2, [pc, #36]	; (8003cf4 <HAL_CRC_MspInit+0x40>)
 8003cd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd6:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <HAL_CRC_MspInit+0x40>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40023000 	.word	0x40023000
 8003cf4:	40023800 	.word	0x40023800

08003cf8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	; 0x28
 8003cfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfe:	f107 0314 	add.w	r3, r7, #20
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	609a      	str	r2, [r3, #8]
 8003d0a:	60da      	str	r2, [r3, #12]
 8003d0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	4b53      	ldr	r3, [pc, #332]	; (8003e60 <MX_GPIO_Init+0x168>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	4a52      	ldr	r2, [pc, #328]	; (8003e60 <MX_GPIO_Init+0x168>)
 8003d18:	f043 0304 	orr.w	r3, r3, #4
 8003d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1e:	4b50      	ldr	r3, [pc, #320]	; (8003e60 <MX_GPIO_Init+0x168>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	4b4c      	ldr	r3, [pc, #304]	; (8003e60 <MX_GPIO_Init+0x168>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	4a4b      	ldr	r2, [pc, #300]	; (8003e60 <MX_GPIO_Init+0x168>)
 8003d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d38:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3a:	4b49      	ldr	r3, [pc, #292]	; (8003e60 <MX_GPIO_Init+0x168>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	4b45      	ldr	r3, [pc, #276]	; (8003e60 <MX_GPIO_Init+0x168>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	4a44      	ldr	r2, [pc, #272]	; (8003e60 <MX_GPIO_Init+0x168>)
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	6313      	str	r3, [r2, #48]	; 0x30
 8003d56:	4b42      	ldr	r3, [pc, #264]	; (8003e60 <MX_GPIO_Init+0x168>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	4b3e      	ldr	r3, [pc, #248]	; (8003e60 <MX_GPIO_Init+0x168>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4a3d      	ldr	r2, [pc, #244]	; (8003e60 <MX_GPIO_Init+0x168>)
 8003d6c:	f043 0302 	orr.w	r3, r3, #2
 8003d70:	6313      	str	r3, [r2, #48]	; 0x30
 8003d72:	4b3b      	ldr	r3, [pc, #236]	; (8003e60 <MX_GPIO_Init+0x168>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	603b      	str	r3, [r7, #0]
 8003d82:	4b37      	ldr	r3, [pc, #220]	; (8003e60 <MX_GPIO_Init+0x168>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	4a36      	ldr	r2, [pc, #216]	; (8003e60 <MX_GPIO_Init+0x168>)
 8003d88:	f043 0308 	orr.w	r3, r3, #8
 8003d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8e:	4b34      	ldr	r3, [pc, #208]	; (8003e60 <MX_GPIO_Init+0x168>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2120      	movs	r1, #32
 8003d9e:	4831      	ldr	r0, [pc, #196]	; (8003e64 <MX_GPIO_Init+0x16c>)
 8003da0:	f7fe f8fe 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003daa:	4b2f      	ldr	r3, [pc, #188]	; (8003e68 <MX_GPIO_Init+0x170>)
 8003dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003db2:	f107 0314 	add.w	r3, r7, #20
 8003db6:	4619      	mov	r1, r3
 8003db8:	482c      	ldr	r0, [pc, #176]	; (8003e6c <MX_GPIO_Init+0x174>)
 8003dba:	f7fd fe5f 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1 
                           PC2 PC3 PC4 PC5 
                           PC6 PC7 PC8 PC9 
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
 8003dbe:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8003dc2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dcc:	f107 0314 	add.w	r3, r7, #20
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4826      	ldr	r0, [pc, #152]	; (8003e6c <MX_GPIO_Init+0x174>)
 8003dd4:	f7fd fe52 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003de4:	f107 0314 	add.w	r3, r7, #20
 8003de8:	4619      	mov	r1, r3
 8003dea:	4821      	ldr	r0, [pc, #132]	; (8003e70 <MX_GPIO_Init+0x178>)
 8003dec:	f7fd fe46 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6 
                           PA7 PA8 PA9 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 8003df0:	f649 73d3 	movw	r3, #40915	; 0x9fd3
 8003df4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003df6:	2303      	movs	r3, #3
 8003df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dfe:	f107 0314 	add.w	r3, r7, #20
 8003e02:	4619      	mov	r1, r3
 8003e04:	4817      	ldr	r0, [pc, #92]	; (8003e64 <MX_GPIO_Init+0x16c>)
 8003e06:	f7fd fe39 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003e0a:	2320      	movs	r3, #32
 8003e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e16:	2300      	movs	r3, #0
 8003e18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003e1a:	f107 0314 	add.w	r3, r7, #20
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4810      	ldr	r0, [pc, #64]	; (8003e64 <MX_GPIO_Init+0x16c>)
 8003e22:	f7fd fe2b 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB12 PB13 PB14 PB15 
                           PB3 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8003e26:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8003e2a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	4619      	mov	r1, r3
 8003e3a:	480e      	ldr	r0, [pc, #56]	; (8003e74 <MX_GPIO_Init+0x17c>)
 8003e3c:	f7fd fe1e 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e40:	2304      	movs	r3, #4
 8003e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e44:	2303      	movs	r3, #3
 8003e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e4c:	f107 0314 	add.w	r3, r7, #20
 8003e50:	4619      	mov	r1, r3
 8003e52:	4809      	ldr	r0, [pc, #36]	; (8003e78 <MX_GPIO_Init+0x180>)
 8003e54:	f7fd fe12 	bl	8001a7c <HAL_GPIO_Init>

}
 8003e58:	bf00      	nop
 8003e5a:	3728      	adds	r7, #40	; 0x28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40023800 	.word	0x40023800
 8003e64:	40020000 	.word	0x40020000
 8003e68:	10210000 	.word	0x10210000
 8003e6c:	40020800 	.word	0x40020800
 8003e70:	40021c00 	.word	0x40021c00
 8003e74:	40020400 	.word	0x40020400
 8003e78:	40020c00 	.word	0x40020c00

08003e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e80:	f7fc ffc6 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e84:	f000 f80a 	bl	8003e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e88:	f7ff ff36 	bl	8003cf8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003e8c:	f000 f946 	bl	800411c <MX_USART2_UART_Init>
  MX_CRC_Init();
 8003e90:	f7ff fefc 	bl	8003c8c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  BL_Main_Loop();
 8003e94:	f7ff fecc 	bl	8003c30 <BL_Main_Loop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003e98:	e7fe      	b.n	8003e98 <main+0x1c>
	...

08003e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b094      	sub	sp, #80	; 0x50
 8003ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ea2:	f107 0320 	add.w	r3, r7, #32
 8003ea6:	2230      	movs	r2, #48	; 0x30
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fa04 	bl	80042b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003eb0:	f107 030c 	add.w	r3, r7, #12
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	60da      	str	r2, [r3, #12]
 8003ebe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	4b28      	ldr	r3, [pc, #160]	; (8003f68 <SystemClock_Config+0xcc>)
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	4a27      	ldr	r2, [pc, #156]	; (8003f68 <SystemClock_Config+0xcc>)
 8003eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ece:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed0:	4b25      	ldr	r3, [pc, #148]	; (8003f68 <SystemClock_Config+0xcc>)
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003edc:	2300      	movs	r3, #0
 8003ede:	607b      	str	r3, [r7, #4]
 8003ee0:	4b22      	ldr	r3, [pc, #136]	; (8003f6c <SystemClock_Config+0xd0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ee8:	4a20      	ldr	r2, [pc, #128]	; (8003f6c <SystemClock_Config+0xd0>)
 8003eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <SystemClock_Config+0xd0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ef8:	607b      	str	r3, [r7, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003efc:	2302      	movs	r3, #2
 8003efe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f00:	2301      	movs	r3, #1
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f04:	2310      	movs	r3, #16
 8003f06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003f10:	2308      	movs	r3, #8
 8003f12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8003f14:	2354      	movs	r3, #84	; 0x54
 8003f16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003f1c:	2307      	movs	r3, #7
 8003f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f20:	f107 0320 	add.w	r3, r7, #32
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fe f86d 	bl	8002004 <HAL_RCC_OscConfig>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003f30:	f000 f81e 	bl	8003f70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f34:	230f      	movs	r3, #15
 8003f36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f4a:	f107 030c 	add.w	r3, r7, #12
 8003f4e:	2102      	movs	r1, #2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fe fb49 	bl	80025e8 <HAL_RCC_ClockConfig>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003f5c:	f000 f808 	bl	8003f70 <Error_Handler>
  }
}
 8003f60:	bf00      	nop
 8003f62:	3750      	adds	r7, #80	; 0x50
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	40007000 	.word	0x40007000

08003f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <HAL_MspInit+0x4c>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	4a0f      	ldr	r2, [pc, #60]	; (8003fe0 <HAL_MspInit+0x4c>)
 8003fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8003faa:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <HAL_MspInit+0x4c>)
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb2:	607b      	str	r3, [r7, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	603b      	str	r3, [r7, #0]
 8003fba:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <HAL_MspInit+0x4c>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	4a08      	ldr	r2, [pc, #32]	; (8003fe0 <HAL_MspInit+0x4c>)
 8003fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc6:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_MspInit+0x4c>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40023800 	.word	0x40023800

08003fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ff6:	e7fe      	b.n	8003ff6 <HardFault_Handler+0x4>

08003ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ffc:	e7fe      	b.n	8003ffc <MemManage_Handler+0x4>

08003ffe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ffe:	b480      	push	{r7}
 8004000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004002:	e7fe      	b.n	8004002 <BusFault_Handler+0x4>

08004004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004008:	e7fe      	b.n	8004008 <UsageFault_Handler+0x4>

0800400a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800400a:	b480      	push	{r7}
 800400c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800400e:	bf00      	nop
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004026:	b480      	push	{r7}
 8004028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800402a:	bf00      	nop
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004038:	f7fc ff70 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800403c:	bf00      	nop
 800403e:	bd80      	pop	{r7, pc}

08004040 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004044:	4803      	ldr	r0, [pc, #12]	; (8004054 <USART2_IRQHandler+0x14>)
 8004046:	f7fe fec1 	bl	8002dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  BL_UART_RX_ISR();
 800404a:	f7ff fe17 	bl	8003c7c <BL_UART_RX_ISR>
  /* USER CODE END USART2_IRQn 1 */
}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	2000053c 	.word	0x2000053c

08004058 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004060:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <_sbrk+0x50>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <_sbrk+0x16>
		heap_end = &end;
 8004068:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <_sbrk+0x50>)
 800406a:	4a10      	ldr	r2, [pc, #64]	; (80040ac <_sbrk+0x54>)
 800406c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800406e:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <_sbrk+0x50>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004074:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <_sbrk+0x50>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4413      	add	r3, r2
 800407c:	466a      	mov	r2, sp
 800407e:	4293      	cmp	r3, r2
 8004080:	d907      	bls.n	8004092 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004082:	f000 f8ef 	bl	8004264 <__errno>
 8004086:	4602      	mov	r2, r0
 8004088:	230c      	movs	r3, #12
 800408a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800408c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004090:	e006      	b.n	80040a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8004092:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <_sbrk+0x50>)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4413      	add	r3, r2
 800409a:	4a03      	ldr	r2, [pc, #12]	; (80040a8 <_sbrk+0x50>)
 800409c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800409e:	68fb      	ldr	r3, [r7, #12]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000300 	.word	0x20000300
 80040ac:	20000580 	.word	0x20000580

080040b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040b4:	4b16      	ldr	r3, [pc, #88]	; (8004110 <SystemInit+0x60>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ba:	4a15      	ldr	r2, [pc, #84]	; (8004110 <SystemInit+0x60>)
 80040bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80040c4:	4b13      	ldr	r3, [pc, #76]	; (8004114 <SystemInit+0x64>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a12      	ldr	r2, [pc, #72]	; (8004114 <SystemInit+0x64>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80040d0:	4b10      	ldr	r3, [pc, #64]	; (8004114 <SystemInit+0x64>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <SystemInit+0x64>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a0e      	ldr	r2, [pc, #56]	; (8004114 <SystemInit+0x64>)
 80040dc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80040e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <SystemInit+0x64>)
 80040e8:	4a0b      	ldr	r2, [pc, #44]	; (8004118 <SystemInit+0x68>)
 80040ea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80040ec:	4b09      	ldr	r3, [pc, #36]	; (8004114 <SystemInit+0x64>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a08      	ldr	r2, [pc, #32]	; (8004114 <SystemInit+0x64>)
 80040f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <SystemInit+0x64>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040fe:	4b04      	ldr	r3, [pc, #16]	; (8004110 <SystemInit+0x60>)
 8004100:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004104:	609a      	str	r2, [r3, #8]
#endif
}
 8004106:	bf00      	nop
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	e000ed00 	.word	0xe000ed00
 8004114:	40023800 	.word	0x40023800
 8004118:	24003010 	.word	0x24003010

0800411c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004120:	4b10      	ldr	r3, [pc, #64]	; (8004164 <MX_USART2_UART_Init+0x48>)
 8004122:	4a11      	ldr	r2, [pc, #68]	; (8004168 <MX_USART2_UART_Init+0x4c>)
 8004124:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 8004126:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <MX_USART2_UART_Init+0x48>)
 8004128:	4a10      	ldr	r2, [pc, #64]	; (800416c <MX_USART2_UART_Init+0x50>)
 800412a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800412c:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <MX_USART2_UART_Init+0x48>)
 800412e:	2200      	movs	r2, #0
 8004130:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004132:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <MX_USART2_UART_Init+0x48>)
 8004134:	2200      	movs	r2, #0
 8004136:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <MX_USART2_UART_Init+0x48>)
 800413a:	2200      	movs	r2, #0
 800413c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <MX_USART2_UART_Init+0x48>)
 8004140:	220c      	movs	r2, #12
 8004142:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004144:	4b07      	ldr	r3, [pc, #28]	; (8004164 <MX_USART2_UART_Init+0x48>)
 8004146:	2200      	movs	r2, #0
 8004148:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800414a:	4b06      	ldr	r3, [pc, #24]	; (8004164 <MX_USART2_UART_Init+0x48>)
 800414c:	2200      	movs	r2, #0
 800414e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004150:	4804      	ldr	r0, [pc, #16]	; (8004164 <MX_USART2_UART_Init+0x48>)
 8004152:	f7fe fcdf 	bl	8002b14 <HAL_UART_Init>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 800415c:	f7ff ff08 	bl	8003f70 <Error_Handler>
  }

}
 8004160:	bf00      	nop
 8004162:	bd80      	pop	{r7, pc}
 8004164:	2000053c 	.word	0x2000053c
 8004168:	40004400 	.word	0x40004400
 800416c:	0003d090 	.word	0x0003d090

08004170 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	; 0x28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004178:	f107 0314 	add.w	r3, r7, #20
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	60da      	str	r2, [r3, #12]
 8004186:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <HAL_UART_MspInit+0x94>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d133      	bne.n	80041fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <HAL_UART_MspInit+0x98>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	4a1b      	ldr	r2, [pc, #108]	; (8004208 <HAL_UART_MspInit+0x98>)
 800419c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a0:	6413      	str	r3, [r2, #64]	; 0x40
 80041a2:	4b19      	ldr	r3, [pc, #100]	; (8004208 <HAL_UART_MspInit+0x98>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	4b15      	ldr	r3, [pc, #84]	; (8004208 <HAL_UART_MspInit+0x98>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	4a14      	ldr	r2, [pc, #80]	; (8004208 <HAL_UART_MspInit+0x98>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	6313      	str	r3, [r2, #48]	; 0x30
 80041be:	4b12      	ldr	r3, [pc, #72]	; (8004208 <HAL_UART_MspInit+0x98>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80041ca:	230c      	movs	r3, #12
 80041cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ce:	2302      	movs	r3, #2
 80041d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d6:	2300      	movs	r3, #0
 80041d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80041da:	2307      	movs	r3, #7
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041de:	f107 0314 	add.w	r3, r7, #20
 80041e2:	4619      	mov	r1, r3
 80041e4:	4809      	ldr	r0, [pc, #36]	; (800420c <HAL_UART_MspInit+0x9c>)
 80041e6:	f7fd fc49 	bl	8001a7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80041ea:	2200      	movs	r2, #0
 80041ec:	2100      	movs	r1, #0
 80041ee:	2026      	movs	r0, #38	; 0x26
 80041f0:	f7fc ffda 	bl	80011a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80041f4:	2026      	movs	r0, #38	; 0x26
 80041f6:	f7fd f803 	bl	8001200 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80041fa:	bf00      	nop
 80041fc:	3728      	adds	r7, #40	; 0x28
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40004400 	.word	0x40004400
 8004208:	40023800 	.word	0x40023800
 800420c:	40020000 	.word	0x40020000

08004210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004248 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004214:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004216:	e003      	b.n	8004220 <LoopCopyDataInit>

08004218 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800421a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800421c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800421e:	3104      	adds	r1, #4

08004220 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004220:	480b      	ldr	r0, [pc, #44]	; (8004250 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004222:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004224:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004226:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004228:	d3f6      	bcc.n	8004218 <CopyDataInit>
  ldr  r2, =_sbss
 800422a:	4a0b      	ldr	r2, [pc, #44]	; (8004258 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800422c:	e002      	b.n	8004234 <LoopFillZerobss>

0800422e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800422e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004230:	f842 3b04 	str.w	r3, [r2], #4

08004234 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004234:	4b09      	ldr	r3, [pc, #36]	; (800425c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004236:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004238:	d3f9      	bcc.n	800422e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800423a:	f7ff ff39 	bl	80040b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800423e:	f000 f817 	bl	8004270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004242:	f7ff fe1b 	bl	8003e7c <main>
  bx  lr    
 8004246:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004248:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800424c:	08006120 	.word	0x08006120
  ldr  r0, =_sdata
 8004250:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004254:	200002e4 	.word	0x200002e4
  ldr  r2, =_sbss
 8004258:	200002e4 	.word	0x200002e4
  ldr  r3, = _ebss
 800425c:	20000580 	.word	0x20000580

08004260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004260:	e7fe      	b.n	8004260 <ADC_IRQHandler>
	...

08004264 <__errno>:
 8004264:	4b01      	ldr	r3, [pc, #4]	; (800426c <__errno+0x8>)
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000114 	.word	0x20000114

08004270 <__libc_init_array>:
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	4e0d      	ldr	r6, [pc, #52]	; (80042a8 <__libc_init_array+0x38>)
 8004274:	4c0d      	ldr	r4, [pc, #52]	; (80042ac <__libc_init_array+0x3c>)
 8004276:	1ba4      	subs	r4, r4, r6
 8004278:	10a4      	asrs	r4, r4, #2
 800427a:	2500      	movs	r5, #0
 800427c:	42a5      	cmp	r5, r4
 800427e:	d109      	bne.n	8004294 <__libc_init_array+0x24>
 8004280:	4e0b      	ldr	r6, [pc, #44]	; (80042b0 <__libc_init_array+0x40>)
 8004282:	4c0c      	ldr	r4, [pc, #48]	; (80042b4 <__libc_init_array+0x44>)
 8004284:	f001 fd46 	bl	8005d14 <_init>
 8004288:	1ba4      	subs	r4, r4, r6
 800428a:	10a4      	asrs	r4, r4, #2
 800428c:	2500      	movs	r5, #0
 800428e:	42a5      	cmp	r5, r4
 8004290:	d105      	bne.n	800429e <__libc_init_array+0x2e>
 8004292:	bd70      	pop	{r4, r5, r6, pc}
 8004294:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004298:	4798      	blx	r3
 800429a:	3501      	adds	r5, #1
 800429c:	e7ee      	b.n	800427c <__libc_init_array+0xc>
 800429e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042a2:	4798      	blx	r3
 80042a4:	3501      	adds	r5, #1
 80042a6:	e7f2      	b.n	800428e <__libc_init_array+0x1e>
 80042a8:	08006118 	.word	0x08006118
 80042ac:	08006118 	.word	0x08006118
 80042b0:	08006118 	.word	0x08006118
 80042b4:	0800611c 	.word	0x0800611c

080042b8 <memset>:
 80042b8:	4402      	add	r2, r0
 80042ba:	4603      	mov	r3, r0
 80042bc:	4293      	cmp	r3, r2
 80042be:	d100      	bne.n	80042c2 <memset+0xa>
 80042c0:	4770      	bx	lr
 80042c2:	f803 1b01 	strb.w	r1, [r3], #1
 80042c6:	e7f9      	b.n	80042bc <memset+0x4>

080042c8 <__cvt>:
 80042c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042cc:	ec55 4b10 	vmov	r4, r5, d0
 80042d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80042d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80042d6:	2d00      	cmp	r5, #0
 80042d8:	460e      	mov	r6, r1
 80042da:	4691      	mov	r9, r2
 80042dc:	4619      	mov	r1, r3
 80042de:	bfb8      	it	lt
 80042e0:	4622      	movlt	r2, r4
 80042e2:	462b      	mov	r3, r5
 80042e4:	f027 0720 	bic.w	r7, r7, #32
 80042e8:	bfbb      	ittet	lt
 80042ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80042ee:	461d      	movlt	r5, r3
 80042f0:	2300      	movge	r3, #0
 80042f2:	232d      	movlt	r3, #45	; 0x2d
 80042f4:	bfb8      	it	lt
 80042f6:	4614      	movlt	r4, r2
 80042f8:	2f46      	cmp	r7, #70	; 0x46
 80042fa:	700b      	strb	r3, [r1, #0]
 80042fc:	d004      	beq.n	8004308 <__cvt+0x40>
 80042fe:	2f45      	cmp	r7, #69	; 0x45
 8004300:	d100      	bne.n	8004304 <__cvt+0x3c>
 8004302:	3601      	adds	r6, #1
 8004304:	2102      	movs	r1, #2
 8004306:	e000      	b.n	800430a <__cvt+0x42>
 8004308:	2103      	movs	r1, #3
 800430a:	ab03      	add	r3, sp, #12
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	ab02      	add	r3, sp, #8
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	4632      	mov	r2, r6
 8004314:	4653      	mov	r3, sl
 8004316:	ec45 4b10 	vmov	d0, r4, r5
 800431a:	f000 fbad 	bl	8004a78 <_dtoa_r>
 800431e:	2f47      	cmp	r7, #71	; 0x47
 8004320:	4680      	mov	r8, r0
 8004322:	d102      	bne.n	800432a <__cvt+0x62>
 8004324:	f019 0f01 	tst.w	r9, #1
 8004328:	d026      	beq.n	8004378 <__cvt+0xb0>
 800432a:	2f46      	cmp	r7, #70	; 0x46
 800432c:	eb08 0906 	add.w	r9, r8, r6
 8004330:	d111      	bne.n	8004356 <__cvt+0x8e>
 8004332:	f898 3000 	ldrb.w	r3, [r8]
 8004336:	2b30      	cmp	r3, #48	; 0x30
 8004338:	d10a      	bne.n	8004350 <__cvt+0x88>
 800433a:	2200      	movs	r2, #0
 800433c:	2300      	movs	r3, #0
 800433e:	4620      	mov	r0, r4
 8004340:	4629      	mov	r1, r5
 8004342:	f7fc fb75 	bl	8000a30 <__aeabi_dcmpeq>
 8004346:	b918      	cbnz	r0, 8004350 <__cvt+0x88>
 8004348:	f1c6 0601 	rsb	r6, r6, #1
 800434c:	f8ca 6000 	str.w	r6, [sl]
 8004350:	f8da 3000 	ldr.w	r3, [sl]
 8004354:	4499      	add	r9, r3
 8004356:	2200      	movs	r2, #0
 8004358:	2300      	movs	r3, #0
 800435a:	4620      	mov	r0, r4
 800435c:	4629      	mov	r1, r5
 800435e:	f7fc fb67 	bl	8000a30 <__aeabi_dcmpeq>
 8004362:	b938      	cbnz	r0, 8004374 <__cvt+0xac>
 8004364:	2230      	movs	r2, #48	; 0x30
 8004366:	9b03      	ldr	r3, [sp, #12]
 8004368:	454b      	cmp	r3, r9
 800436a:	d205      	bcs.n	8004378 <__cvt+0xb0>
 800436c:	1c59      	adds	r1, r3, #1
 800436e:	9103      	str	r1, [sp, #12]
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	e7f8      	b.n	8004366 <__cvt+0x9e>
 8004374:	f8cd 900c 	str.w	r9, [sp, #12]
 8004378:	9b03      	ldr	r3, [sp, #12]
 800437a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800437c:	eba3 0308 	sub.w	r3, r3, r8
 8004380:	4640      	mov	r0, r8
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	b004      	add	sp, #16
 8004386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800438a <__exponent>:
 800438a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800438c:	2900      	cmp	r1, #0
 800438e:	4604      	mov	r4, r0
 8004390:	bfba      	itte	lt
 8004392:	4249      	neglt	r1, r1
 8004394:	232d      	movlt	r3, #45	; 0x2d
 8004396:	232b      	movge	r3, #43	; 0x2b
 8004398:	2909      	cmp	r1, #9
 800439a:	f804 2b02 	strb.w	r2, [r4], #2
 800439e:	7043      	strb	r3, [r0, #1]
 80043a0:	dd20      	ble.n	80043e4 <__exponent+0x5a>
 80043a2:	f10d 0307 	add.w	r3, sp, #7
 80043a6:	461f      	mov	r7, r3
 80043a8:	260a      	movs	r6, #10
 80043aa:	fb91 f5f6 	sdiv	r5, r1, r6
 80043ae:	fb06 1115 	mls	r1, r6, r5, r1
 80043b2:	3130      	adds	r1, #48	; 0x30
 80043b4:	2d09      	cmp	r5, #9
 80043b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80043ba:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80043be:	4629      	mov	r1, r5
 80043c0:	dc09      	bgt.n	80043d6 <__exponent+0x4c>
 80043c2:	3130      	adds	r1, #48	; 0x30
 80043c4:	3b02      	subs	r3, #2
 80043c6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80043ca:	42bb      	cmp	r3, r7
 80043cc:	4622      	mov	r2, r4
 80043ce:	d304      	bcc.n	80043da <__exponent+0x50>
 80043d0:	1a10      	subs	r0, r2, r0
 80043d2:	b003      	add	sp, #12
 80043d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043d6:	4613      	mov	r3, r2
 80043d8:	e7e7      	b.n	80043aa <__exponent+0x20>
 80043da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043de:	f804 2b01 	strb.w	r2, [r4], #1
 80043e2:	e7f2      	b.n	80043ca <__exponent+0x40>
 80043e4:	2330      	movs	r3, #48	; 0x30
 80043e6:	4419      	add	r1, r3
 80043e8:	7083      	strb	r3, [r0, #2]
 80043ea:	1d02      	adds	r2, r0, #4
 80043ec:	70c1      	strb	r1, [r0, #3]
 80043ee:	e7ef      	b.n	80043d0 <__exponent+0x46>

080043f0 <_printf_float>:
 80043f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f4:	b08d      	sub	sp, #52	; 0x34
 80043f6:	460c      	mov	r4, r1
 80043f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80043fc:	4616      	mov	r6, r2
 80043fe:	461f      	mov	r7, r3
 8004400:	4605      	mov	r5, r0
 8004402:	f001 f8f1 	bl	80055e8 <_localeconv_r>
 8004406:	6803      	ldr	r3, [r0, #0]
 8004408:	9304      	str	r3, [sp, #16]
 800440a:	4618      	mov	r0, r3
 800440c:	f7fb fee4 	bl	80001d8 <strlen>
 8004410:	2300      	movs	r3, #0
 8004412:	930a      	str	r3, [sp, #40]	; 0x28
 8004414:	f8d8 3000 	ldr.w	r3, [r8]
 8004418:	9005      	str	r0, [sp, #20]
 800441a:	3307      	adds	r3, #7
 800441c:	f023 0307 	bic.w	r3, r3, #7
 8004420:	f103 0208 	add.w	r2, r3, #8
 8004424:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004428:	f8d4 b000 	ldr.w	fp, [r4]
 800442c:	f8c8 2000 	str.w	r2, [r8]
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004438:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800443c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004440:	9307      	str	r3, [sp, #28]
 8004442:	f8cd 8018 	str.w	r8, [sp, #24]
 8004446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800444a:	4ba7      	ldr	r3, [pc, #668]	; (80046e8 <_printf_float+0x2f8>)
 800444c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004450:	f7fc fb20 	bl	8000a94 <__aeabi_dcmpun>
 8004454:	bb70      	cbnz	r0, 80044b4 <_printf_float+0xc4>
 8004456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800445a:	4ba3      	ldr	r3, [pc, #652]	; (80046e8 <_printf_float+0x2f8>)
 800445c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004460:	f7fc fafa 	bl	8000a58 <__aeabi_dcmple>
 8004464:	bb30      	cbnz	r0, 80044b4 <_printf_float+0xc4>
 8004466:	2200      	movs	r2, #0
 8004468:	2300      	movs	r3, #0
 800446a:	4640      	mov	r0, r8
 800446c:	4649      	mov	r1, r9
 800446e:	f7fc fae9 	bl	8000a44 <__aeabi_dcmplt>
 8004472:	b110      	cbz	r0, 800447a <_printf_float+0x8a>
 8004474:	232d      	movs	r3, #45	; 0x2d
 8004476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800447a:	4a9c      	ldr	r2, [pc, #624]	; (80046ec <_printf_float+0x2fc>)
 800447c:	4b9c      	ldr	r3, [pc, #624]	; (80046f0 <_printf_float+0x300>)
 800447e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004482:	bf8c      	ite	hi
 8004484:	4690      	movhi	r8, r2
 8004486:	4698      	movls	r8, r3
 8004488:	2303      	movs	r3, #3
 800448a:	f02b 0204 	bic.w	r2, fp, #4
 800448e:	6123      	str	r3, [r4, #16]
 8004490:	6022      	str	r2, [r4, #0]
 8004492:	f04f 0900 	mov.w	r9, #0
 8004496:	9700      	str	r7, [sp, #0]
 8004498:	4633      	mov	r3, r6
 800449a:	aa0b      	add	r2, sp, #44	; 0x2c
 800449c:	4621      	mov	r1, r4
 800449e:	4628      	mov	r0, r5
 80044a0:	f000 f9e6 	bl	8004870 <_printf_common>
 80044a4:	3001      	adds	r0, #1
 80044a6:	f040 808d 	bne.w	80045c4 <_printf_float+0x1d4>
 80044aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044ae:	b00d      	add	sp, #52	; 0x34
 80044b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	4640      	mov	r0, r8
 80044ba:	4649      	mov	r1, r9
 80044bc:	f7fc faea 	bl	8000a94 <__aeabi_dcmpun>
 80044c0:	b110      	cbz	r0, 80044c8 <_printf_float+0xd8>
 80044c2:	4a8c      	ldr	r2, [pc, #560]	; (80046f4 <_printf_float+0x304>)
 80044c4:	4b8c      	ldr	r3, [pc, #560]	; (80046f8 <_printf_float+0x308>)
 80044c6:	e7da      	b.n	800447e <_printf_float+0x8e>
 80044c8:	6861      	ldr	r1, [r4, #4]
 80044ca:	1c4b      	adds	r3, r1, #1
 80044cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80044d0:	a80a      	add	r0, sp, #40	; 0x28
 80044d2:	d13e      	bne.n	8004552 <_printf_float+0x162>
 80044d4:	2306      	movs	r3, #6
 80044d6:	6063      	str	r3, [r4, #4]
 80044d8:	2300      	movs	r3, #0
 80044da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80044de:	ab09      	add	r3, sp, #36	; 0x24
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	ec49 8b10 	vmov	d0, r8, r9
 80044e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044ea:	6022      	str	r2, [r4, #0]
 80044ec:	f8cd a004 	str.w	sl, [sp, #4]
 80044f0:	6861      	ldr	r1, [r4, #4]
 80044f2:	4628      	mov	r0, r5
 80044f4:	f7ff fee8 	bl	80042c8 <__cvt>
 80044f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80044fc:	2b47      	cmp	r3, #71	; 0x47
 80044fe:	4680      	mov	r8, r0
 8004500:	d109      	bne.n	8004516 <_printf_float+0x126>
 8004502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004504:	1cd8      	adds	r0, r3, #3
 8004506:	db02      	blt.n	800450e <_printf_float+0x11e>
 8004508:	6862      	ldr	r2, [r4, #4]
 800450a:	4293      	cmp	r3, r2
 800450c:	dd47      	ble.n	800459e <_printf_float+0x1ae>
 800450e:	f1aa 0a02 	sub.w	sl, sl, #2
 8004512:	fa5f fa8a 	uxtb.w	sl, sl
 8004516:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800451a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800451c:	d824      	bhi.n	8004568 <_printf_float+0x178>
 800451e:	3901      	subs	r1, #1
 8004520:	4652      	mov	r2, sl
 8004522:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004526:	9109      	str	r1, [sp, #36]	; 0x24
 8004528:	f7ff ff2f 	bl	800438a <__exponent>
 800452c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800452e:	1813      	adds	r3, r2, r0
 8004530:	2a01      	cmp	r2, #1
 8004532:	4681      	mov	r9, r0
 8004534:	6123      	str	r3, [r4, #16]
 8004536:	dc02      	bgt.n	800453e <_printf_float+0x14e>
 8004538:	6822      	ldr	r2, [r4, #0]
 800453a:	07d1      	lsls	r1, r2, #31
 800453c:	d501      	bpl.n	8004542 <_printf_float+0x152>
 800453e:	3301      	adds	r3, #1
 8004540:	6123      	str	r3, [r4, #16]
 8004542:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0a5      	beq.n	8004496 <_printf_float+0xa6>
 800454a:	232d      	movs	r3, #45	; 0x2d
 800454c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004550:	e7a1      	b.n	8004496 <_printf_float+0xa6>
 8004552:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004556:	f000 8177 	beq.w	8004848 <_printf_float+0x458>
 800455a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800455e:	d1bb      	bne.n	80044d8 <_printf_float+0xe8>
 8004560:	2900      	cmp	r1, #0
 8004562:	d1b9      	bne.n	80044d8 <_printf_float+0xe8>
 8004564:	2301      	movs	r3, #1
 8004566:	e7b6      	b.n	80044d6 <_printf_float+0xe6>
 8004568:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800456c:	d119      	bne.n	80045a2 <_printf_float+0x1b2>
 800456e:	2900      	cmp	r1, #0
 8004570:	6863      	ldr	r3, [r4, #4]
 8004572:	dd0c      	ble.n	800458e <_printf_float+0x19e>
 8004574:	6121      	str	r1, [r4, #16]
 8004576:	b913      	cbnz	r3, 800457e <_printf_float+0x18e>
 8004578:	6822      	ldr	r2, [r4, #0]
 800457a:	07d2      	lsls	r2, r2, #31
 800457c:	d502      	bpl.n	8004584 <_printf_float+0x194>
 800457e:	3301      	adds	r3, #1
 8004580:	440b      	add	r3, r1
 8004582:	6123      	str	r3, [r4, #16]
 8004584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004586:	65a3      	str	r3, [r4, #88]	; 0x58
 8004588:	f04f 0900 	mov.w	r9, #0
 800458c:	e7d9      	b.n	8004542 <_printf_float+0x152>
 800458e:	b913      	cbnz	r3, 8004596 <_printf_float+0x1a6>
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	07d0      	lsls	r0, r2, #31
 8004594:	d501      	bpl.n	800459a <_printf_float+0x1aa>
 8004596:	3302      	adds	r3, #2
 8004598:	e7f3      	b.n	8004582 <_printf_float+0x192>
 800459a:	2301      	movs	r3, #1
 800459c:	e7f1      	b.n	8004582 <_printf_float+0x192>
 800459e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80045a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80045a6:	4293      	cmp	r3, r2
 80045a8:	db05      	blt.n	80045b6 <_printf_float+0x1c6>
 80045aa:	6822      	ldr	r2, [r4, #0]
 80045ac:	6123      	str	r3, [r4, #16]
 80045ae:	07d1      	lsls	r1, r2, #31
 80045b0:	d5e8      	bpl.n	8004584 <_printf_float+0x194>
 80045b2:	3301      	adds	r3, #1
 80045b4:	e7e5      	b.n	8004582 <_printf_float+0x192>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bfd4      	ite	le
 80045ba:	f1c3 0302 	rsble	r3, r3, #2
 80045be:	2301      	movgt	r3, #1
 80045c0:	4413      	add	r3, r2
 80045c2:	e7de      	b.n	8004582 <_printf_float+0x192>
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	055a      	lsls	r2, r3, #21
 80045c8:	d407      	bmi.n	80045da <_printf_float+0x1ea>
 80045ca:	6923      	ldr	r3, [r4, #16]
 80045cc:	4642      	mov	r2, r8
 80045ce:	4631      	mov	r1, r6
 80045d0:	4628      	mov	r0, r5
 80045d2:	47b8      	blx	r7
 80045d4:	3001      	adds	r0, #1
 80045d6:	d12b      	bne.n	8004630 <_printf_float+0x240>
 80045d8:	e767      	b.n	80044aa <_printf_float+0xba>
 80045da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80045de:	f240 80dc 	bls.w	800479a <_printf_float+0x3aa>
 80045e2:	2200      	movs	r2, #0
 80045e4:	2300      	movs	r3, #0
 80045e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045ea:	f7fc fa21 	bl	8000a30 <__aeabi_dcmpeq>
 80045ee:	2800      	cmp	r0, #0
 80045f0:	d033      	beq.n	800465a <_printf_float+0x26a>
 80045f2:	2301      	movs	r3, #1
 80045f4:	4a41      	ldr	r2, [pc, #260]	; (80046fc <_printf_float+0x30c>)
 80045f6:	4631      	mov	r1, r6
 80045f8:	4628      	mov	r0, r5
 80045fa:	47b8      	blx	r7
 80045fc:	3001      	adds	r0, #1
 80045fe:	f43f af54 	beq.w	80044aa <_printf_float+0xba>
 8004602:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004606:	429a      	cmp	r2, r3
 8004608:	db02      	blt.n	8004610 <_printf_float+0x220>
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	07d8      	lsls	r0, r3, #31
 800460e:	d50f      	bpl.n	8004630 <_printf_float+0x240>
 8004610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004614:	4631      	mov	r1, r6
 8004616:	4628      	mov	r0, r5
 8004618:	47b8      	blx	r7
 800461a:	3001      	adds	r0, #1
 800461c:	f43f af45 	beq.w	80044aa <_printf_float+0xba>
 8004620:	f04f 0800 	mov.w	r8, #0
 8004624:	f104 091a 	add.w	r9, r4, #26
 8004628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800462a:	3b01      	subs	r3, #1
 800462c:	4543      	cmp	r3, r8
 800462e:	dc09      	bgt.n	8004644 <_printf_float+0x254>
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	079b      	lsls	r3, r3, #30
 8004634:	f100 8103 	bmi.w	800483e <_printf_float+0x44e>
 8004638:	68e0      	ldr	r0, [r4, #12]
 800463a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800463c:	4298      	cmp	r0, r3
 800463e:	bfb8      	it	lt
 8004640:	4618      	movlt	r0, r3
 8004642:	e734      	b.n	80044ae <_printf_float+0xbe>
 8004644:	2301      	movs	r3, #1
 8004646:	464a      	mov	r2, r9
 8004648:	4631      	mov	r1, r6
 800464a:	4628      	mov	r0, r5
 800464c:	47b8      	blx	r7
 800464e:	3001      	adds	r0, #1
 8004650:	f43f af2b 	beq.w	80044aa <_printf_float+0xba>
 8004654:	f108 0801 	add.w	r8, r8, #1
 8004658:	e7e6      	b.n	8004628 <_printf_float+0x238>
 800465a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	dc2b      	bgt.n	80046b8 <_printf_float+0x2c8>
 8004660:	2301      	movs	r3, #1
 8004662:	4a26      	ldr	r2, [pc, #152]	; (80046fc <_printf_float+0x30c>)
 8004664:	4631      	mov	r1, r6
 8004666:	4628      	mov	r0, r5
 8004668:	47b8      	blx	r7
 800466a:	3001      	adds	r0, #1
 800466c:	f43f af1d 	beq.w	80044aa <_printf_float+0xba>
 8004670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004672:	b923      	cbnz	r3, 800467e <_printf_float+0x28e>
 8004674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004676:	b913      	cbnz	r3, 800467e <_printf_float+0x28e>
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	07d9      	lsls	r1, r3, #31
 800467c:	d5d8      	bpl.n	8004630 <_printf_float+0x240>
 800467e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004682:	4631      	mov	r1, r6
 8004684:	4628      	mov	r0, r5
 8004686:	47b8      	blx	r7
 8004688:	3001      	adds	r0, #1
 800468a:	f43f af0e 	beq.w	80044aa <_printf_float+0xba>
 800468e:	f04f 0900 	mov.w	r9, #0
 8004692:	f104 0a1a 	add.w	sl, r4, #26
 8004696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004698:	425b      	negs	r3, r3
 800469a:	454b      	cmp	r3, r9
 800469c:	dc01      	bgt.n	80046a2 <_printf_float+0x2b2>
 800469e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046a0:	e794      	b.n	80045cc <_printf_float+0x1dc>
 80046a2:	2301      	movs	r3, #1
 80046a4:	4652      	mov	r2, sl
 80046a6:	4631      	mov	r1, r6
 80046a8:	4628      	mov	r0, r5
 80046aa:	47b8      	blx	r7
 80046ac:	3001      	adds	r0, #1
 80046ae:	f43f aefc 	beq.w	80044aa <_printf_float+0xba>
 80046b2:	f109 0901 	add.w	r9, r9, #1
 80046b6:	e7ee      	b.n	8004696 <_printf_float+0x2a6>
 80046b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046bc:	429a      	cmp	r2, r3
 80046be:	bfa8      	it	ge
 80046c0:	461a      	movge	r2, r3
 80046c2:	2a00      	cmp	r2, #0
 80046c4:	4691      	mov	r9, r2
 80046c6:	dd07      	ble.n	80046d8 <_printf_float+0x2e8>
 80046c8:	4613      	mov	r3, r2
 80046ca:	4631      	mov	r1, r6
 80046cc:	4642      	mov	r2, r8
 80046ce:	4628      	mov	r0, r5
 80046d0:	47b8      	blx	r7
 80046d2:	3001      	adds	r0, #1
 80046d4:	f43f aee9 	beq.w	80044aa <_printf_float+0xba>
 80046d8:	f104 031a 	add.w	r3, r4, #26
 80046dc:	f04f 0b00 	mov.w	fp, #0
 80046e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046e4:	9306      	str	r3, [sp, #24]
 80046e6:	e015      	b.n	8004714 <_printf_float+0x324>
 80046e8:	7fefffff 	.word	0x7fefffff
 80046ec:	08005eec 	.word	0x08005eec
 80046f0:	08005ee8 	.word	0x08005ee8
 80046f4:	08005ef4 	.word	0x08005ef4
 80046f8:	08005ef0 	.word	0x08005ef0
 80046fc:	08005ef8 	.word	0x08005ef8
 8004700:	2301      	movs	r3, #1
 8004702:	9a06      	ldr	r2, [sp, #24]
 8004704:	4631      	mov	r1, r6
 8004706:	4628      	mov	r0, r5
 8004708:	47b8      	blx	r7
 800470a:	3001      	adds	r0, #1
 800470c:	f43f aecd 	beq.w	80044aa <_printf_float+0xba>
 8004710:	f10b 0b01 	add.w	fp, fp, #1
 8004714:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004718:	ebaa 0309 	sub.w	r3, sl, r9
 800471c:	455b      	cmp	r3, fp
 800471e:	dcef      	bgt.n	8004700 <_printf_float+0x310>
 8004720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004724:	429a      	cmp	r2, r3
 8004726:	44d0      	add	r8, sl
 8004728:	db15      	blt.n	8004756 <_printf_float+0x366>
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	07da      	lsls	r2, r3, #31
 800472e:	d412      	bmi.n	8004756 <_printf_float+0x366>
 8004730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004732:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004734:	eba3 020a 	sub.w	r2, r3, sl
 8004738:	eba3 0a01 	sub.w	sl, r3, r1
 800473c:	4592      	cmp	sl, r2
 800473e:	bfa8      	it	ge
 8004740:	4692      	movge	sl, r2
 8004742:	f1ba 0f00 	cmp.w	sl, #0
 8004746:	dc0e      	bgt.n	8004766 <_printf_float+0x376>
 8004748:	f04f 0800 	mov.w	r8, #0
 800474c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004750:	f104 091a 	add.w	r9, r4, #26
 8004754:	e019      	b.n	800478a <_printf_float+0x39a>
 8004756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800475a:	4631      	mov	r1, r6
 800475c:	4628      	mov	r0, r5
 800475e:	47b8      	blx	r7
 8004760:	3001      	adds	r0, #1
 8004762:	d1e5      	bne.n	8004730 <_printf_float+0x340>
 8004764:	e6a1      	b.n	80044aa <_printf_float+0xba>
 8004766:	4653      	mov	r3, sl
 8004768:	4642      	mov	r2, r8
 800476a:	4631      	mov	r1, r6
 800476c:	4628      	mov	r0, r5
 800476e:	47b8      	blx	r7
 8004770:	3001      	adds	r0, #1
 8004772:	d1e9      	bne.n	8004748 <_printf_float+0x358>
 8004774:	e699      	b.n	80044aa <_printf_float+0xba>
 8004776:	2301      	movs	r3, #1
 8004778:	464a      	mov	r2, r9
 800477a:	4631      	mov	r1, r6
 800477c:	4628      	mov	r0, r5
 800477e:	47b8      	blx	r7
 8004780:	3001      	adds	r0, #1
 8004782:	f43f ae92 	beq.w	80044aa <_printf_float+0xba>
 8004786:	f108 0801 	add.w	r8, r8, #1
 800478a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	eba3 030a 	sub.w	r3, r3, sl
 8004794:	4543      	cmp	r3, r8
 8004796:	dcee      	bgt.n	8004776 <_printf_float+0x386>
 8004798:	e74a      	b.n	8004630 <_printf_float+0x240>
 800479a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800479c:	2a01      	cmp	r2, #1
 800479e:	dc01      	bgt.n	80047a4 <_printf_float+0x3b4>
 80047a0:	07db      	lsls	r3, r3, #31
 80047a2:	d53a      	bpl.n	800481a <_printf_float+0x42a>
 80047a4:	2301      	movs	r3, #1
 80047a6:	4642      	mov	r2, r8
 80047a8:	4631      	mov	r1, r6
 80047aa:	4628      	mov	r0, r5
 80047ac:	47b8      	blx	r7
 80047ae:	3001      	adds	r0, #1
 80047b0:	f43f ae7b 	beq.w	80044aa <_printf_float+0xba>
 80047b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047b8:	4631      	mov	r1, r6
 80047ba:	4628      	mov	r0, r5
 80047bc:	47b8      	blx	r7
 80047be:	3001      	adds	r0, #1
 80047c0:	f108 0801 	add.w	r8, r8, #1
 80047c4:	f43f ae71 	beq.w	80044aa <_printf_float+0xba>
 80047c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ca:	2200      	movs	r2, #0
 80047cc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80047d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047d4:	2300      	movs	r3, #0
 80047d6:	f7fc f92b 	bl	8000a30 <__aeabi_dcmpeq>
 80047da:	b9c8      	cbnz	r0, 8004810 <_printf_float+0x420>
 80047dc:	4653      	mov	r3, sl
 80047de:	4642      	mov	r2, r8
 80047e0:	4631      	mov	r1, r6
 80047e2:	4628      	mov	r0, r5
 80047e4:	47b8      	blx	r7
 80047e6:	3001      	adds	r0, #1
 80047e8:	d10e      	bne.n	8004808 <_printf_float+0x418>
 80047ea:	e65e      	b.n	80044aa <_printf_float+0xba>
 80047ec:	2301      	movs	r3, #1
 80047ee:	4652      	mov	r2, sl
 80047f0:	4631      	mov	r1, r6
 80047f2:	4628      	mov	r0, r5
 80047f4:	47b8      	blx	r7
 80047f6:	3001      	adds	r0, #1
 80047f8:	f43f ae57 	beq.w	80044aa <_printf_float+0xba>
 80047fc:	f108 0801 	add.w	r8, r8, #1
 8004800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004802:	3b01      	subs	r3, #1
 8004804:	4543      	cmp	r3, r8
 8004806:	dcf1      	bgt.n	80047ec <_printf_float+0x3fc>
 8004808:	464b      	mov	r3, r9
 800480a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800480e:	e6de      	b.n	80045ce <_printf_float+0x1de>
 8004810:	f04f 0800 	mov.w	r8, #0
 8004814:	f104 0a1a 	add.w	sl, r4, #26
 8004818:	e7f2      	b.n	8004800 <_printf_float+0x410>
 800481a:	2301      	movs	r3, #1
 800481c:	e7df      	b.n	80047de <_printf_float+0x3ee>
 800481e:	2301      	movs	r3, #1
 8004820:	464a      	mov	r2, r9
 8004822:	4631      	mov	r1, r6
 8004824:	4628      	mov	r0, r5
 8004826:	47b8      	blx	r7
 8004828:	3001      	adds	r0, #1
 800482a:	f43f ae3e 	beq.w	80044aa <_printf_float+0xba>
 800482e:	f108 0801 	add.w	r8, r8, #1
 8004832:	68e3      	ldr	r3, [r4, #12]
 8004834:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	4543      	cmp	r3, r8
 800483a:	dcf0      	bgt.n	800481e <_printf_float+0x42e>
 800483c:	e6fc      	b.n	8004638 <_printf_float+0x248>
 800483e:	f04f 0800 	mov.w	r8, #0
 8004842:	f104 0919 	add.w	r9, r4, #25
 8004846:	e7f4      	b.n	8004832 <_printf_float+0x442>
 8004848:	2900      	cmp	r1, #0
 800484a:	f43f ae8b 	beq.w	8004564 <_printf_float+0x174>
 800484e:	2300      	movs	r3, #0
 8004850:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004854:	ab09      	add	r3, sp, #36	; 0x24
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	ec49 8b10 	vmov	d0, r8, r9
 800485c:	6022      	str	r2, [r4, #0]
 800485e:	f8cd a004 	str.w	sl, [sp, #4]
 8004862:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004866:	4628      	mov	r0, r5
 8004868:	f7ff fd2e 	bl	80042c8 <__cvt>
 800486c:	4680      	mov	r8, r0
 800486e:	e648      	b.n	8004502 <_printf_float+0x112>

08004870 <_printf_common>:
 8004870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004874:	4691      	mov	r9, r2
 8004876:	461f      	mov	r7, r3
 8004878:	688a      	ldr	r2, [r1, #8]
 800487a:	690b      	ldr	r3, [r1, #16]
 800487c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004880:	4293      	cmp	r3, r2
 8004882:	bfb8      	it	lt
 8004884:	4613      	movlt	r3, r2
 8004886:	f8c9 3000 	str.w	r3, [r9]
 800488a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800488e:	4606      	mov	r6, r0
 8004890:	460c      	mov	r4, r1
 8004892:	b112      	cbz	r2, 800489a <_printf_common+0x2a>
 8004894:	3301      	adds	r3, #1
 8004896:	f8c9 3000 	str.w	r3, [r9]
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	0699      	lsls	r1, r3, #26
 800489e:	bf42      	ittt	mi
 80048a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048a4:	3302      	addmi	r3, #2
 80048a6:	f8c9 3000 	strmi.w	r3, [r9]
 80048aa:	6825      	ldr	r5, [r4, #0]
 80048ac:	f015 0506 	ands.w	r5, r5, #6
 80048b0:	d107      	bne.n	80048c2 <_printf_common+0x52>
 80048b2:	f104 0a19 	add.w	sl, r4, #25
 80048b6:	68e3      	ldr	r3, [r4, #12]
 80048b8:	f8d9 2000 	ldr.w	r2, [r9]
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	42ab      	cmp	r3, r5
 80048c0:	dc28      	bgt.n	8004914 <_printf_common+0xa4>
 80048c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048c6:	6822      	ldr	r2, [r4, #0]
 80048c8:	3300      	adds	r3, #0
 80048ca:	bf18      	it	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	0692      	lsls	r2, r2, #26
 80048d0:	d42d      	bmi.n	800492e <_printf_common+0xbe>
 80048d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048d6:	4639      	mov	r1, r7
 80048d8:	4630      	mov	r0, r6
 80048da:	47c0      	blx	r8
 80048dc:	3001      	adds	r0, #1
 80048de:	d020      	beq.n	8004922 <_printf_common+0xb2>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	68e5      	ldr	r5, [r4, #12]
 80048e4:	f8d9 2000 	ldr.w	r2, [r9]
 80048e8:	f003 0306 	and.w	r3, r3, #6
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	bf08      	it	eq
 80048f0:	1aad      	subeq	r5, r5, r2
 80048f2:	68a3      	ldr	r3, [r4, #8]
 80048f4:	6922      	ldr	r2, [r4, #16]
 80048f6:	bf0c      	ite	eq
 80048f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048fc:	2500      	movne	r5, #0
 80048fe:	4293      	cmp	r3, r2
 8004900:	bfc4      	itt	gt
 8004902:	1a9b      	subgt	r3, r3, r2
 8004904:	18ed      	addgt	r5, r5, r3
 8004906:	f04f 0900 	mov.w	r9, #0
 800490a:	341a      	adds	r4, #26
 800490c:	454d      	cmp	r5, r9
 800490e:	d11a      	bne.n	8004946 <_printf_common+0xd6>
 8004910:	2000      	movs	r0, #0
 8004912:	e008      	b.n	8004926 <_printf_common+0xb6>
 8004914:	2301      	movs	r3, #1
 8004916:	4652      	mov	r2, sl
 8004918:	4639      	mov	r1, r7
 800491a:	4630      	mov	r0, r6
 800491c:	47c0      	blx	r8
 800491e:	3001      	adds	r0, #1
 8004920:	d103      	bne.n	800492a <_printf_common+0xba>
 8004922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800492a:	3501      	adds	r5, #1
 800492c:	e7c3      	b.n	80048b6 <_printf_common+0x46>
 800492e:	18e1      	adds	r1, r4, r3
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	2030      	movs	r0, #48	; 0x30
 8004934:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004938:	4422      	add	r2, r4
 800493a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800493e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004942:	3302      	adds	r3, #2
 8004944:	e7c5      	b.n	80048d2 <_printf_common+0x62>
 8004946:	2301      	movs	r3, #1
 8004948:	4622      	mov	r2, r4
 800494a:	4639      	mov	r1, r7
 800494c:	4630      	mov	r0, r6
 800494e:	47c0      	blx	r8
 8004950:	3001      	adds	r0, #1
 8004952:	d0e6      	beq.n	8004922 <_printf_common+0xb2>
 8004954:	f109 0901 	add.w	r9, r9, #1
 8004958:	e7d8      	b.n	800490c <_printf_common+0x9c>

0800495a <quorem>:
 800495a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495e:	6903      	ldr	r3, [r0, #16]
 8004960:	690c      	ldr	r4, [r1, #16]
 8004962:	42a3      	cmp	r3, r4
 8004964:	4680      	mov	r8, r0
 8004966:	f2c0 8082 	blt.w	8004a6e <quorem+0x114>
 800496a:	3c01      	subs	r4, #1
 800496c:	f101 0714 	add.w	r7, r1, #20
 8004970:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004974:	f100 0614 	add.w	r6, r0, #20
 8004978:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800497c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004980:	eb06 030c 	add.w	r3, r6, ip
 8004984:	3501      	adds	r5, #1
 8004986:	eb07 090c 	add.w	r9, r7, ip
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	fbb0 f5f5 	udiv	r5, r0, r5
 8004990:	b395      	cbz	r5, 80049f8 <quorem+0x9e>
 8004992:	f04f 0a00 	mov.w	sl, #0
 8004996:	4638      	mov	r0, r7
 8004998:	46b6      	mov	lr, r6
 800499a:	46d3      	mov	fp, sl
 800499c:	f850 2b04 	ldr.w	r2, [r0], #4
 80049a0:	b293      	uxth	r3, r2
 80049a2:	fb05 a303 	mla	r3, r5, r3, sl
 80049a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	ebab 0303 	sub.w	r3, fp, r3
 80049b0:	0c12      	lsrs	r2, r2, #16
 80049b2:	f8de b000 	ldr.w	fp, [lr]
 80049b6:	fb05 a202 	mla	r2, r5, r2, sl
 80049ba:	fa13 f38b 	uxtah	r3, r3, fp
 80049be:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80049c2:	fa1f fb82 	uxth.w	fp, r2
 80049c6:	f8de 2000 	ldr.w	r2, [lr]
 80049ca:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80049ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049d8:	4581      	cmp	r9, r0
 80049da:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80049de:	f84e 3b04 	str.w	r3, [lr], #4
 80049e2:	d2db      	bcs.n	800499c <quorem+0x42>
 80049e4:	f856 300c 	ldr.w	r3, [r6, ip]
 80049e8:	b933      	cbnz	r3, 80049f8 <quorem+0x9e>
 80049ea:	9b01      	ldr	r3, [sp, #4]
 80049ec:	3b04      	subs	r3, #4
 80049ee:	429e      	cmp	r6, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	d330      	bcc.n	8004a56 <quorem+0xfc>
 80049f4:	f8c8 4010 	str.w	r4, [r8, #16]
 80049f8:	4640      	mov	r0, r8
 80049fa:	f001 f82b 	bl	8005a54 <__mcmp>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	db25      	blt.n	8004a4e <quorem+0xf4>
 8004a02:	3501      	adds	r5, #1
 8004a04:	4630      	mov	r0, r6
 8004a06:	f04f 0c00 	mov.w	ip, #0
 8004a0a:	f857 2b04 	ldr.w	r2, [r7], #4
 8004a0e:	f8d0 e000 	ldr.w	lr, [r0]
 8004a12:	b293      	uxth	r3, r2
 8004a14:	ebac 0303 	sub.w	r3, ip, r3
 8004a18:	0c12      	lsrs	r2, r2, #16
 8004a1a:	fa13 f38e 	uxtah	r3, r3, lr
 8004a1e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a2c:	45b9      	cmp	r9, r7
 8004a2e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a32:	f840 3b04 	str.w	r3, [r0], #4
 8004a36:	d2e8      	bcs.n	8004a0a <quorem+0xb0>
 8004a38:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004a3c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004a40:	b92a      	cbnz	r2, 8004a4e <quorem+0xf4>
 8004a42:	3b04      	subs	r3, #4
 8004a44:	429e      	cmp	r6, r3
 8004a46:	461a      	mov	r2, r3
 8004a48:	d30b      	bcc.n	8004a62 <quorem+0x108>
 8004a4a:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a4e:	4628      	mov	r0, r5
 8004a50:	b003      	add	sp, #12
 8004a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a56:	6812      	ldr	r2, [r2, #0]
 8004a58:	3b04      	subs	r3, #4
 8004a5a:	2a00      	cmp	r2, #0
 8004a5c:	d1ca      	bne.n	80049f4 <quorem+0x9a>
 8004a5e:	3c01      	subs	r4, #1
 8004a60:	e7c5      	b.n	80049ee <quorem+0x94>
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	3b04      	subs	r3, #4
 8004a66:	2a00      	cmp	r2, #0
 8004a68:	d1ef      	bne.n	8004a4a <quorem+0xf0>
 8004a6a:	3c01      	subs	r4, #1
 8004a6c:	e7ea      	b.n	8004a44 <quorem+0xea>
 8004a6e:	2000      	movs	r0, #0
 8004a70:	e7ee      	b.n	8004a50 <quorem+0xf6>
 8004a72:	0000      	movs	r0, r0
 8004a74:	0000      	movs	r0, r0
	...

08004a78 <_dtoa_r>:
 8004a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7c:	ec57 6b10 	vmov	r6, r7, d0
 8004a80:	b097      	sub	sp, #92	; 0x5c
 8004a82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a84:	9106      	str	r1, [sp, #24]
 8004a86:	4604      	mov	r4, r0
 8004a88:	920b      	str	r2, [sp, #44]	; 0x2c
 8004a8a:	9312      	str	r3, [sp, #72]	; 0x48
 8004a8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004a90:	e9cd 6700 	strd	r6, r7, [sp]
 8004a94:	b93d      	cbnz	r5, 8004aa6 <_dtoa_r+0x2e>
 8004a96:	2010      	movs	r0, #16
 8004a98:	f000 fdb4 	bl	8005604 <malloc>
 8004a9c:	6260      	str	r0, [r4, #36]	; 0x24
 8004a9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004aa2:	6005      	str	r5, [r0, #0]
 8004aa4:	60c5      	str	r5, [r0, #12]
 8004aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aa8:	6819      	ldr	r1, [r3, #0]
 8004aaa:	b151      	cbz	r1, 8004ac2 <_dtoa_r+0x4a>
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	604a      	str	r2, [r1, #4]
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	4093      	lsls	r3, r2
 8004ab4:	608b      	str	r3, [r1, #8]
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f000 fdeb 	bl	8005692 <_Bfree>
 8004abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	1e3b      	subs	r3, r7, #0
 8004ac4:	bfbb      	ittet	lt
 8004ac6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004aca:	9301      	strlt	r3, [sp, #4]
 8004acc:	2300      	movge	r3, #0
 8004ace:	2201      	movlt	r2, #1
 8004ad0:	bfac      	ite	ge
 8004ad2:	f8c8 3000 	strge.w	r3, [r8]
 8004ad6:	f8c8 2000 	strlt.w	r2, [r8]
 8004ada:	4baf      	ldr	r3, [pc, #700]	; (8004d98 <_dtoa_r+0x320>)
 8004adc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004ae0:	ea33 0308 	bics.w	r3, r3, r8
 8004ae4:	d114      	bne.n	8004b10 <_dtoa_r+0x98>
 8004ae6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ae8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	9b00      	ldr	r3, [sp, #0]
 8004af0:	b923      	cbnz	r3, 8004afc <_dtoa_r+0x84>
 8004af2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004af6:	2800      	cmp	r0, #0
 8004af8:	f000 8542 	beq.w	8005580 <_dtoa_r+0xb08>
 8004afc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004afe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004dac <_dtoa_r+0x334>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 8544 	beq.w	8005590 <_dtoa_r+0xb18>
 8004b08:	f10b 0303 	add.w	r3, fp, #3
 8004b0c:	f000 bd3e 	b.w	800558c <_dtoa_r+0xb14>
 8004b10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2300      	movs	r3, #0
 8004b18:	4630      	mov	r0, r6
 8004b1a:	4639      	mov	r1, r7
 8004b1c:	f7fb ff88 	bl	8000a30 <__aeabi_dcmpeq>
 8004b20:	4681      	mov	r9, r0
 8004b22:	b168      	cbz	r0, 8004b40 <_dtoa_r+0xc8>
 8004b24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b26:	2301      	movs	r3, #1
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8524 	beq.w	800557a <_dtoa_r+0xb02>
 8004b32:	4b9a      	ldr	r3, [pc, #616]	; (8004d9c <_dtoa_r+0x324>)
 8004b34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b36:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	f000 bd28 	b.w	8005590 <_dtoa_r+0xb18>
 8004b40:	aa14      	add	r2, sp, #80	; 0x50
 8004b42:	a915      	add	r1, sp, #84	; 0x54
 8004b44:	ec47 6b10 	vmov	d0, r6, r7
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f000 fffa 	bl	8005b42 <__d2b>
 8004b4e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004b52:	9004      	str	r0, [sp, #16]
 8004b54:	2d00      	cmp	r5, #0
 8004b56:	d07c      	beq.n	8004c52 <_dtoa_r+0x1da>
 8004b58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004b5c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004b60:	46b2      	mov	sl, r6
 8004b62:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004b66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004b6a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004b6e:	2200      	movs	r2, #0
 8004b70:	4b8b      	ldr	r3, [pc, #556]	; (8004da0 <_dtoa_r+0x328>)
 8004b72:	4650      	mov	r0, sl
 8004b74:	4659      	mov	r1, fp
 8004b76:	f7fb fb3b 	bl	80001f0 <__aeabi_dsub>
 8004b7a:	a381      	add	r3, pc, #516	; (adr r3, 8004d80 <_dtoa_r+0x308>)
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f7fb fcee 	bl	8000560 <__aeabi_dmul>
 8004b84:	a380      	add	r3, pc, #512	; (adr r3, 8004d88 <_dtoa_r+0x310>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f7fb fb33 	bl	80001f4 <__adddf3>
 8004b8e:	4606      	mov	r6, r0
 8004b90:	4628      	mov	r0, r5
 8004b92:	460f      	mov	r7, r1
 8004b94:	f7fb fc7a 	bl	800048c <__aeabi_i2d>
 8004b98:	a37d      	add	r3, pc, #500	; (adr r3, 8004d90 <_dtoa_r+0x318>)
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	f7fb fcdf 	bl	8000560 <__aeabi_dmul>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	4639      	mov	r1, r7
 8004baa:	f7fb fb23 	bl	80001f4 <__adddf3>
 8004bae:	4606      	mov	r6, r0
 8004bb0:	460f      	mov	r7, r1
 8004bb2:	f7fb ff85 	bl	8000ac0 <__aeabi_d2iz>
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	4682      	mov	sl, r0
 8004bba:	2300      	movs	r3, #0
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	4639      	mov	r1, r7
 8004bc0:	f7fb ff40 	bl	8000a44 <__aeabi_dcmplt>
 8004bc4:	b148      	cbz	r0, 8004bda <_dtoa_r+0x162>
 8004bc6:	4650      	mov	r0, sl
 8004bc8:	f7fb fc60 	bl	800048c <__aeabi_i2d>
 8004bcc:	4632      	mov	r2, r6
 8004bce:	463b      	mov	r3, r7
 8004bd0:	f7fb ff2e 	bl	8000a30 <__aeabi_dcmpeq>
 8004bd4:	b908      	cbnz	r0, 8004bda <_dtoa_r+0x162>
 8004bd6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004bda:	f1ba 0f16 	cmp.w	sl, #22
 8004bde:	d859      	bhi.n	8004c94 <_dtoa_r+0x21c>
 8004be0:	4970      	ldr	r1, [pc, #448]	; (8004da4 <_dtoa_r+0x32c>)
 8004be2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004be6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bee:	f7fb ff47 	bl	8000a80 <__aeabi_dcmpgt>
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d050      	beq.n	8004c98 <_dtoa_r+0x220>
 8004bf6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004bfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c00:	1b5d      	subs	r5, r3, r5
 8004c02:	f1b5 0801 	subs.w	r8, r5, #1
 8004c06:	bf49      	itett	mi
 8004c08:	f1c5 0301 	rsbmi	r3, r5, #1
 8004c0c:	2300      	movpl	r3, #0
 8004c0e:	9305      	strmi	r3, [sp, #20]
 8004c10:	f04f 0800 	movmi.w	r8, #0
 8004c14:	bf58      	it	pl
 8004c16:	9305      	strpl	r3, [sp, #20]
 8004c18:	f1ba 0f00 	cmp.w	sl, #0
 8004c1c:	db3e      	blt.n	8004c9c <_dtoa_r+0x224>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	44d0      	add	r8, sl
 8004c22:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004c26:	9307      	str	r3, [sp, #28]
 8004c28:	9b06      	ldr	r3, [sp, #24]
 8004c2a:	2b09      	cmp	r3, #9
 8004c2c:	f200 8090 	bhi.w	8004d50 <_dtoa_r+0x2d8>
 8004c30:	2b05      	cmp	r3, #5
 8004c32:	bfc4      	itt	gt
 8004c34:	3b04      	subgt	r3, #4
 8004c36:	9306      	strgt	r3, [sp, #24]
 8004c38:	9b06      	ldr	r3, [sp, #24]
 8004c3a:	f1a3 0302 	sub.w	r3, r3, #2
 8004c3e:	bfcc      	ite	gt
 8004c40:	2500      	movgt	r5, #0
 8004c42:	2501      	movle	r5, #1
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	f200 808f 	bhi.w	8004d68 <_dtoa_r+0x2f0>
 8004c4a:	e8df f003 	tbb	[pc, r3]
 8004c4e:	7f7d      	.short	0x7f7d
 8004c50:	7131      	.short	0x7131
 8004c52:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004c56:	441d      	add	r5, r3
 8004c58:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004c5c:	2820      	cmp	r0, #32
 8004c5e:	dd13      	ble.n	8004c88 <_dtoa_r+0x210>
 8004c60:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004c64:	9b00      	ldr	r3, [sp, #0]
 8004c66:	fa08 f800 	lsl.w	r8, r8, r0
 8004c6a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004c6e:	fa23 f000 	lsr.w	r0, r3, r0
 8004c72:	ea48 0000 	orr.w	r0, r8, r0
 8004c76:	f7fb fbf9 	bl	800046c <__aeabi_ui2d>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	4682      	mov	sl, r0
 8004c7e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004c82:	3d01      	subs	r5, #1
 8004c84:	9313      	str	r3, [sp, #76]	; 0x4c
 8004c86:	e772      	b.n	8004b6e <_dtoa_r+0xf6>
 8004c88:	9b00      	ldr	r3, [sp, #0]
 8004c8a:	f1c0 0020 	rsb	r0, r0, #32
 8004c8e:	fa03 f000 	lsl.w	r0, r3, r0
 8004c92:	e7f0      	b.n	8004c76 <_dtoa_r+0x1fe>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e7b1      	b.n	8004bfc <_dtoa_r+0x184>
 8004c98:	900f      	str	r0, [sp, #60]	; 0x3c
 8004c9a:	e7b0      	b.n	8004bfe <_dtoa_r+0x186>
 8004c9c:	9b05      	ldr	r3, [sp, #20]
 8004c9e:	eba3 030a 	sub.w	r3, r3, sl
 8004ca2:	9305      	str	r3, [sp, #20]
 8004ca4:	f1ca 0300 	rsb	r3, sl, #0
 8004ca8:	9307      	str	r3, [sp, #28]
 8004caa:	2300      	movs	r3, #0
 8004cac:	930e      	str	r3, [sp, #56]	; 0x38
 8004cae:	e7bb      	b.n	8004c28 <_dtoa_r+0x1b0>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8004cb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	dd59      	ble.n	8004d6e <_dtoa_r+0x2f6>
 8004cba:	9302      	str	r3, [sp, #8]
 8004cbc:	4699      	mov	r9, r3
 8004cbe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	6072      	str	r2, [r6, #4]
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	f102 0014 	add.w	r0, r2, #20
 8004cca:	4298      	cmp	r0, r3
 8004ccc:	6871      	ldr	r1, [r6, #4]
 8004cce:	d953      	bls.n	8004d78 <_dtoa_r+0x300>
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f000 fcaa 	bl	800562a <_Balloc>
 8004cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cd8:	6030      	str	r0, [r6, #0]
 8004cda:	f1b9 0f0e 	cmp.w	r9, #14
 8004cde:	f8d3 b000 	ldr.w	fp, [r3]
 8004ce2:	f200 80e6 	bhi.w	8004eb2 <_dtoa_r+0x43a>
 8004ce6:	2d00      	cmp	r5, #0
 8004ce8:	f000 80e3 	beq.w	8004eb2 <_dtoa_r+0x43a>
 8004cec:	ed9d 7b00 	vldr	d7, [sp]
 8004cf0:	f1ba 0f00 	cmp.w	sl, #0
 8004cf4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004cf8:	dd74      	ble.n	8004de4 <_dtoa_r+0x36c>
 8004cfa:	4a2a      	ldr	r2, [pc, #168]	; (8004da4 <_dtoa_r+0x32c>)
 8004cfc:	f00a 030f 	and.w	r3, sl, #15
 8004d00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d04:	ed93 7b00 	vldr	d7, [r3]
 8004d08:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004d0c:	06f0      	lsls	r0, r6, #27
 8004d0e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004d12:	d565      	bpl.n	8004de0 <_dtoa_r+0x368>
 8004d14:	4b24      	ldr	r3, [pc, #144]	; (8004da8 <_dtoa_r+0x330>)
 8004d16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d1e:	f7fb fd49 	bl	80007b4 <__aeabi_ddiv>
 8004d22:	e9cd 0100 	strd	r0, r1, [sp]
 8004d26:	f006 060f 	and.w	r6, r6, #15
 8004d2a:	2503      	movs	r5, #3
 8004d2c:	4f1e      	ldr	r7, [pc, #120]	; (8004da8 <_dtoa_r+0x330>)
 8004d2e:	e04c      	b.n	8004dca <_dtoa_r+0x352>
 8004d30:	2301      	movs	r3, #1
 8004d32:	930a      	str	r3, [sp, #40]	; 0x28
 8004d34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d36:	4453      	add	r3, sl
 8004d38:	f103 0901 	add.w	r9, r3, #1
 8004d3c:	9302      	str	r3, [sp, #8]
 8004d3e:	464b      	mov	r3, r9
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	bfb8      	it	lt
 8004d44:	2301      	movlt	r3, #1
 8004d46:	e7ba      	b.n	8004cbe <_dtoa_r+0x246>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e7b2      	b.n	8004cb2 <_dtoa_r+0x23a>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e7f0      	b.n	8004d32 <_dtoa_r+0x2ba>
 8004d50:	2501      	movs	r5, #1
 8004d52:	2300      	movs	r3, #0
 8004d54:	9306      	str	r3, [sp, #24]
 8004d56:	950a      	str	r5, [sp, #40]	; 0x28
 8004d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d5c:	9302      	str	r3, [sp, #8]
 8004d5e:	4699      	mov	r9, r3
 8004d60:	2200      	movs	r2, #0
 8004d62:	2312      	movs	r3, #18
 8004d64:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d66:	e7aa      	b.n	8004cbe <_dtoa_r+0x246>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8004d6c:	e7f4      	b.n	8004d58 <_dtoa_r+0x2e0>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	9302      	str	r3, [sp, #8]
 8004d72:	4699      	mov	r9, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	e7f5      	b.n	8004d64 <_dtoa_r+0x2ec>
 8004d78:	3101      	adds	r1, #1
 8004d7a:	6071      	str	r1, [r6, #4]
 8004d7c:	0052      	lsls	r2, r2, #1
 8004d7e:	e7a2      	b.n	8004cc6 <_dtoa_r+0x24e>
 8004d80:	636f4361 	.word	0x636f4361
 8004d84:	3fd287a7 	.word	0x3fd287a7
 8004d88:	8b60c8b3 	.word	0x8b60c8b3
 8004d8c:	3fc68a28 	.word	0x3fc68a28
 8004d90:	509f79fb 	.word	0x509f79fb
 8004d94:	3fd34413 	.word	0x3fd34413
 8004d98:	7ff00000 	.word	0x7ff00000
 8004d9c:	08005ef9 	.word	0x08005ef9
 8004da0:	3ff80000 	.word	0x3ff80000
 8004da4:	08005f30 	.word	0x08005f30
 8004da8:	08005f08 	.word	0x08005f08
 8004dac:	08005f03 	.word	0x08005f03
 8004db0:	07f1      	lsls	r1, r6, #31
 8004db2:	d508      	bpl.n	8004dc6 <_dtoa_r+0x34e>
 8004db4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dbc:	f7fb fbd0 	bl	8000560 <__aeabi_dmul>
 8004dc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004dc4:	3501      	adds	r5, #1
 8004dc6:	1076      	asrs	r6, r6, #1
 8004dc8:	3708      	adds	r7, #8
 8004dca:	2e00      	cmp	r6, #0
 8004dcc:	d1f0      	bne.n	8004db0 <_dtoa_r+0x338>
 8004dce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004dd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004dd6:	f7fb fced 	bl	80007b4 <__aeabi_ddiv>
 8004dda:	e9cd 0100 	strd	r0, r1, [sp]
 8004dde:	e01a      	b.n	8004e16 <_dtoa_r+0x39e>
 8004de0:	2502      	movs	r5, #2
 8004de2:	e7a3      	b.n	8004d2c <_dtoa_r+0x2b4>
 8004de4:	f000 80a0 	beq.w	8004f28 <_dtoa_r+0x4b0>
 8004de8:	f1ca 0600 	rsb	r6, sl, #0
 8004dec:	4b9f      	ldr	r3, [pc, #636]	; (800506c <_dtoa_r+0x5f4>)
 8004dee:	4fa0      	ldr	r7, [pc, #640]	; (8005070 <_dtoa_r+0x5f8>)
 8004df0:	f006 020f 	and.w	r2, r6, #15
 8004df4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e00:	f7fb fbae 	bl	8000560 <__aeabi_dmul>
 8004e04:	e9cd 0100 	strd	r0, r1, [sp]
 8004e08:	1136      	asrs	r6, r6, #4
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	2502      	movs	r5, #2
 8004e0e:	2e00      	cmp	r6, #0
 8004e10:	d17f      	bne.n	8004f12 <_dtoa_r+0x49a>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e1      	bne.n	8004dda <_dtoa_r+0x362>
 8004e16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 8087 	beq.w	8004f2c <_dtoa_r+0x4b4>
 8004e1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004e22:	2200      	movs	r2, #0
 8004e24:	4b93      	ldr	r3, [pc, #588]	; (8005074 <_dtoa_r+0x5fc>)
 8004e26:	4630      	mov	r0, r6
 8004e28:	4639      	mov	r1, r7
 8004e2a:	f7fb fe0b 	bl	8000a44 <__aeabi_dcmplt>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	d07c      	beq.n	8004f2c <_dtoa_r+0x4b4>
 8004e32:	f1b9 0f00 	cmp.w	r9, #0
 8004e36:	d079      	beq.n	8004f2c <_dtoa_r+0x4b4>
 8004e38:	9b02      	ldr	r3, [sp, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	dd35      	ble.n	8004eaa <_dtoa_r+0x432>
 8004e3e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004e42:	9308      	str	r3, [sp, #32]
 8004e44:	4639      	mov	r1, r7
 8004e46:	2200      	movs	r2, #0
 8004e48:	4b8b      	ldr	r3, [pc, #556]	; (8005078 <_dtoa_r+0x600>)
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	f7fb fb88 	bl	8000560 <__aeabi_dmul>
 8004e50:	e9cd 0100 	strd	r0, r1, [sp]
 8004e54:	9f02      	ldr	r7, [sp, #8]
 8004e56:	3501      	adds	r5, #1
 8004e58:	4628      	mov	r0, r5
 8004e5a:	f7fb fb17 	bl	800048c <__aeabi_i2d>
 8004e5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e62:	f7fb fb7d 	bl	8000560 <__aeabi_dmul>
 8004e66:	2200      	movs	r2, #0
 8004e68:	4b84      	ldr	r3, [pc, #528]	; (800507c <_dtoa_r+0x604>)
 8004e6a:	f7fb f9c3 	bl	80001f4 <__adddf3>
 8004e6e:	4605      	mov	r5, r0
 8004e70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004e74:	2f00      	cmp	r7, #0
 8004e76:	d15d      	bne.n	8004f34 <_dtoa_r+0x4bc>
 8004e78:	2200      	movs	r2, #0
 8004e7a:	4b81      	ldr	r3, [pc, #516]	; (8005080 <_dtoa_r+0x608>)
 8004e7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e80:	f7fb f9b6 	bl	80001f0 <__aeabi_dsub>
 8004e84:	462a      	mov	r2, r5
 8004e86:	4633      	mov	r3, r6
 8004e88:	e9cd 0100 	strd	r0, r1, [sp]
 8004e8c:	f7fb fdf8 	bl	8000a80 <__aeabi_dcmpgt>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	f040 8288 	bne.w	80053a6 <_dtoa_r+0x92e>
 8004e96:	462a      	mov	r2, r5
 8004e98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004e9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ea0:	f7fb fdd0 	bl	8000a44 <__aeabi_dcmplt>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	f040 827c 	bne.w	80053a2 <_dtoa_r+0x92a>
 8004eaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004eae:	e9cd 2300 	strd	r2, r3, [sp]
 8004eb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f2c0 8150 	blt.w	800515a <_dtoa_r+0x6e2>
 8004eba:	f1ba 0f0e 	cmp.w	sl, #14
 8004ebe:	f300 814c 	bgt.w	800515a <_dtoa_r+0x6e2>
 8004ec2:	4b6a      	ldr	r3, [pc, #424]	; (800506c <_dtoa_r+0x5f4>)
 8004ec4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004ec8:	ed93 7b00 	vldr	d7, [r3]
 8004ecc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004ed4:	f280 80d8 	bge.w	8005088 <_dtoa_r+0x610>
 8004ed8:	f1b9 0f00 	cmp.w	r9, #0
 8004edc:	f300 80d4 	bgt.w	8005088 <_dtoa_r+0x610>
 8004ee0:	f040 825e 	bne.w	80053a0 <_dtoa_r+0x928>
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	4b66      	ldr	r3, [pc, #408]	; (8005080 <_dtoa_r+0x608>)
 8004ee8:	ec51 0b17 	vmov	r0, r1, d7
 8004eec:	f7fb fb38 	bl	8000560 <__aeabi_dmul>
 8004ef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ef4:	f7fb fdba 	bl	8000a6c <__aeabi_dcmpge>
 8004ef8:	464f      	mov	r7, r9
 8004efa:	464e      	mov	r6, r9
 8004efc:	2800      	cmp	r0, #0
 8004efe:	f040 8234 	bne.w	800536a <_dtoa_r+0x8f2>
 8004f02:	2331      	movs	r3, #49	; 0x31
 8004f04:	f10b 0501 	add.w	r5, fp, #1
 8004f08:	f88b 3000 	strb.w	r3, [fp]
 8004f0c:	f10a 0a01 	add.w	sl, sl, #1
 8004f10:	e22f      	b.n	8005372 <_dtoa_r+0x8fa>
 8004f12:	07f2      	lsls	r2, r6, #31
 8004f14:	d505      	bpl.n	8004f22 <_dtoa_r+0x4aa>
 8004f16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f1a:	f7fb fb21 	bl	8000560 <__aeabi_dmul>
 8004f1e:	3501      	adds	r5, #1
 8004f20:	2301      	movs	r3, #1
 8004f22:	1076      	asrs	r6, r6, #1
 8004f24:	3708      	adds	r7, #8
 8004f26:	e772      	b.n	8004e0e <_dtoa_r+0x396>
 8004f28:	2502      	movs	r5, #2
 8004f2a:	e774      	b.n	8004e16 <_dtoa_r+0x39e>
 8004f2c:	f8cd a020 	str.w	sl, [sp, #32]
 8004f30:	464f      	mov	r7, r9
 8004f32:	e791      	b.n	8004e58 <_dtoa_r+0x3e0>
 8004f34:	4b4d      	ldr	r3, [pc, #308]	; (800506c <_dtoa_r+0x5f4>)
 8004f36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004f3a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d047      	beq.n	8004fd4 <_dtoa_r+0x55c>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	2000      	movs	r0, #0
 8004f4a:	494e      	ldr	r1, [pc, #312]	; (8005084 <_dtoa_r+0x60c>)
 8004f4c:	f7fb fc32 	bl	80007b4 <__aeabi_ddiv>
 8004f50:	462a      	mov	r2, r5
 8004f52:	4633      	mov	r3, r6
 8004f54:	f7fb f94c 	bl	80001f0 <__aeabi_dsub>
 8004f58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004f5c:	465d      	mov	r5, fp
 8004f5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f62:	f7fb fdad 	bl	8000ac0 <__aeabi_d2iz>
 8004f66:	4606      	mov	r6, r0
 8004f68:	f7fb fa90 	bl	800048c <__aeabi_i2d>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f74:	f7fb f93c 	bl	80001f0 <__aeabi_dsub>
 8004f78:	3630      	adds	r6, #48	; 0x30
 8004f7a:	f805 6b01 	strb.w	r6, [r5], #1
 8004f7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f82:	e9cd 0100 	strd	r0, r1, [sp]
 8004f86:	f7fb fd5d 	bl	8000a44 <__aeabi_dcmplt>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d163      	bne.n	8005056 <_dtoa_r+0x5de>
 8004f8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f92:	2000      	movs	r0, #0
 8004f94:	4937      	ldr	r1, [pc, #220]	; (8005074 <_dtoa_r+0x5fc>)
 8004f96:	f7fb f92b 	bl	80001f0 <__aeabi_dsub>
 8004f9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f9e:	f7fb fd51 	bl	8000a44 <__aeabi_dcmplt>
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	f040 80b7 	bne.w	8005116 <_dtoa_r+0x69e>
 8004fa8:	eba5 030b 	sub.w	r3, r5, fp
 8004fac:	429f      	cmp	r7, r3
 8004fae:	f77f af7c 	ble.w	8004eaa <_dtoa_r+0x432>
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	4b30      	ldr	r3, [pc, #192]	; (8005078 <_dtoa_r+0x600>)
 8004fb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fba:	f7fb fad1 	bl	8000560 <__aeabi_dmul>
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004fc4:	4b2c      	ldr	r3, [pc, #176]	; (8005078 <_dtoa_r+0x600>)
 8004fc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fca:	f7fb fac9 	bl	8000560 <__aeabi_dmul>
 8004fce:	e9cd 0100 	strd	r0, r1, [sp]
 8004fd2:	e7c4      	b.n	8004f5e <_dtoa_r+0x4e6>
 8004fd4:	462a      	mov	r2, r5
 8004fd6:	4633      	mov	r3, r6
 8004fd8:	f7fb fac2 	bl	8000560 <__aeabi_dmul>
 8004fdc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004fe0:	eb0b 0507 	add.w	r5, fp, r7
 8004fe4:	465e      	mov	r6, fp
 8004fe6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fea:	f7fb fd69 	bl	8000ac0 <__aeabi_d2iz>
 8004fee:	4607      	mov	r7, r0
 8004ff0:	f7fb fa4c 	bl	800048c <__aeabi_i2d>
 8004ff4:	3730      	adds	r7, #48	; 0x30
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ffe:	f7fb f8f7 	bl	80001f0 <__aeabi_dsub>
 8005002:	f806 7b01 	strb.w	r7, [r6], #1
 8005006:	42ae      	cmp	r6, r5
 8005008:	e9cd 0100 	strd	r0, r1, [sp]
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	d126      	bne.n	8005060 <_dtoa_r+0x5e8>
 8005012:	4b1c      	ldr	r3, [pc, #112]	; (8005084 <_dtoa_r+0x60c>)
 8005014:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005018:	f7fb f8ec 	bl	80001f4 <__adddf3>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005024:	f7fb fd2c 	bl	8000a80 <__aeabi_dcmpgt>
 8005028:	2800      	cmp	r0, #0
 800502a:	d174      	bne.n	8005116 <_dtoa_r+0x69e>
 800502c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005030:	2000      	movs	r0, #0
 8005032:	4914      	ldr	r1, [pc, #80]	; (8005084 <_dtoa_r+0x60c>)
 8005034:	f7fb f8dc 	bl	80001f0 <__aeabi_dsub>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005040:	f7fb fd00 	bl	8000a44 <__aeabi_dcmplt>
 8005044:	2800      	cmp	r0, #0
 8005046:	f43f af30 	beq.w	8004eaa <_dtoa_r+0x432>
 800504a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800504e:	2b30      	cmp	r3, #48	; 0x30
 8005050:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005054:	d002      	beq.n	800505c <_dtoa_r+0x5e4>
 8005056:	f8dd a020 	ldr.w	sl, [sp, #32]
 800505a:	e04a      	b.n	80050f2 <_dtoa_r+0x67a>
 800505c:	4615      	mov	r5, r2
 800505e:	e7f4      	b.n	800504a <_dtoa_r+0x5d2>
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <_dtoa_r+0x600>)
 8005062:	f7fb fa7d 	bl	8000560 <__aeabi_dmul>
 8005066:	e9cd 0100 	strd	r0, r1, [sp]
 800506a:	e7bc      	b.n	8004fe6 <_dtoa_r+0x56e>
 800506c:	08005f30 	.word	0x08005f30
 8005070:	08005f08 	.word	0x08005f08
 8005074:	3ff00000 	.word	0x3ff00000
 8005078:	40240000 	.word	0x40240000
 800507c:	401c0000 	.word	0x401c0000
 8005080:	40140000 	.word	0x40140000
 8005084:	3fe00000 	.word	0x3fe00000
 8005088:	e9dd 6700 	ldrd	r6, r7, [sp]
 800508c:	465d      	mov	r5, fp
 800508e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005092:	4630      	mov	r0, r6
 8005094:	4639      	mov	r1, r7
 8005096:	f7fb fb8d 	bl	80007b4 <__aeabi_ddiv>
 800509a:	f7fb fd11 	bl	8000ac0 <__aeabi_d2iz>
 800509e:	4680      	mov	r8, r0
 80050a0:	f7fb f9f4 	bl	800048c <__aeabi_i2d>
 80050a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050a8:	f7fb fa5a 	bl	8000560 <__aeabi_dmul>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4630      	mov	r0, r6
 80050b2:	4639      	mov	r1, r7
 80050b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80050b8:	f7fb f89a 	bl	80001f0 <__aeabi_dsub>
 80050bc:	f805 6b01 	strb.w	r6, [r5], #1
 80050c0:	eba5 060b 	sub.w	r6, r5, fp
 80050c4:	45b1      	cmp	r9, r6
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	d139      	bne.n	8005140 <_dtoa_r+0x6c8>
 80050cc:	f7fb f892 	bl	80001f4 <__adddf3>
 80050d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050d4:	4606      	mov	r6, r0
 80050d6:	460f      	mov	r7, r1
 80050d8:	f7fb fcd2 	bl	8000a80 <__aeabi_dcmpgt>
 80050dc:	b9c8      	cbnz	r0, 8005112 <_dtoa_r+0x69a>
 80050de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050e2:	4630      	mov	r0, r6
 80050e4:	4639      	mov	r1, r7
 80050e6:	f7fb fca3 	bl	8000a30 <__aeabi_dcmpeq>
 80050ea:	b110      	cbz	r0, 80050f2 <_dtoa_r+0x67a>
 80050ec:	f018 0f01 	tst.w	r8, #1
 80050f0:	d10f      	bne.n	8005112 <_dtoa_r+0x69a>
 80050f2:	9904      	ldr	r1, [sp, #16]
 80050f4:	4620      	mov	r0, r4
 80050f6:	f000 facc 	bl	8005692 <_Bfree>
 80050fa:	2300      	movs	r3, #0
 80050fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050fe:	702b      	strb	r3, [r5, #0]
 8005100:	f10a 0301 	add.w	r3, sl, #1
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 8241 	beq.w	8005590 <_dtoa_r+0xb18>
 800510e:	601d      	str	r5, [r3, #0]
 8005110:	e23e      	b.n	8005590 <_dtoa_r+0xb18>
 8005112:	f8cd a020 	str.w	sl, [sp, #32]
 8005116:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800511a:	2a39      	cmp	r2, #57	; 0x39
 800511c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8005120:	d108      	bne.n	8005134 <_dtoa_r+0x6bc>
 8005122:	459b      	cmp	fp, r3
 8005124:	d10a      	bne.n	800513c <_dtoa_r+0x6c4>
 8005126:	9b08      	ldr	r3, [sp, #32]
 8005128:	3301      	adds	r3, #1
 800512a:	9308      	str	r3, [sp, #32]
 800512c:	2330      	movs	r3, #48	; 0x30
 800512e:	f88b 3000 	strb.w	r3, [fp]
 8005132:	465b      	mov	r3, fp
 8005134:	781a      	ldrb	r2, [r3, #0]
 8005136:	3201      	adds	r2, #1
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	e78c      	b.n	8005056 <_dtoa_r+0x5de>
 800513c:	461d      	mov	r5, r3
 800513e:	e7ea      	b.n	8005116 <_dtoa_r+0x69e>
 8005140:	2200      	movs	r2, #0
 8005142:	4b9b      	ldr	r3, [pc, #620]	; (80053b0 <_dtoa_r+0x938>)
 8005144:	f7fb fa0c 	bl	8000560 <__aeabi_dmul>
 8005148:	2200      	movs	r2, #0
 800514a:	2300      	movs	r3, #0
 800514c:	4606      	mov	r6, r0
 800514e:	460f      	mov	r7, r1
 8005150:	f7fb fc6e 	bl	8000a30 <__aeabi_dcmpeq>
 8005154:	2800      	cmp	r0, #0
 8005156:	d09a      	beq.n	800508e <_dtoa_r+0x616>
 8005158:	e7cb      	b.n	80050f2 <_dtoa_r+0x67a>
 800515a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800515c:	2a00      	cmp	r2, #0
 800515e:	f000 808b 	beq.w	8005278 <_dtoa_r+0x800>
 8005162:	9a06      	ldr	r2, [sp, #24]
 8005164:	2a01      	cmp	r2, #1
 8005166:	dc6e      	bgt.n	8005246 <_dtoa_r+0x7ce>
 8005168:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800516a:	2a00      	cmp	r2, #0
 800516c:	d067      	beq.n	800523e <_dtoa_r+0x7c6>
 800516e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005172:	9f07      	ldr	r7, [sp, #28]
 8005174:	9d05      	ldr	r5, [sp, #20]
 8005176:	9a05      	ldr	r2, [sp, #20]
 8005178:	2101      	movs	r1, #1
 800517a:	441a      	add	r2, r3
 800517c:	4620      	mov	r0, r4
 800517e:	9205      	str	r2, [sp, #20]
 8005180:	4498      	add	r8, r3
 8005182:	f000 fb26 	bl	80057d2 <__i2b>
 8005186:	4606      	mov	r6, r0
 8005188:	2d00      	cmp	r5, #0
 800518a:	dd0c      	ble.n	80051a6 <_dtoa_r+0x72e>
 800518c:	f1b8 0f00 	cmp.w	r8, #0
 8005190:	dd09      	ble.n	80051a6 <_dtoa_r+0x72e>
 8005192:	4545      	cmp	r5, r8
 8005194:	9a05      	ldr	r2, [sp, #20]
 8005196:	462b      	mov	r3, r5
 8005198:	bfa8      	it	ge
 800519a:	4643      	movge	r3, r8
 800519c:	1ad2      	subs	r2, r2, r3
 800519e:	9205      	str	r2, [sp, #20]
 80051a0:	1aed      	subs	r5, r5, r3
 80051a2:	eba8 0803 	sub.w	r8, r8, r3
 80051a6:	9b07      	ldr	r3, [sp, #28]
 80051a8:	b1eb      	cbz	r3, 80051e6 <_dtoa_r+0x76e>
 80051aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d067      	beq.n	8005280 <_dtoa_r+0x808>
 80051b0:	b18f      	cbz	r7, 80051d6 <_dtoa_r+0x75e>
 80051b2:	4631      	mov	r1, r6
 80051b4:	463a      	mov	r2, r7
 80051b6:	4620      	mov	r0, r4
 80051b8:	f000 fbaa 	bl	8005910 <__pow5mult>
 80051bc:	9a04      	ldr	r2, [sp, #16]
 80051be:	4601      	mov	r1, r0
 80051c0:	4606      	mov	r6, r0
 80051c2:	4620      	mov	r0, r4
 80051c4:	f000 fb0e 	bl	80057e4 <__multiply>
 80051c8:	9904      	ldr	r1, [sp, #16]
 80051ca:	9008      	str	r0, [sp, #32]
 80051cc:	4620      	mov	r0, r4
 80051ce:	f000 fa60 	bl	8005692 <_Bfree>
 80051d2:	9b08      	ldr	r3, [sp, #32]
 80051d4:	9304      	str	r3, [sp, #16]
 80051d6:	9b07      	ldr	r3, [sp, #28]
 80051d8:	1bda      	subs	r2, r3, r7
 80051da:	d004      	beq.n	80051e6 <_dtoa_r+0x76e>
 80051dc:	9904      	ldr	r1, [sp, #16]
 80051de:	4620      	mov	r0, r4
 80051e0:	f000 fb96 	bl	8005910 <__pow5mult>
 80051e4:	9004      	str	r0, [sp, #16]
 80051e6:	2101      	movs	r1, #1
 80051e8:	4620      	mov	r0, r4
 80051ea:	f000 faf2 	bl	80057d2 <__i2b>
 80051ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051f0:	4607      	mov	r7, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 81d0 	beq.w	8005598 <_dtoa_r+0xb20>
 80051f8:	461a      	mov	r2, r3
 80051fa:	4601      	mov	r1, r0
 80051fc:	4620      	mov	r0, r4
 80051fe:	f000 fb87 	bl	8005910 <__pow5mult>
 8005202:	9b06      	ldr	r3, [sp, #24]
 8005204:	2b01      	cmp	r3, #1
 8005206:	4607      	mov	r7, r0
 8005208:	dc40      	bgt.n	800528c <_dtoa_r+0x814>
 800520a:	9b00      	ldr	r3, [sp, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d139      	bne.n	8005284 <_dtoa_r+0x80c>
 8005210:	9b01      	ldr	r3, [sp, #4]
 8005212:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005216:	2b00      	cmp	r3, #0
 8005218:	d136      	bne.n	8005288 <_dtoa_r+0x810>
 800521a:	9b01      	ldr	r3, [sp, #4]
 800521c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005220:	0d1b      	lsrs	r3, r3, #20
 8005222:	051b      	lsls	r3, r3, #20
 8005224:	b12b      	cbz	r3, 8005232 <_dtoa_r+0x7ba>
 8005226:	9b05      	ldr	r3, [sp, #20]
 8005228:	3301      	adds	r3, #1
 800522a:	9305      	str	r3, [sp, #20]
 800522c:	f108 0801 	add.w	r8, r8, #1
 8005230:	2301      	movs	r3, #1
 8005232:	9307      	str	r3, [sp, #28]
 8005234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005236:	2b00      	cmp	r3, #0
 8005238:	d12a      	bne.n	8005290 <_dtoa_r+0x818>
 800523a:	2001      	movs	r0, #1
 800523c:	e030      	b.n	80052a0 <_dtoa_r+0x828>
 800523e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005240:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005244:	e795      	b.n	8005172 <_dtoa_r+0x6fa>
 8005246:	9b07      	ldr	r3, [sp, #28]
 8005248:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800524c:	42bb      	cmp	r3, r7
 800524e:	bfbf      	itttt	lt
 8005250:	9b07      	ldrlt	r3, [sp, #28]
 8005252:	9707      	strlt	r7, [sp, #28]
 8005254:	1afa      	sublt	r2, r7, r3
 8005256:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005258:	bfbb      	ittet	lt
 800525a:	189b      	addlt	r3, r3, r2
 800525c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800525e:	1bdf      	subge	r7, r3, r7
 8005260:	2700      	movlt	r7, #0
 8005262:	f1b9 0f00 	cmp.w	r9, #0
 8005266:	bfb5      	itete	lt
 8005268:	9b05      	ldrlt	r3, [sp, #20]
 800526a:	9d05      	ldrge	r5, [sp, #20]
 800526c:	eba3 0509 	sublt.w	r5, r3, r9
 8005270:	464b      	movge	r3, r9
 8005272:	bfb8      	it	lt
 8005274:	2300      	movlt	r3, #0
 8005276:	e77e      	b.n	8005176 <_dtoa_r+0x6fe>
 8005278:	9f07      	ldr	r7, [sp, #28]
 800527a:	9d05      	ldr	r5, [sp, #20]
 800527c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800527e:	e783      	b.n	8005188 <_dtoa_r+0x710>
 8005280:	9a07      	ldr	r2, [sp, #28]
 8005282:	e7ab      	b.n	80051dc <_dtoa_r+0x764>
 8005284:	2300      	movs	r3, #0
 8005286:	e7d4      	b.n	8005232 <_dtoa_r+0x7ba>
 8005288:	9b00      	ldr	r3, [sp, #0]
 800528a:	e7d2      	b.n	8005232 <_dtoa_r+0x7ba>
 800528c:	2300      	movs	r3, #0
 800528e:	9307      	str	r3, [sp, #28]
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005296:	6918      	ldr	r0, [r3, #16]
 8005298:	f000 fa4d 	bl	8005736 <__hi0bits>
 800529c:	f1c0 0020 	rsb	r0, r0, #32
 80052a0:	4440      	add	r0, r8
 80052a2:	f010 001f 	ands.w	r0, r0, #31
 80052a6:	d047      	beq.n	8005338 <_dtoa_r+0x8c0>
 80052a8:	f1c0 0320 	rsb	r3, r0, #32
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	dd3b      	ble.n	8005328 <_dtoa_r+0x8b0>
 80052b0:	9b05      	ldr	r3, [sp, #20]
 80052b2:	f1c0 001c 	rsb	r0, r0, #28
 80052b6:	4403      	add	r3, r0
 80052b8:	9305      	str	r3, [sp, #20]
 80052ba:	4405      	add	r5, r0
 80052bc:	4480      	add	r8, r0
 80052be:	9b05      	ldr	r3, [sp, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	dd05      	ble.n	80052d0 <_dtoa_r+0x858>
 80052c4:	461a      	mov	r2, r3
 80052c6:	9904      	ldr	r1, [sp, #16]
 80052c8:	4620      	mov	r0, r4
 80052ca:	f000 fb6f 	bl	80059ac <__lshift>
 80052ce:	9004      	str	r0, [sp, #16]
 80052d0:	f1b8 0f00 	cmp.w	r8, #0
 80052d4:	dd05      	ble.n	80052e2 <_dtoa_r+0x86a>
 80052d6:	4639      	mov	r1, r7
 80052d8:	4642      	mov	r2, r8
 80052da:	4620      	mov	r0, r4
 80052dc:	f000 fb66 	bl	80059ac <__lshift>
 80052e0:	4607      	mov	r7, r0
 80052e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052e4:	b353      	cbz	r3, 800533c <_dtoa_r+0x8c4>
 80052e6:	4639      	mov	r1, r7
 80052e8:	9804      	ldr	r0, [sp, #16]
 80052ea:	f000 fbb3 	bl	8005a54 <__mcmp>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	da24      	bge.n	800533c <_dtoa_r+0x8c4>
 80052f2:	2300      	movs	r3, #0
 80052f4:	220a      	movs	r2, #10
 80052f6:	9904      	ldr	r1, [sp, #16]
 80052f8:	4620      	mov	r0, r4
 80052fa:	f000 f9e1 	bl	80056c0 <__multadd>
 80052fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005300:	9004      	str	r0, [sp, #16]
 8005302:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 814d 	beq.w	80055a6 <_dtoa_r+0xb2e>
 800530c:	2300      	movs	r3, #0
 800530e:	4631      	mov	r1, r6
 8005310:	220a      	movs	r2, #10
 8005312:	4620      	mov	r0, r4
 8005314:	f000 f9d4 	bl	80056c0 <__multadd>
 8005318:	9b02      	ldr	r3, [sp, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	4606      	mov	r6, r0
 800531e:	dc4f      	bgt.n	80053c0 <_dtoa_r+0x948>
 8005320:	9b06      	ldr	r3, [sp, #24]
 8005322:	2b02      	cmp	r3, #2
 8005324:	dd4c      	ble.n	80053c0 <_dtoa_r+0x948>
 8005326:	e011      	b.n	800534c <_dtoa_r+0x8d4>
 8005328:	d0c9      	beq.n	80052be <_dtoa_r+0x846>
 800532a:	9a05      	ldr	r2, [sp, #20]
 800532c:	331c      	adds	r3, #28
 800532e:	441a      	add	r2, r3
 8005330:	9205      	str	r2, [sp, #20]
 8005332:	441d      	add	r5, r3
 8005334:	4498      	add	r8, r3
 8005336:	e7c2      	b.n	80052be <_dtoa_r+0x846>
 8005338:	4603      	mov	r3, r0
 800533a:	e7f6      	b.n	800532a <_dtoa_r+0x8b2>
 800533c:	f1b9 0f00 	cmp.w	r9, #0
 8005340:	dc38      	bgt.n	80053b4 <_dtoa_r+0x93c>
 8005342:	9b06      	ldr	r3, [sp, #24]
 8005344:	2b02      	cmp	r3, #2
 8005346:	dd35      	ble.n	80053b4 <_dtoa_r+0x93c>
 8005348:	f8cd 9008 	str.w	r9, [sp, #8]
 800534c:	9b02      	ldr	r3, [sp, #8]
 800534e:	b963      	cbnz	r3, 800536a <_dtoa_r+0x8f2>
 8005350:	4639      	mov	r1, r7
 8005352:	2205      	movs	r2, #5
 8005354:	4620      	mov	r0, r4
 8005356:	f000 f9b3 	bl	80056c0 <__multadd>
 800535a:	4601      	mov	r1, r0
 800535c:	4607      	mov	r7, r0
 800535e:	9804      	ldr	r0, [sp, #16]
 8005360:	f000 fb78 	bl	8005a54 <__mcmp>
 8005364:	2800      	cmp	r0, #0
 8005366:	f73f adcc 	bgt.w	8004f02 <_dtoa_r+0x48a>
 800536a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800536c:	465d      	mov	r5, fp
 800536e:	ea6f 0a03 	mvn.w	sl, r3
 8005372:	f04f 0900 	mov.w	r9, #0
 8005376:	4639      	mov	r1, r7
 8005378:	4620      	mov	r0, r4
 800537a:	f000 f98a 	bl	8005692 <_Bfree>
 800537e:	2e00      	cmp	r6, #0
 8005380:	f43f aeb7 	beq.w	80050f2 <_dtoa_r+0x67a>
 8005384:	f1b9 0f00 	cmp.w	r9, #0
 8005388:	d005      	beq.n	8005396 <_dtoa_r+0x91e>
 800538a:	45b1      	cmp	r9, r6
 800538c:	d003      	beq.n	8005396 <_dtoa_r+0x91e>
 800538e:	4649      	mov	r1, r9
 8005390:	4620      	mov	r0, r4
 8005392:	f000 f97e 	bl	8005692 <_Bfree>
 8005396:	4631      	mov	r1, r6
 8005398:	4620      	mov	r0, r4
 800539a:	f000 f97a 	bl	8005692 <_Bfree>
 800539e:	e6a8      	b.n	80050f2 <_dtoa_r+0x67a>
 80053a0:	2700      	movs	r7, #0
 80053a2:	463e      	mov	r6, r7
 80053a4:	e7e1      	b.n	800536a <_dtoa_r+0x8f2>
 80053a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80053aa:	463e      	mov	r6, r7
 80053ac:	e5a9      	b.n	8004f02 <_dtoa_r+0x48a>
 80053ae:	bf00      	nop
 80053b0:	40240000 	.word	0x40240000
 80053b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 80fa 	beq.w	80055b4 <_dtoa_r+0xb3c>
 80053c0:	2d00      	cmp	r5, #0
 80053c2:	dd05      	ble.n	80053d0 <_dtoa_r+0x958>
 80053c4:	4631      	mov	r1, r6
 80053c6:	462a      	mov	r2, r5
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 faef 	bl	80059ac <__lshift>
 80053ce:	4606      	mov	r6, r0
 80053d0:	9b07      	ldr	r3, [sp, #28]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d04c      	beq.n	8005470 <_dtoa_r+0x9f8>
 80053d6:	6871      	ldr	r1, [r6, #4]
 80053d8:	4620      	mov	r0, r4
 80053da:	f000 f926 	bl	800562a <_Balloc>
 80053de:	6932      	ldr	r2, [r6, #16]
 80053e0:	3202      	adds	r2, #2
 80053e2:	4605      	mov	r5, r0
 80053e4:	0092      	lsls	r2, r2, #2
 80053e6:	f106 010c 	add.w	r1, r6, #12
 80053ea:	300c      	adds	r0, #12
 80053ec:	f000 f912 	bl	8005614 <memcpy>
 80053f0:	2201      	movs	r2, #1
 80053f2:	4629      	mov	r1, r5
 80053f4:	4620      	mov	r0, r4
 80053f6:	f000 fad9 	bl	80059ac <__lshift>
 80053fa:	9b00      	ldr	r3, [sp, #0]
 80053fc:	f8cd b014 	str.w	fp, [sp, #20]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	46b1      	mov	r9, r6
 8005406:	9307      	str	r3, [sp, #28]
 8005408:	4606      	mov	r6, r0
 800540a:	4639      	mov	r1, r7
 800540c:	9804      	ldr	r0, [sp, #16]
 800540e:	f7ff faa4 	bl	800495a <quorem>
 8005412:	4649      	mov	r1, r9
 8005414:	4605      	mov	r5, r0
 8005416:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800541a:	9804      	ldr	r0, [sp, #16]
 800541c:	f000 fb1a 	bl	8005a54 <__mcmp>
 8005420:	4632      	mov	r2, r6
 8005422:	9000      	str	r0, [sp, #0]
 8005424:	4639      	mov	r1, r7
 8005426:	4620      	mov	r0, r4
 8005428:	f000 fb2e 	bl	8005a88 <__mdiff>
 800542c:	68c3      	ldr	r3, [r0, #12]
 800542e:	4602      	mov	r2, r0
 8005430:	bb03      	cbnz	r3, 8005474 <_dtoa_r+0x9fc>
 8005432:	4601      	mov	r1, r0
 8005434:	9008      	str	r0, [sp, #32]
 8005436:	9804      	ldr	r0, [sp, #16]
 8005438:	f000 fb0c 	bl	8005a54 <__mcmp>
 800543c:	9a08      	ldr	r2, [sp, #32]
 800543e:	4603      	mov	r3, r0
 8005440:	4611      	mov	r1, r2
 8005442:	4620      	mov	r0, r4
 8005444:	9308      	str	r3, [sp, #32]
 8005446:	f000 f924 	bl	8005692 <_Bfree>
 800544a:	9b08      	ldr	r3, [sp, #32]
 800544c:	b9a3      	cbnz	r3, 8005478 <_dtoa_r+0xa00>
 800544e:	9a06      	ldr	r2, [sp, #24]
 8005450:	b992      	cbnz	r2, 8005478 <_dtoa_r+0xa00>
 8005452:	9a07      	ldr	r2, [sp, #28]
 8005454:	b982      	cbnz	r2, 8005478 <_dtoa_r+0xa00>
 8005456:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800545a:	d029      	beq.n	80054b0 <_dtoa_r+0xa38>
 800545c:	9b00      	ldr	r3, [sp, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	dd01      	ble.n	8005466 <_dtoa_r+0x9ee>
 8005462:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005466:	9b05      	ldr	r3, [sp, #20]
 8005468:	1c5d      	adds	r5, r3, #1
 800546a:	f883 8000 	strb.w	r8, [r3]
 800546e:	e782      	b.n	8005376 <_dtoa_r+0x8fe>
 8005470:	4630      	mov	r0, r6
 8005472:	e7c2      	b.n	80053fa <_dtoa_r+0x982>
 8005474:	2301      	movs	r3, #1
 8005476:	e7e3      	b.n	8005440 <_dtoa_r+0x9c8>
 8005478:	9a00      	ldr	r2, [sp, #0]
 800547a:	2a00      	cmp	r2, #0
 800547c:	db04      	blt.n	8005488 <_dtoa_r+0xa10>
 800547e:	d125      	bne.n	80054cc <_dtoa_r+0xa54>
 8005480:	9a06      	ldr	r2, [sp, #24]
 8005482:	bb1a      	cbnz	r2, 80054cc <_dtoa_r+0xa54>
 8005484:	9a07      	ldr	r2, [sp, #28]
 8005486:	bb0a      	cbnz	r2, 80054cc <_dtoa_r+0xa54>
 8005488:	2b00      	cmp	r3, #0
 800548a:	ddec      	ble.n	8005466 <_dtoa_r+0x9ee>
 800548c:	2201      	movs	r2, #1
 800548e:	9904      	ldr	r1, [sp, #16]
 8005490:	4620      	mov	r0, r4
 8005492:	f000 fa8b 	bl	80059ac <__lshift>
 8005496:	4639      	mov	r1, r7
 8005498:	9004      	str	r0, [sp, #16]
 800549a:	f000 fadb 	bl	8005a54 <__mcmp>
 800549e:	2800      	cmp	r0, #0
 80054a0:	dc03      	bgt.n	80054aa <_dtoa_r+0xa32>
 80054a2:	d1e0      	bne.n	8005466 <_dtoa_r+0x9ee>
 80054a4:	f018 0f01 	tst.w	r8, #1
 80054a8:	d0dd      	beq.n	8005466 <_dtoa_r+0x9ee>
 80054aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80054ae:	d1d8      	bne.n	8005462 <_dtoa_r+0x9ea>
 80054b0:	9b05      	ldr	r3, [sp, #20]
 80054b2:	9a05      	ldr	r2, [sp, #20]
 80054b4:	1c5d      	adds	r5, r3, #1
 80054b6:	2339      	movs	r3, #57	; 0x39
 80054b8:	7013      	strb	r3, [r2, #0]
 80054ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80054be:	2b39      	cmp	r3, #57	; 0x39
 80054c0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80054c4:	d04f      	beq.n	8005566 <_dtoa_r+0xaee>
 80054c6:	3301      	adds	r3, #1
 80054c8:	7013      	strb	r3, [r2, #0]
 80054ca:	e754      	b.n	8005376 <_dtoa_r+0x8fe>
 80054cc:	9a05      	ldr	r2, [sp, #20]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f102 0501 	add.w	r5, r2, #1
 80054d4:	dd06      	ble.n	80054e4 <_dtoa_r+0xa6c>
 80054d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80054da:	d0e9      	beq.n	80054b0 <_dtoa_r+0xa38>
 80054dc:	f108 0801 	add.w	r8, r8, #1
 80054e0:	9b05      	ldr	r3, [sp, #20]
 80054e2:	e7c2      	b.n	800546a <_dtoa_r+0x9f2>
 80054e4:	9a02      	ldr	r2, [sp, #8]
 80054e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80054ea:	eba5 030b 	sub.w	r3, r5, fp
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d021      	beq.n	8005536 <_dtoa_r+0xabe>
 80054f2:	2300      	movs	r3, #0
 80054f4:	220a      	movs	r2, #10
 80054f6:	9904      	ldr	r1, [sp, #16]
 80054f8:	4620      	mov	r0, r4
 80054fa:	f000 f8e1 	bl	80056c0 <__multadd>
 80054fe:	45b1      	cmp	r9, r6
 8005500:	9004      	str	r0, [sp, #16]
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	f04f 020a 	mov.w	r2, #10
 800550a:	4649      	mov	r1, r9
 800550c:	4620      	mov	r0, r4
 800550e:	d105      	bne.n	800551c <_dtoa_r+0xaa4>
 8005510:	f000 f8d6 	bl	80056c0 <__multadd>
 8005514:	4681      	mov	r9, r0
 8005516:	4606      	mov	r6, r0
 8005518:	9505      	str	r5, [sp, #20]
 800551a:	e776      	b.n	800540a <_dtoa_r+0x992>
 800551c:	f000 f8d0 	bl	80056c0 <__multadd>
 8005520:	4631      	mov	r1, r6
 8005522:	4681      	mov	r9, r0
 8005524:	2300      	movs	r3, #0
 8005526:	220a      	movs	r2, #10
 8005528:	4620      	mov	r0, r4
 800552a:	f000 f8c9 	bl	80056c0 <__multadd>
 800552e:	4606      	mov	r6, r0
 8005530:	e7f2      	b.n	8005518 <_dtoa_r+0xaa0>
 8005532:	f04f 0900 	mov.w	r9, #0
 8005536:	2201      	movs	r2, #1
 8005538:	9904      	ldr	r1, [sp, #16]
 800553a:	4620      	mov	r0, r4
 800553c:	f000 fa36 	bl	80059ac <__lshift>
 8005540:	4639      	mov	r1, r7
 8005542:	9004      	str	r0, [sp, #16]
 8005544:	f000 fa86 	bl	8005a54 <__mcmp>
 8005548:	2800      	cmp	r0, #0
 800554a:	dcb6      	bgt.n	80054ba <_dtoa_r+0xa42>
 800554c:	d102      	bne.n	8005554 <_dtoa_r+0xadc>
 800554e:	f018 0f01 	tst.w	r8, #1
 8005552:	d1b2      	bne.n	80054ba <_dtoa_r+0xa42>
 8005554:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005558:	2b30      	cmp	r3, #48	; 0x30
 800555a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800555e:	f47f af0a 	bne.w	8005376 <_dtoa_r+0x8fe>
 8005562:	4615      	mov	r5, r2
 8005564:	e7f6      	b.n	8005554 <_dtoa_r+0xadc>
 8005566:	4593      	cmp	fp, r2
 8005568:	d105      	bne.n	8005576 <_dtoa_r+0xafe>
 800556a:	2331      	movs	r3, #49	; 0x31
 800556c:	f10a 0a01 	add.w	sl, sl, #1
 8005570:	f88b 3000 	strb.w	r3, [fp]
 8005574:	e6ff      	b.n	8005376 <_dtoa_r+0x8fe>
 8005576:	4615      	mov	r5, r2
 8005578:	e79f      	b.n	80054ba <_dtoa_r+0xa42>
 800557a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80055e0 <_dtoa_r+0xb68>
 800557e:	e007      	b.n	8005590 <_dtoa_r+0xb18>
 8005580:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005582:	f8df b060 	ldr.w	fp, [pc, #96]	; 80055e4 <_dtoa_r+0xb6c>
 8005586:	b11b      	cbz	r3, 8005590 <_dtoa_r+0xb18>
 8005588:	f10b 0308 	add.w	r3, fp, #8
 800558c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	4658      	mov	r0, fp
 8005592:	b017      	add	sp, #92	; 0x5c
 8005594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005598:	9b06      	ldr	r3, [sp, #24]
 800559a:	2b01      	cmp	r3, #1
 800559c:	f77f ae35 	ble.w	800520a <_dtoa_r+0x792>
 80055a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055a2:	9307      	str	r3, [sp, #28]
 80055a4:	e649      	b.n	800523a <_dtoa_r+0x7c2>
 80055a6:	9b02      	ldr	r3, [sp, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	dc03      	bgt.n	80055b4 <_dtoa_r+0xb3c>
 80055ac:	9b06      	ldr	r3, [sp, #24]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	f73f aecc 	bgt.w	800534c <_dtoa_r+0x8d4>
 80055b4:	465d      	mov	r5, fp
 80055b6:	4639      	mov	r1, r7
 80055b8:	9804      	ldr	r0, [sp, #16]
 80055ba:	f7ff f9ce 	bl	800495a <quorem>
 80055be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80055c2:	f805 8b01 	strb.w	r8, [r5], #1
 80055c6:	9a02      	ldr	r2, [sp, #8]
 80055c8:	eba5 030b 	sub.w	r3, r5, fp
 80055cc:	429a      	cmp	r2, r3
 80055ce:	ddb0      	ble.n	8005532 <_dtoa_r+0xaba>
 80055d0:	2300      	movs	r3, #0
 80055d2:	220a      	movs	r2, #10
 80055d4:	9904      	ldr	r1, [sp, #16]
 80055d6:	4620      	mov	r0, r4
 80055d8:	f000 f872 	bl	80056c0 <__multadd>
 80055dc:	9004      	str	r0, [sp, #16]
 80055de:	e7ea      	b.n	80055b6 <_dtoa_r+0xb3e>
 80055e0:	08005ef8 	.word	0x08005ef8
 80055e4:	08005efa 	.word	0x08005efa

080055e8 <_localeconv_r>:
 80055e8:	4b04      	ldr	r3, [pc, #16]	; (80055fc <_localeconv_r+0x14>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6a18      	ldr	r0, [r3, #32]
 80055ee:	4b04      	ldr	r3, [pc, #16]	; (8005600 <_localeconv_r+0x18>)
 80055f0:	2800      	cmp	r0, #0
 80055f2:	bf08      	it	eq
 80055f4:	4618      	moveq	r0, r3
 80055f6:	30f0      	adds	r0, #240	; 0xf0
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	20000114 	.word	0x20000114
 8005600:	20000178 	.word	0x20000178

08005604 <malloc>:
 8005604:	4b02      	ldr	r3, [pc, #8]	; (8005610 <malloc+0xc>)
 8005606:	4601      	mov	r1, r0
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	f000 baf7 	b.w	8005bfc <_malloc_r>
 800560e:	bf00      	nop
 8005610:	20000114 	.word	0x20000114

08005614 <memcpy>:
 8005614:	b510      	push	{r4, lr}
 8005616:	1e43      	subs	r3, r0, #1
 8005618:	440a      	add	r2, r1
 800561a:	4291      	cmp	r1, r2
 800561c:	d100      	bne.n	8005620 <memcpy+0xc>
 800561e:	bd10      	pop	{r4, pc}
 8005620:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005624:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005628:	e7f7      	b.n	800561a <memcpy+0x6>

0800562a <_Balloc>:
 800562a:	b570      	push	{r4, r5, r6, lr}
 800562c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800562e:	4604      	mov	r4, r0
 8005630:	460e      	mov	r6, r1
 8005632:	b93d      	cbnz	r5, 8005644 <_Balloc+0x1a>
 8005634:	2010      	movs	r0, #16
 8005636:	f7ff ffe5 	bl	8005604 <malloc>
 800563a:	6260      	str	r0, [r4, #36]	; 0x24
 800563c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005640:	6005      	str	r5, [r0, #0]
 8005642:	60c5      	str	r5, [r0, #12]
 8005644:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005646:	68eb      	ldr	r3, [r5, #12]
 8005648:	b183      	cbz	r3, 800566c <_Balloc+0x42>
 800564a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005652:	b9b8      	cbnz	r0, 8005684 <_Balloc+0x5a>
 8005654:	2101      	movs	r1, #1
 8005656:	fa01 f506 	lsl.w	r5, r1, r6
 800565a:	1d6a      	adds	r2, r5, #5
 800565c:	0092      	lsls	r2, r2, #2
 800565e:	4620      	mov	r0, r4
 8005660:	f000 fabe 	bl	8005be0 <_calloc_r>
 8005664:	b160      	cbz	r0, 8005680 <_Balloc+0x56>
 8005666:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800566a:	e00e      	b.n	800568a <_Balloc+0x60>
 800566c:	2221      	movs	r2, #33	; 0x21
 800566e:	2104      	movs	r1, #4
 8005670:	4620      	mov	r0, r4
 8005672:	f000 fab5 	bl	8005be0 <_calloc_r>
 8005676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005678:	60e8      	str	r0, [r5, #12]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e4      	bne.n	800564a <_Balloc+0x20>
 8005680:	2000      	movs	r0, #0
 8005682:	bd70      	pop	{r4, r5, r6, pc}
 8005684:	6802      	ldr	r2, [r0, #0]
 8005686:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800568a:	2300      	movs	r3, #0
 800568c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005690:	e7f7      	b.n	8005682 <_Balloc+0x58>

08005692 <_Bfree>:
 8005692:	b570      	push	{r4, r5, r6, lr}
 8005694:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005696:	4606      	mov	r6, r0
 8005698:	460d      	mov	r5, r1
 800569a:	b93c      	cbnz	r4, 80056ac <_Bfree+0x1a>
 800569c:	2010      	movs	r0, #16
 800569e:	f7ff ffb1 	bl	8005604 <malloc>
 80056a2:	6270      	str	r0, [r6, #36]	; 0x24
 80056a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056a8:	6004      	str	r4, [r0, #0]
 80056aa:	60c4      	str	r4, [r0, #12]
 80056ac:	b13d      	cbz	r5, 80056be <_Bfree+0x2c>
 80056ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80056b0:	686a      	ldr	r2, [r5, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056b8:	6029      	str	r1, [r5, #0]
 80056ba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80056be:	bd70      	pop	{r4, r5, r6, pc}

080056c0 <__multadd>:
 80056c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056c4:	690d      	ldr	r5, [r1, #16]
 80056c6:	461f      	mov	r7, r3
 80056c8:	4606      	mov	r6, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	f101 0c14 	add.w	ip, r1, #20
 80056d0:	2300      	movs	r3, #0
 80056d2:	f8dc 0000 	ldr.w	r0, [ip]
 80056d6:	b281      	uxth	r1, r0
 80056d8:	fb02 7101 	mla	r1, r2, r1, r7
 80056dc:	0c0f      	lsrs	r7, r1, #16
 80056de:	0c00      	lsrs	r0, r0, #16
 80056e0:	fb02 7000 	mla	r0, r2, r0, r7
 80056e4:	b289      	uxth	r1, r1
 80056e6:	3301      	adds	r3, #1
 80056e8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80056ec:	429d      	cmp	r5, r3
 80056ee:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80056f2:	f84c 1b04 	str.w	r1, [ip], #4
 80056f6:	dcec      	bgt.n	80056d2 <__multadd+0x12>
 80056f8:	b1d7      	cbz	r7, 8005730 <__multadd+0x70>
 80056fa:	68a3      	ldr	r3, [r4, #8]
 80056fc:	42ab      	cmp	r3, r5
 80056fe:	dc12      	bgt.n	8005726 <__multadd+0x66>
 8005700:	6861      	ldr	r1, [r4, #4]
 8005702:	4630      	mov	r0, r6
 8005704:	3101      	adds	r1, #1
 8005706:	f7ff ff90 	bl	800562a <_Balloc>
 800570a:	6922      	ldr	r2, [r4, #16]
 800570c:	3202      	adds	r2, #2
 800570e:	f104 010c 	add.w	r1, r4, #12
 8005712:	4680      	mov	r8, r0
 8005714:	0092      	lsls	r2, r2, #2
 8005716:	300c      	adds	r0, #12
 8005718:	f7ff ff7c 	bl	8005614 <memcpy>
 800571c:	4621      	mov	r1, r4
 800571e:	4630      	mov	r0, r6
 8005720:	f7ff ffb7 	bl	8005692 <_Bfree>
 8005724:	4644      	mov	r4, r8
 8005726:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800572a:	3501      	adds	r5, #1
 800572c:	615f      	str	r7, [r3, #20]
 800572e:	6125      	str	r5, [r4, #16]
 8005730:	4620      	mov	r0, r4
 8005732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005736 <__hi0bits>:
 8005736:	0c02      	lsrs	r2, r0, #16
 8005738:	0412      	lsls	r2, r2, #16
 800573a:	4603      	mov	r3, r0
 800573c:	b9b2      	cbnz	r2, 800576c <__hi0bits+0x36>
 800573e:	0403      	lsls	r3, r0, #16
 8005740:	2010      	movs	r0, #16
 8005742:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005746:	bf04      	itt	eq
 8005748:	021b      	lsleq	r3, r3, #8
 800574a:	3008      	addeq	r0, #8
 800574c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005750:	bf04      	itt	eq
 8005752:	011b      	lsleq	r3, r3, #4
 8005754:	3004      	addeq	r0, #4
 8005756:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800575a:	bf04      	itt	eq
 800575c:	009b      	lsleq	r3, r3, #2
 800575e:	3002      	addeq	r0, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	db06      	blt.n	8005772 <__hi0bits+0x3c>
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	d503      	bpl.n	8005770 <__hi0bits+0x3a>
 8005768:	3001      	adds	r0, #1
 800576a:	4770      	bx	lr
 800576c:	2000      	movs	r0, #0
 800576e:	e7e8      	b.n	8005742 <__hi0bits+0xc>
 8005770:	2020      	movs	r0, #32
 8005772:	4770      	bx	lr

08005774 <__lo0bits>:
 8005774:	6803      	ldr	r3, [r0, #0]
 8005776:	f013 0207 	ands.w	r2, r3, #7
 800577a:	4601      	mov	r1, r0
 800577c:	d00b      	beq.n	8005796 <__lo0bits+0x22>
 800577e:	07da      	lsls	r2, r3, #31
 8005780:	d423      	bmi.n	80057ca <__lo0bits+0x56>
 8005782:	0798      	lsls	r0, r3, #30
 8005784:	bf49      	itett	mi
 8005786:	085b      	lsrmi	r3, r3, #1
 8005788:	089b      	lsrpl	r3, r3, #2
 800578a:	2001      	movmi	r0, #1
 800578c:	600b      	strmi	r3, [r1, #0]
 800578e:	bf5c      	itt	pl
 8005790:	600b      	strpl	r3, [r1, #0]
 8005792:	2002      	movpl	r0, #2
 8005794:	4770      	bx	lr
 8005796:	b298      	uxth	r0, r3
 8005798:	b9a8      	cbnz	r0, 80057c6 <__lo0bits+0x52>
 800579a:	0c1b      	lsrs	r3, r3, #16
 800579c:	2010      	movs	r0, #16
 800579e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80057a2:	bf04      	itt	eq
 80057a4:	0a1b      	lsreq	r3, r3, #8
 80057a6:	3008      	addeq	r0, #8
 80057a8:	071a      	lsls	r2, r3, #28
 80057aa:	bf04      	itt	eq
 80057ac:	091b      	lsreq	r3, r3, #4
 80057ae:	3004      	addeq	r0, #4
 80057b0:	079a      	lsls	r2, r3, #30
 80057b2:	bf04      	itt	eq
 80057b4:	089b      	lsreq	r3, r3, #2
 80057b6:	3002      	addeq	r0, #2
 80057b8:	07da      	lsls	r2, r3, #31
 80057ba:	d402      	bmi.n	80057c2 <__lo0bits+0x4e>
 80057bc:	085b      	lsrs	r3, r3, #1
 80057be:	d006      	beq.n	80057ce <__lo0bits+0x5a>
 80057c0:	3001      	adds	r0, #1
 80057c2:	600b      	str	r3, [r1, #0]
 80057c4:	4770      	bx	lr
 80057c6:	4610      	mov	r0, r2
 80057c8:	e7e9      	b.n	800579e <__lo0bits+0x2a>
 80057ca:	2000      	movs	r0, #0
 80057cc:	4770      	bx	lr
 80057ce:	2020      	movs	r0, #32
 80057d0:	4770      	bx	lr

080057d2 <__i2b>:
 80057d2:	b510      	push	{r4, lr}
 80057d4:	460c      	mov	r4, r1
 80057d6:	2101      	movs	r1, #1
 80057d8:	f7ff ff27 	bl	800562a <_Balloc>
 80057dc:	2201      	movs	r2, #1
 80057de:	6144      	str	r4, [r0, #20]
 80057e0:	6102      	str	r2, [r0, #16]
 80057e2:	bd10      	pop	{r4, pc}

080057e4 <__multiply>:
 80057e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e8:	4614      	mov	r4, r2
 80057ea:	690a      	ldr	r2, [r1, #16]
 80057ec:	6923      	ldr	r3, [r4, #16]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	bfb8      	it	lt
 80057f2:	460b      	movlt	r3, r1
 80057f4:	4688      	mov	r8, r1
 80057f6:	bfbc      	itt	lt
 80057f8:	46a0      	movlt	r8, r4
 80057fa:	461c      	movlt	r4, r3
 80057fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005800:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005804:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005808:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800580c:	eb07 0609 	add.w	r6, r7, r9
 8005810:	42b3      	cmp	r3, r6
 8005812:	bfb8      	it	lt
 8005814:	3101      	addlt	r1, #1
 8005816:	f7ff ff08 	bl	800562a <_Balloc>
 800581a:	f100 0514 	add.w	r5, r0, #20
 800581e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005822:	462b      	mov	r3, r5
 8005824:	2200      	movs	r2, #0
 8005826:	4573      	cmp	r3, lr
 8005828:	d316      	bcc.n	8005858 <__multiply+0x74>
 800582a:	f104 0214 	add.w	r2, r4, #20
 800582e:	f108 0114 	add.w	r1, r8, #20
 8005832:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005836:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	9b00      	ldr	r3, [sp, #0]
 800583e:	9201      	str	r2, [sp, #4]
 8005840:	4293      	cmp	r3, r2
 8005842:	d80c      	bhi.n	800585e <__multiply+0x7a>
 8005844:	2e00      	cmp	r6, #0
 8005846:	dd03      	ble.n	8005850 <__multiply+0x6c>
 8005848:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800584c:	2b00      	cmp	r3, #0
 800584e:	d05d      	beq.n	800590c <__multiply+0x128>
 8005850:	6106      	str	r6, [r0, #16]
 8005852:	b003      	add	sp, #12
 8005854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005858:	f843 2b04 	str.w	r2, [r3], #4
 800585c:	e7e3      	b.n	8005826 <__multiply+0x42>
 800585e:	f8b2 b000 	ldrh.w	fp, [r2]
 8005862:	f1bb 0f00 	cmp.w	fp, #0
 8005866:	d023      	beq.n	80058b0 <__multiply+0xcc>
 8005868:	4689      	mov	r9, r1
 800586a:	46ac      	mov	ip, r5
 800586c:	f04f 0800 	mov.w	r8, #0
 8005870:	f859 4b04 	ldr.w	r4, [r9], #4
 8005874:	f8dc a000 	ldr.w	sl, [ip]
 8005878:	b2a3      	uxth	r3, r4
 800587a:	fa1f fa8a 	uxth.w	sl, sl
 800587e:	fb0b a303 	mla	r3, fp, r3, sl
 8005882:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005886:	f8dc 4000 	ldr.w	r4, [ip]
 800588a:	4443      	add	r3, r8
 800588c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005890:	fb0b 840a 	mla	r4, fp, sl, r8
 8005894:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005898:	46e2      	mov	sl, ip
 800589a:	b29b      	uxth	r3, r3
 800589c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80058a0:	454f      	cmp	r7, r9
 80058a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80058a6:	f84a 3b04 	str.w	r3, [sl], #4
 80058aa:	d82b      	bhi.n	8005904 <__multiply+0x120>
 80058ac:	f8cc 8004 	str.w	r8, [ip, #4]
 80058b0:	9b01      	ldr	r3, [sp, #4]
 80058b2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80058b6:	3204      	adds	r2, #4
 80058b8:	f1ba 0f00 	cmp.w	sl, #0
 80058bc:	d020      	beq.n	8005900 <__multiply+0x11c>
 80058be:	682b      	ldr	r3, [r5, #0]
 80058c0:	4689      	mov	r9, r1
 80058c2:	46a8      	mov	r8, r5
 80058c4:	f04f 0b00 	mov.w	fp, #0
 80058c8:	f8b9 c000 	ldrh.w	ip, [r9]
 80058cc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80058d0:	fb0a 440c 	mla	r4, sl, ip, r4
 80058d4:	445c      	add	r4, fp
 80058d6:	46c4      	mov	ip, r8
 80058d8:	b29b      	uxth	r3, r3
 80058da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80058de:	f84c 3b04 	str.w	r3, [ip], #4
 80058e2:	f859 3b04 	ldr.w	r3, [r9], #4
 80058e6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80058ea:	0c1b      	lsrs	r3, r3, #16
 80058ec:	fb0a b303 	mla	r3, sl, r3, fp
 80058f0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80058f4:	454f      	cmp	r7, r9
 80058f6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80058fa:	d805      	bhi.n	8005908 <__multiply+0x124>
 80058fc:	f8c8 3004 	str.w	r3, [r8, #4]
 8005900:	3504      	adds	r5, #4
 8005902:	e79b      	b.n	800583c <__multiply+0x58>
 8005904:	46d4      	mov	ip, sl
 8005906:	e7b3      	b.n	8005870 <__multiply+0x8c>
 8005908:	46e0      	mov	r8, ip
 800590a:	e7dd      	b.n	80058c8 <__multiply+0xe4>
 800590c:	3e01      	subs	r6, #1
 800590e:	e799      	b.n	8005844 <__multiply+0x60>

08005910 <__pow5mult>:
 8005910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005914:	4615      	mov	r5, r2
 8005916:	f012 0203 	ands.w	r2, r2, #3
 800591a:	4606      	mov	r6, r0
 800591c:	460f      	mov	r7, r1
 800591e:	d007      	beq.n	8005930 <__pow5mult+0x20>
 8005920:	3a01      	subs	r2, #1
 8005922:	4c21      	ldr	r4, [pc, #132]	; (80059a8 <__pow5mult+0x98>)
 8005924:	2300      	movs	r3, #0
 8005926:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800592a:	f7ff fec9 	bl	80056c0 <__multadd>
 800592e:	4607      	mov	r7, r0
 8005930:	10ad      	asrs	r5, r5, #2
 8005932:	d035      	beq.n	80059a0 <__pow5mult+0x90>
 8005934:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005936:	b93c      	cbnz	r4, 8005948 <__pow5mult+0x38>
 8005938:	2010      	movs	r0, #16
 800593a:	f7ff fe63 	bl	8005604 <malloc>
 800593e:	6270      	str	r0, [r6, #36]	; 0x24
 8005940:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005944:	6004      	str	r4, [r0, #0]
 8005946:	60c4      	str	r4, [r0, #12]
 8005948:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800594c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005950:	b94c      	cbnz	r4, 8005966 <__pow5mult+0x56>
 8005952:	f240 2171 	movw	r1, #625	; 0x271
 8005956:	4630      	mov	r0, r6
 8005958:	f7ff ff3b 	bl	80057d2 <__i2b>
 800595c:	2300      	movs	r3, #0
 800595e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005962:	4604      	mov	r4, r0
 8005964:	6003      	str	r3, [r0, #0]
 8005966:	f04f 0800 	mov.w	r8, #0
 800596a:	07eb      	lsls	r3, r5, #31
 800596c:	d50a      	bpl.n	8005984 <__pow5mult+0x74>
 800596e:	4639      	mov	r1, r7
 8005970:	4622      	mov	r2, r4
 8005972:	4630      	mov	r0, r6
 8005974:	f7ff ff36 	bl	80057e4 <__multiply>
 8005978:	4639      	mov	r1, r7
 800597a:	4681      	mov	r9, r0
 800597c:	4630      	mov	r0, r6
 800597e:	f7ff fe88 	bl	8005692 <_Bfree>
 8005982:	464f      	mov	r7, r9
 8005984:	106d      	asrs	r5, r5, #1
 8005986:	d00b      	beq.n	80059a0 <__pow5mult+0x90>
 8005988:	6820      	ldr	r0, [r4, #0]
 800598a:	b938      	cbnz	r0, 800599c <__pow5mult+0x8c>
 800598c:	4622      	mov	r2, r4
 800598e:	4621      	mov	r1, r4
 8005990:	4630      	mov	r0, r6
 8005992:	f7ff ff27 	bl	80057e4 <__multiply>
 8005996:	6020      	str	r0, [r4, #0]
 8005998:	f8c0 8000 	str.w	r8, [r0]
 800599c:	4604      	mov	r4, r0
 800599e:	e7e4      	b.n	800596a <__pow5mult+0x5a>
 80059a0:	4638      	mov	r0, r7
 80059a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059a6:	bf00      	nop
 80059a8:	08005ff8 	.word	0x08005ff8

080059ac <__lshift>:
 80059ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b0:	460c      	mov	r4, r1
 80059b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059b6:	6923      	ldr	r3, [r4, #16]
 80059b8:	6849      	ldr	r1, [r1, #4]
 80059ba:	eb0a 0903 	add.w	r9, sl, r3
 80059be:	68a3      	ldr	r3, [r4, #8]
 80059c0:	4607      	mov	r7, r0
 80059c2:	4616      	mov	r6, r2
 80059c4:	f109 0501 	add.w	r5, r9, #1
 80059c8:	42ab      	cmp	r3, r5
 80059ca:	db32      	blt.n	8005a32 <__lshift+0x86>
 80059cc:	4638      	mov	r0, r7
 80059ce:	f7ff fe2c 	bl	800562a <_Balloc>
 80059d2:	2300      	movs	r3, #0
 80059d4:	4680      	mov	r8, r0
 80059d6:	f100 0114 	add.w	r1, r0, #20
 80059da:	461a      	mov	r2, r3
 80059dc:	4553      	cmp	r3, sl
 80059de:	db2b      	blt.n	8005a38 <__lshift+0x8c>
 80059e0:	6920      	ldr	r0, [r4, #16]
 80059e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059e6:	f104 0314 	add.w	r3, r4, #20
 80059ea:	f016 021f 	ands.w	r2, r6, #31
 80059ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80059f6:	d025      	beq.n	8005a44 <__lshift+0x98>
 80059f8:	f1c2 0e20 	rsb	lr, r2, #32
 80059fc:	2000      	movs	r0, #0
 80059fe:	681e      	ldr	r6, [r3, #0]
 8005a00:	468a      	mov	sl, r1
 8005a02:	4096      	lsls	r6, r2
 8005a04:	4330      	orrs	r0, r6
 8005a06:	f84a 0b04 	str.w	r0, [sl], #4
 8005a0a:	f853 0b04 	ldr.w	r0, [r3], #4
 8005a0e:	459c      	cmp	ip, r3
 8005a10:	fa20 f00e 	lsr.w	r0, r0, lr
 8005a14:	d814      	bhi.n	8005a40 <__lshift+0x94>
 8005a16:	6048      	str	r0, [r1, #4]
 8005a18:	b108      	cbz	r0, 8005a1e <__lshift+0x72>
 8005a1a:	f109 0502 	add.w	r5, r9, #2
 8005a1e:	3d01      	subs	r5, #1
 8005a20:	4638      	mov	r0, r7
 8005a22:	f8c8 5010 	str.w	r5, [r8, #16]
 8005a26:	4621      	mov	r1, r4
 8005a28:	f7ff fe33 	bl	8005692 <_Bfree>
 8005a2c:	4640      	mov	r0, r8
 8005a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a32:	3101      	adds	r1, #1
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	e7c7      	b.n	80059c8 <__lshift+0x1c>
 8005a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	e7cd      	b.n	80059dc <__lshift+0x30>
 8005a40:	4651      	mov	r1, sl
 8005a42:	e7dc      	b.n	80059fe <__lshift+0x52>
 8005a44:	3904      	subs	r1, #4
 8005a46:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a4a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a4e:	459c      	cmp	ip, r3
 8005a50:	d8f9      	bhi.n	8005a46 <__lshift+0x9a>
 8005a52:	e7e4      	b.n	8005a1e <__lshift+0x72>

08005a54 <__mcmp>:
 8005a54:	6903      	ldr	r3, [r0, #16]
 8005a56:	690a      	ldr	r2, [r1, #16]
 8005a58:	1a9b      	subs	r3, r3, r2
 8005a5a:	b530      	push	{r4, r5, lr}
 8005a5c:	d10c      	bne.n	8005a78 <__mcmp+0x24>
 8005a5e:	0092      	lsls	r2, r2, #2
 8005a60:	3014      	adds	r0, #20
 8005a62:	3114      	adds	r1, #20
 8005a64:	1884      	adds	r4, r0, r2
 8005a66:	4411      	add	r1, r2
 8005a68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a70:	4295      	cmp	r5, r2
 8005a72:	d003      	beq.n	8005a7c <__mcmp+0x28>
 8005a74:	d305      	bcc.n	8005a82 <__mcmp+0x2e>
 8005a76:	2301      	movs	r3, #1
 8005a78:	4618      	mov	r0, r3
 8005a7a:	bd30      	pop	{r4, r5, pc}
 8005a7c:	42a0      	cmp	r0, r4
 8005a7e:	d3f3      	bcc.n	8005a68 <__mcmp+0x14>
 8005a80:	e7fa      	b.n	8005a78 <__mcmp+0x24>
 8005a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a86:	e7f7      	b.n	8005a78 <__mcmp+0x24>

08005a88 <__mdiff>:
 8005a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a8c:	460d      	mov	r5, r1
 8005a8e:	4607      	mov	r7, r0
 8005a90:	4611      	mov	r1, r2
 8005a92:	4628      	mov	r0, r5
 8005a94:	4614      	mov	r4, r2
 8005a96:	f7ff ffdd 	bl	8005a54 <__mcmp>
 8005a9a:	1e06      	subs	r6, r0, #0
 8005a9c:	d108      	bne.n	8005ab0 <__mdiff+0x28>
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4638      	mov	r0, r7
 8005aa2:	f7ff fdc2 	bl	800562a <_Balloc>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab0:	bfa4      	itt	ge
 8005ab2:	4623      	movge	r3, r4
 8005ab4:	462c      	movge	r4, r5
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	6861      	ldr	r1, [r4, #4]
 8005aba:	bfa6      	itte	ge
 8005abc:	461d      	movge	r5, r3
 8005abe:	2600      	movge	r6, #0
 8005ac0:	2601      	movlt	r6, #1
 8005ac2:	f7ff fdb2 	bl	800562a <_Balloc>
 8005ac6:	692b      	ldr	r3, [r5, #16]
 8005ac8:	60c6      	str	r6, [r0, #12]
 8005aca:	6926      	ldr	r6, [r4, #16]
 8005acc:	f105 0914 	add.w	r9, r5, #20
 8005ad0:	f104 0214 	add.w	r2, r4, #20
 8005ad4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005ad8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005adc:	f100 0514 	add.w	r5, r0, #20
 8005ae0:	f04f 0e00 	mov.w	lr, #0
 8005ae4:	f852 ab04 	ldr.w	sl, [r2], #4
 8005ae8:	f859 4b04 	ldr.w	r4, [r9], #4
 8005aec:	fa1e f18a 	uxtah	r1, lr, sl
 8005af0:	b2a3      	uxth	r3, r4
 8005af2:	1ac9      	subs	r1, r1, r3
 8005af4:	0c23      	lsrs	r3, r4, #16
 8005af6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005afa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005afe:	b289      	uxth	r1, r1
 8005b00:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005b04:	45c8      	cmp	r8, r9
 8005b06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005b0a:	4694      	mov	ip, r2
 8005b0c:	f845 3b04 	str.w	r3, [r5], #4
 8005b10:	d8e8      	bhi.n	8005ae4 <__mdiff+0x5c>
 8005b12:	45bc      	cmp	ip, r7
 8005b14:	d304      	bcc.n	8005b20 <__mdiff+0x98>
 8005b16:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005b1a:	b183      	cbz	r3, 8005b3e <__mdiff+0xb6>
 8005b1c:	6106      	str	r6, [r0, #16]
 8005b1e:	e7c5      	b.n	8005aac <__mdiff+0x24>
 8005b20:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005b24:	fa1e f381 	uxtah	r3, lr, r1
 8005b28:	141a      	asrs	r2, r3, #16
 8005b2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b34:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005b38:	f845 3b04 	str.w	r3, [r5], #4
 8005b3c:	e7e9      	b.n	8005b12 <__mdiff+0x8a>
 8005b3e:	3e01      	subs	r6, #1
 8005b40:	e7e9      	b.n	8005b16 <__mdiff+0x8e>

08005b42 <__d2b>:
 8005b42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b46:	460e      	mov	r6, r1
 8005b48:	2101      	movs	r1, #1
 8005b4a:	ec59 8b10 	vmov	r8, r9, d0
 8005b4e:	4615      	mov	r5, r2
 8005b50:	f7ff fd6b 	bl	800562a <_Balloc>
 8005b54:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005b58:	4607      	mov	r7, r0
 8005b5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b5e:	bb34      	cbnz	r4, 8005bae <__d2b+0x6c>
 8005b60:	9301      	str	r3, [sp, #4]
 8005b62:	f1b8 0300 	subs.w	r3, r8, #0
 8005b66:	d027      	beq.n	8005bb8 <__d2b+0x76>
 8005b68:	a802      	add	r0, sp, #8
 8005b6a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005b6e:	f7ff fe01 	bl	8005774 <__lo0bits>
 8005b72:	9900      	ldr	r1, [sp, #0]
 8005b74:	b1f0      	cbz	r0, 8005bb4 <__d2b+0x72>
 8005b76:	9a01      	ldr	r2, [sp, #4]
 8005b78:	f1c0 0320 	rsb	r3, r0, #32
 8005b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b80:	430b      	orrs	r3, r1
 8005b82:	40c2      	lsrs	r2, r0
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	9201      	str	r2, [sp, #4]
 8005b88:	9b01      	ldr	r3, [sp, #4]
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	bf14      	ite	ne
 8005b90:	2102      	movne	r1, #2
 8005b92:	2101      	moveq	r1, #1
 8005b94:	6139      	str	r1, [r7, #16]
 8005b96:	b1c4      	cbz	r4, 8005bca <__d2b+0x88>
 8005b98:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005b9c:	4404      	add	r4, r0
 8005b9e:	6034      	str	r4, [r6, #0]
 8005ba0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ba4:	6028      	str	r0, [r5, #0]
 8005ba6:	4638      	mov	r0, r7
 8005ba8:	b003      	add	sp, #12
 8005baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bb2:	e7d5      	b.n	8005b60 <__d2b+0x1e>
 8005bb4:	6179      	str	r1, [r7, #20]
 8005bb6:	e7e7      	b.n	8005b88 <__d2b+0x46>
 8005bb8:	a801      	add	r0, sp, #4
 8005bba:	f7ff fddb 	bl	8005774 <__lo0bits>
 8005bbe:	9b01      	ldr	r3, [sp, #4]
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	6139      	str	r1, [r7, #16]
 8005bc6:	3020      	adds	r0, #32
 8005bc8:	e7e5      	b.n	8005b96 <__d2b+0x54>
 8005bca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005bce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005bd2:	6030      	str	r0, [r6, #0]
 8005bd4:	6918      	ldr	r0, [r3, #16]
 8005bd6:	f7ff fdae 	bl	8005736 <__hi0bits>
 8005bda:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005bde:	e7e1      	b.n	8005ba4 <__d2b+0x62>

08005be0 <_calloc_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	fb02 f401 	mul.w	r4, r2, r1
 8005be6:	4621      	mov	r1, r4
 8005be8:	f000 f808 	bl	8005bfc <_malloc_r>
 8005bec:	4605      	mov	r5, r0
 8005bee:	b118      	cbz	r0, 8005bf8 <_calloc_r+0x18>
 8005bf0:	4622      	mov	r2, r4
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	f7fe fb60 	bl	80042b8 <memset>
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	bd38      	pop	{r3, r4, r5, pc}

08005bfc <_malloc_r>:
 8005bfc:	b570      	push	{r4, r5, r6, lr}
 8005bfe:	1ccd      	adds	r5, r1, #3
 8005c00:	f025 0503 	bic.w	r5, r5, #3
 8005c04:	3508      	adds	r5, #8
 8005c06:	2d0c      	cmp	r5, #12
 8005c08:	bf38      	it	cc
 8005c0a:	250c      	movcc	r5, #12
 8005c0c:	2d00      	cmp	r5, #0
 8005c0e:	4606      	mov	r6, r0
 8005c10:	db01      	blt.n	8005c16 <_malloc_r+0x1a>
 8005c12:	42a9      	cmp	r1, r5
 8005c14:	d903      	bls.n	8005c1e <_malloc_r+0x22>
 8005c16:	230c      	movs	r3, #12
 8005c18:	6033      	str	r3, [r6, #0]
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	bd70      	pop	{r4, r5, r6, pc}
 8005c1e:	f000 f869 	bl	8005cf4 <__malloc_lock>
 8005c22:	4a21      	ldr	r2, [pc, #132]	; (8005ca8 <_malloc_r+0xac>)
 8005c24:	6814      	ldr	r4, [r2, #0]
 8005c26:	4621      	mov	r1, r4
 8005c28:	b991      	cbnz	r1, 8005c50 <_malloc_r+0x54>
 8005c2a:	4c20      	ldr	r4, [pc, #128]	; (8005cac <_malloc_r+0xb0>)
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	b91b      	cbnz	r3, 8005c38 <_malloc_r+0x3c>
 8005c30:	4630      	mov	r0, r6
 8005c32:	f000 f83d 	bl	8005cb0 <_sbrk_r>
 8005c36:	6020      	str	r0, [r4, #0]
 8005c38:	4629      	mov	r1, r5
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f000 f838 	bl	8005cb0 <_sbrk_r>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d124      	bne.n	8005c8e <_malloc_r+0x92>
 8005c44:	230c      	movs	r3, #12
 8005c46:	6033      	str	r3, [r6, #0]
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f000 f854 	bl	8005cf6 <__malloc_unlock>
 8005c4e:	e7e4      	b.n	8005c1a <_malloc_r+0x1e>
 8005c50:	680b      	ldr	r3, [r1, #0]
 8005c52:	1b5b      	subs	r3, r3, r5
 8005c54:	d418      	bmi.n	8005c88 <_malloc_r+0x8c>
 8005c56:	2b0b      	cmp	r3, #11
 8005c58:	d90f      	bls.n	8005c7a <_malloc_r+0x7e>
 8005c5a:	600b      	str	r3, [r1, #0]
 8005c5c:	50cd      	str	r5, [r1, r3]
 8005c5e:	18cc      	adds	r4, r1, r3
 8005c60:	4630      	mov	r0, r6
 8005c62:	f000 f848 	bl	8005cf6 <__malloc_unlock>
 8005c66:	f104 000b 	add.w	r0, r4, #11
 8005c6a:	1d23      	adds	r3, r4, #4
 8005c6c:	f020 0007 	bic.w	r0, r0, #7
 8005c70:	1ac3      	subs	r3, r0, r3
 8005c72:	d0d3      	beq.n	8005c1c <_malloc_r+0x20>
 8005c74:	425a      	negs	r2, r3
 8005c76:	50e2      	str	r2, [r4, r3]
 8005c78:	e7d0      	b.n	8005c1c <_malloc_r+0x20>
 8005c7a:	428c      	cmp	r4, r1
 8005c7c:	684b      	ldr	r3, [r1, #4]
 8005c7e:	bf16      	itet	ne
 8005c80:	6063      	strne	r3, [r4, #4]
 8005c82:	6013      	streq	r3, [r2, #0]
 8005c84:	460c      	movne	r4, r1
 8005c86:	e7eb      	b.n	8005c60 <_malloc_r+0x64>
 8005c88:	460c      	mov	r4, r1
 8005c8a:	6849      	ldr	r1, [r1, #4]
 8005c8c:	e7cc      	b.n	8005c28 <_malloc_r+0x2c>
 8005c8e:	1cc4      	adds	r4, r0, #3
 8005c90:	f024 0403 	bic.w	r4, r4, #3
 8005c94:	42a0      	cmp	r0, r4
 8005c96:	d005      	beq.n	8005ca4 <_malloc_r+0xa8>
 8005c98:	1a21      	subs	r1, r4, r0
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	f000 f808 	bl	8005cb0 <_sbrk_r>
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d0cf      	beq.n	8005c44 <_malloc_r+0x48>
 8005ca4:	6025      	str	r5, [r4, #0]
 8005ca6:	e7db      	b.n	8005c60 <_malloc_r+0x64>
 8005ca8:	20000304 	.word	0x20000304
 8005cac:	20000308 	.word	0x20000308

08005cb0 <_sbrk_r>:
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4c06      	ldr	r4, [pc, #24]	; (8005ccc <_sbrk_r+0x1c>)
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4605      	mov	r5, r0
 8005cb8:	4608      	mov	r0, r1
 8005cba:	6023      	str	r3, [r4, #0]
 8005cbc:	f7fe f9cc 	bl	8004058 <_sbrk>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	d102      	bne.n	8005cca <_sbrk_r+0x1a>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	b103      	cbz	r3, 8005cca <_sbrk_r+0x1a>
 8005cc8:	602b      	str	r3, [r5, #0]
 8005cca:	bd38      	pop	{r3, r4, r5, pc}
 8005ccc:	2000057c 	.word	0x2000057c

08005cd0 <__ascii_mbtowc>:
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	b901      	cbnz	r1, 8005cd6 <__ascii_mbtowc+0x6>
 8005cd4:	a901      	add	r1, sp, #4
 8005cd6:	b142      	cbz	r2, 8005cea <__ascii_mbtowc+0x1a>
 8005cd8:	b14b      	cbz	r3, 8005cee <__ascii_mbtowc+0x1e>
 8005cda:	7813      	ldrb	r3, [r2, #0]
 8005cdc:	600b      	str	r3, [r1, #0]
 8005cde:	7812      	ldrb	r2, [r2, #0]
 8005ce0:	1c10      	adds	r0, r2, #0
 8005ce2:	bf18      	it	ne
 8005ce4:	2001      	movne	r0, #1
 8005ce6:	b002      	add	sp, #8
 8005ce8:	4770      	bx	lr
 8005cea:	4610      	mov	r0, r2
 8005cec:	e7fb      	b.n	8005ce6 <__ascii_mbtowc+0x16>
 8005cee:	f06f 0001 	mvn.w	r0, #1
 8005cf2:	e7f8      	b.n	8005ce6 <__ascii_mbtowc+0x16>

08005cf4 <__malloc_lock>:
 8005cf4:	4770      	bx	lr

08005cf6 <__malloc_unlock>:
 8005cf6:	4770      	bx	lr

08005cf8 <__ascii_wctomb>:
 8005cf8:	b149      	cbz	r1, 8005d0e <__ascii_wctomb+0x16>
 8005cfa:	2aff      	cmp	r2, #255	; 0xff
 8005cfc:	bf85      	ittet	hi
 8005cfe:	238a      	movhi	r3, #138	; 0x8a
 8005d00:	6003      	strhi	r3, [r0, #0]
 8005d02:	700a      	strbls	r2, [r1, #0]
 8005d04:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005d08:	bf98      	it	ls
 8005d0a:	2001      	movls	r0, #1
 8005d0c:	4770      	bx	lr
 8005d0e:	4608      	mov	r0, r1
 8005d10:	4770      	bx	lr
	...

08005d14 <_init>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	bf00      	nop
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr

08005d20 <_fini>:
 8005d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d22:	bf00      	nop
 8005d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d26:	bc08      	pop	{r3}
 8005d28:	469e      	mov	lr, r3
 8005d2a:	4770      	bx	lr
