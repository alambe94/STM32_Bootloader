
STM32_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004574  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08004710  08004710  00014710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004af0  08004af0  000202e0  2**0
                  CONTENTS
  4 .ARM          00000008  08004af0  08004af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004af8  08004af8  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004afc  08004afc  00014afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  08004b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  200002e0  08004de0  000202e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08004de0  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce28  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a2f  00000000  00000000  0002d138  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004bc1  00000000  00000000  0002fb67  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000780  00000000  00000000  00034728  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000e40  00000000  00000000  00034ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001610c  00000000  00000000  00035ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000a061  00000000  00000000  0004bdf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000853b1  00000000  00000000  00055e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000db206  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d04  00000000  00000000  000db284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002e0 	.word	0x200002e0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080046f4 	.word	0x080046f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002e4 	.word	0x200002e4
 80001d4:	080046f4 	.word	0x080046f4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_uldivmod>:
 8000b10:	b953      	cbnz	r3, 8000b28 <__aeabi_uldivmod+0x18>
 8000b12:	b94a      	cbnz	r2, 8000b28 <__aeabi_uldivmod+0x18>
 8000b14:	2900      	cmp	r1, #0
 8000b16:	bf08      	it	eq
 8000b18:	2800      	cmpeq	r0, #0
 8000b1a:	bf1c      	itt	ne
 8000b1c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b20:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b24:	f000 b972 	b.w	8000e0c <__aeabi_idiv0>
 8000b28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b30:	f000 f806 	bl	8000b40 <__udivmoddi4>
 8000b34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b3c:	b004      	add	sp, #16
 8000b3e:	4770      	bx	lr

08000b40 <__udivmoddi4>:
 8000b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b44:	9e08      	ldr	r6, [sp, #32]
 8000b46:	4604      	mov	r4, r0
 8000b48:	4688      	mov	r8, r1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d14b      	bne.n	8000be6 <__udivmoddi4+0xa6>
 8000b4e:	428a      	cmp	r2, r1
 8000b50:	4615      	mov	r5, r2
 8000b52:	d967      	bls.n	8000c24 <__udivmoddi4+0xe4>
 8000b54:	fab2 f282 	clz	r2, r2
 8000b58:	b14a      	cbz	r2, 8000b6e <__udivmoddi4+0x2e>
 8000b5a:	f1c2 0720 	rsb	r7, r2, #32
 8000b5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b62:	fa20 f707 	lsr.w	r7, r0, r7
 8000b66:	4095      	lsls	r5, r2
 8000b68:	ea47 0803 	orr.w	r8, r7, r3
 8000b6c:	4094      	lsls	r4, r2
 8000b6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b72:	0c23      	lsrs	r3, r4, #16
 8000b74:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b78:	fa1f fc85 	uxth.w	ip, r5
 8000b7c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b80:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b84:	fb07 f10c 	mul.w	r1, r7, ip
 8000b88:	4299      	cmp	r1, r3
 8000b8a:	d909      	bls.n	8000ba0 <__udivmoddi4+0x60>
 8000b8c:	18eb      	adds	r3, r5, r3
 8000b8e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b92:	f080 811b 	bcs.w	8000dcc <__udivmoddi4+0x28c>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 8118 	bls.w	8000dcc <__udivmoddi4+0x28c>
 8000b9c:	3f02      	subs	r7, #2
 8000b9e:	442b      	add	r3, r5
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb4:	45a4      	cmp	ip, r4
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x8c>
 8000bb8:	192c      	adds	r4, r5, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bbe:	f080 8107 	bcs.w	8000dd0 <__udivmoddi4+0x290>
 8000bc2:	45a4      	cmp	ip, r4
 8000bc4:	f240 8104 	bls.w	8000dd0 <__udivmoddi4+0x290>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	442c      	add	r4, r5
 8000bcc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd0:	eba4 040c 	sub.w	r4, r4, ip
 8000bd4:	2700      	movs	r7, #0
 8000bd6:	b11e      	cbz	r6, 8000be0 <__udivmoddi4+0xa0>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c6 4300 	strd	r4, r3, [r6]
 8000be0:	4639      	mov	r1, r7
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xbe>
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	f000 80eb 	beq.w	8000dc6 <__udivmoddi4+0x286>
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf6:	4638      	mov	r0, r7
 8000bf8:	4639      	mov	r1, r7
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f783 	clz	r7, r3
 8000c02:	2f00      	cmp	r7, #0
 8000c04:	d147      	bne.n	8000c96 <__udivmoddi4+0x156>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd0>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80fa 	bhi.w	8000e04 <__udivmoddi4+0x2c4>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	4698      	mov	r8, r3
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa0>
 8000c1e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xe8>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 808f 	bne.w	8000d50 <__udivmoddi4+0x210>
 8000c32:	1b49      	subs	r1, r1, r5
 8000c34:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c38:	fa1f f885 	uxth.w	r8, r5
 8000c3c:	2701      	movs	r7, #1
 8000c3e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d907      	bls.n	8000c64 <__udivmoddi4+0x124>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x122>
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	f200 80cd 	bhi.w	8000dfc <__udivmoddi4+0x2bc>
 8000c62:	4684      	mov	ip, r0
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	b2a3      	uxth	r3, r4
 8000c68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c70:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c74:	fb08 f800 	mul.w	r8, r8, r0
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0x14c>
 8000c7c:	192c      	adds	r4, r5, r4
 8000c7e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x14a>
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	f200 80b6 	bhi.w	8000df6 <__udivmoddi4+0x2b6>
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	eba4 0408 	sub.w	r4, r4, r8
 8000c90:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c94:	e79f      	b.n	8000bd6 <__udivmoddi4+0x96>
 8000c96:	f1c7 0c20 	rsb	ip, r7, #32
 8000c9a:	40bb      	lsls	r3, r7
 8000c9c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca4:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cac:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb4:	4325      	orrs	r5, r4
 8000cb6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cba:	0c2c      	lsrs	r4, r5, #16
 8000cbc:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc0:	fa1f fa8e 	uxth.w	sl, lr
 8000cc4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc8:	fb09 f40a 	mul.w	r4, r9, sl
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd6:	d90b      	bls.n	8000cf0 <__udivmoddi4+0x1b0>
 8000cd8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cdc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ce0:	f080 8087 	bcs.w	8000df2 <__udivmoddi4+0x2b2>
 8000ce4:	429c      	cmp	r4, r3
 8000ce6:	f240 8084 	bls.w	8000df2 <__udivmoddi4+0x2b2>
 8000cea:	f1a9 0902 	sub.w	r9, r9, #2
 8000cee:	4473      	add	r3, lr
 8000cf0:	1b1b      	subs	r3, r3, r4
 8000cf2:	b2ad      	uxth	r5, r5
 8000cf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cfc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d00:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d04:	45a2      	cmp	sl, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x1da>
 8000d08:	eb1e 0404 	adds.w	r4, lr, r4
 8000d0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d10:	d26b      	bcs.n	8000dea <__udivmoddi4+0x2aa>
 8000d12:	45a2      	cmp	sl, r4
 8000d14:	d969      	bls.n	8000dea <__udivmoddi4+0x2aa>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4474      	add	r4, lr
 8000d1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d22:	eba4 040a 	sub.w	r4, r4, sl
 8000d26:	454c      	cmp	r4, r9
 8000d28:	46c2      	mov	sl, r8
 8000d2a:	464b      	mov	r3, r9
 8000d2c:	d354      	bcc.n	8000dd8 <__udivmoddi4+0x298>
 8000d2e:	d051      	beq.n	8000dd4 <__udivmoddi4+0x294>
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d069      	beq.n	8000e08 <__udivmoddi4+0x2c8>
 8000d34:	ebb1 050a 	subs.w	r5, r1, sl
 8000d38:	eb64 0403 	sbc.w	r4, r4, r3
 8000d3c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d40:	40fd      	lsrs	r5, r7
 8000d42:	40fc      	lsrs	r4, r7
 8000d44:	ea4c 0505 	orr.w	r5, ip, r5
 8000d48:	e9c6 5400 	strd	r5, r4, [r6]
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	e747      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f703 	lsr.w	r7, r0, r3
 8000d58:	4095      	lsls	r5, r2
 8000d5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d66:	4338      	orrs	r0, r7
 8000d68:	0c01      	lsrs	r1, r0, #16
 8000d6a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6e:	fa1f f885 	uxth.w	r8, r5
 8000d72:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7a:	fb07 f308 	mul.w	r3, r7, r8
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	fa04 f402 	lsl.w	r4, r4, r2
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x256>
 8000d86:	1869      	adds	r1, r5, r1
 8000d88:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d8c:	d22f      	bcs.n	8000dee <__udivmoddi4+0x2ae>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d92d      	bls.n	8000dee <__udivmoddi4+0x2ae>
 8000d92:	3f02      	subs	r7, #2
 8000d94:	4429      	add	r1, r5
 8000d96:	1acb      	subs	r3, r1, r3
 8000d98:	b281      	uxth	r1, r0
 8000d9a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da6:	fb00 f308 	mul.w	r3, r0, r8
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x27e>
 8000dae:	1869      	adds	r1, r5, r1
 8000db0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db4:	d217      	bcs.n	8000de6 <__udivmoddi4+0x2a6>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d915      	bls.n	8000de6 <__udivmoddi4+0x2a6>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4429      	add	r1, r5
 8000dbe:	1ac9      	subs	r1, r1, r3
 8000dc0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc4:	e73b      	b.n	8000c3e <__udivmoddi4+0xfe>
 8000dc6:	4637      	mov	r7, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e709      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000dcc:	4607      	mov	r7, r0
 8000dce:	e6e7      	b.n	8000ba0 <__udivmoddi4+0x60>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6fb      	b.n	8000bcc <__udivmoddi4+0x8c>
 8000dd4:	4541      	cmp	r1, r8
 8000dd6:	d2ab      	bcs.n	8000d30 <__udivmoddi4+0x1f0>
 8000dd8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ddc:	eb69 020e 	sbc.w	r2, r9, lr
 8000de0:	3801      	subs	r0, #1
 8000de2:	4613      	mov	r3, r2
 8000de4:	e7a4      	b.n	8000d30 <__udivmoddi4+0x1f0>
 8000de6:	4660      	mov	r0, ip
 8000de8:	e7e9      	b.n	8000dbe <__udivmoddi4+0x27e>
 8000dea:	4618      	mov	r0, r3
 8000dec:	e795      	b.n	8000d1a <__udivmoddi4+0x1da>
 8000dee:	4667      	mov	r7, ip
 8000df0:	e7d1      	b.n	8000d96 <__udivmoddi4+0x256>
 8000df2:	4681      	mov	r9, r0
 8000df4:	e77c      	b.n	8000cf0 <__udivmoddi4+0x1b0>
 8000df6:	3802      	subs	r0, #2
 8000df8:	442c      	add	r4, r5
 8000dfa:	e747      	b.n	8000c8c <__udivmoddi4+0x14c>
 8000dfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e00:	442b      	add	r3, r5
 8000e02:	e72f      	b.n	8000c64 <__udivmoddi4+0x124>
 8000e04:	4638      	mov	r0, r7
 8000e06:	e708      	b.n	8000c1a <__udivmoddi4+0xda>
 8000e08:	4637      	mov	r7, r6
 8000e0a:	e6e9      	b.n	8000be0 <__udivmoddi4+0xa0>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <HAL_MspDeInit>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000e14:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_DeInit+0x28>)
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  __HAL_RCC_APB1_RELEASE_RESET();
 8000e1c:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 8000e1e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000e20:	621c      	str	r4, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000e24:	625c      	str	r4, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000e26:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000e28:	611c      	str	r4, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000e2a:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000e2c:	615c      	str	r4, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000e2e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000e30:	619c      	str	r4, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000e32:	f7ff ffed 	bl	8000e10 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
}
 8000e36:	4620      	mov	r0, r4
 8000e38:	bd10      	pop	{r4, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <HAL_InitTick+0x3c>)
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_InitTick+0x40>)
 8000e46:	7812      	ldrb	r2, [r2, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
{
 8000e4a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e50:	fbb0 f0f2 	udiv	r0, r0, r2
 8000e54:	fbb3 f0f0 	udiv	r0, r3, r0
 8000e58:	f000 f8dc 	bl	8001014 <HAL_SYSTICK_Config>
 8000e5c:	b908      	cbnz	r0, 8000e62 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	2d0f      	cmp	r5, #15
 8000e60:	d901      	bls.n	8000e66 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000e62:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000e64:	bd38      	pop	{r3, r4, r5, pc}
 8000e66:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e68:	4602      	mov	r2, r0
 8000e6a:	4629      	mov	r1, r5
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e70:	f000 f864 	bl	8000f3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_InitTick+0x44>)
 8000e76:	4620      	mov	r0, r4
 8000e78:	601d      	str	r5, [r3, #0]
}
 8000e7a:	bd38      	pop	{r3, r4, r5, pc}
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	2000010c 	.word	0x2000010c
 8000e84:	20000004 	.word	0x20000004

08000e88 <HAL_Init>:
{
 8000e88:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_Init+0x30>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e92:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e9a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ea2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 f82d 	bl	8000f04 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f7ff ffc8 	bl	8000e40 <HAL_InitTick>
  HAL_MspInit();
 8000eb0:	f001 fdcc 	bl	8002a4c <HAL_MspInit>
}
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	bd08      	pop	{r3, pc}
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ebc:	4a03      	ldr	r2, [pc, #12]	; (8000ecc <HAL_IncTick+0x10>)
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <HAL_IncTick+0x14>)
 8000ec0:	6811      	ldr	r1, [r2, #0]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	440b      	add	r3, r1
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000308 	.word	0x20000308
 8000ed0:	20000000 	.word	0x20000000

08000ed4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ed4:	4b01      	ldr	r3, [pc, #4]	; (8000edc <HAL_GetTick+0x8>)
 8000ed6:	6818      	ldr	r0, [r3, #0]
}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000308 	.word	0x20000308

08000ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee0:	b538      	push	{r3, r4, r5, lr}
 8000ee2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff fff6 	bl	8000ed4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000eea:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000eec:	d002      	beq.n	8000ef4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <HAL_Delay+0x20>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	1b40      	subs	r0, r0, r5
 8000efa:	42a0      	cmp	r0, r4
 8000efc:	d3fa      	bcc.n	8000ef4 <HAL_Delay+0x14>
  {
  }
}
 8000efe:	bd38      	pop	{r3, r4, r5, pc}
 8000f00:	20000000 	.word	0x20000000

08000f04 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000f04:	1ec3      	subs	r3, r0, #3
 8000f06:	2b04      	cmp	r3, #4
{
 8000f08:	b510      	push	{r4, lr}
 8000f0a:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000f0c:	d903      	bls.n	8000f16 <HAL_NVIC_SetPriorityGrouping+0x12>
 8000f0e:	2192      	movs	r1, #146	; 0x92
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <HAL_NVIC_SetPriorityGrouping+0x30>)
 8000f12:	f001 fd99 	bl	8002a48 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f16:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8000f18:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000f1e:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	0224      	lsls	r4, r4, #8
 8000f22:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f26:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
 8000f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000f2e:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8000f30:	60d4      	str	r4, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f32:	bd10      	pop	{r4, pc}
 8000f34:	08004710 	.word	0x08004710
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000f3c:	2a0f      	cmp	r2, #15
{ 
 8000f3e:	b570      	push	{r4, r5, r6, lr}
 8000f40:	4616      	mov	r6, r2
 8000f42:	4605      	mov	r5, r0
 8000f44:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000f46:	d834      	bhi.n	8000fb2 <HAL_NVIC_SetPriority+0x76>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000f48:	2c0f      	cmp	r4, #15
 8000f4a:	d82d      	bhi.n	8000fa8 <HAL_NVIC_SetPriority+0x6c>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <HAL_NVIC_SetPriority+0x80>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	f1c3 0107 	rsb	r1, r3, #7
 8000f58:	2904      	cmp	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	f103 0204 	add.w	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5e:	bf28      	it	cs
 8000f60:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	2a06      	cmp	r2, #6
 8000f64:	d917      	bls.n	8000f96 <HAL_NVIC_SetPriority+0x5a>
 8000f66:	3b03      	subs	r3, #3
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f6c:	409a      	lsls	r2, r3
 8000f6e:	ea26 0602 	bic.w	r6, r6, r2

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f76:	408a      	lsls	r2, r1
 8000f78:	ea24 0202 	bic.w	r2, r4, r2
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	4332      	orrs	r2, r6
 8000f80:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000f82:	2d00      	cmp	r5, #0
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	db09      	blt.n	8000f9c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8000f8c:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8000f90:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f94:	bd70      	pop	{r4, r5, r6, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	2600      	movs	r6, #0
 8000f98:	4633      	mov	r3, r6
 8000f9a:	e7ea      	b.n	8000f72 <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_NVIC_SetPriority+0x84>)
 8000f9e:	f005 050f 	and.w	r5, r5, #15
 8000fa2:	442b      	add	r3, r5
 8000fa4:	761a      	strb	r2, [r3, #24]
 8000fa6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000fa8:	21ab      	movs	r1, #171	; 0xab
 8000faa:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <HAL_NVIC_SetPriority+0x88>)
 8000fac:	f001 fd4c 	bl	8002a48 <assert_failed>
 8000fb0:	e7cc      	b.n	8000f4c <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000fb2:	21aa      	movs	r1, #170	; 0xaa
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <HAL_NVIC_SetPriority+0x88>)
 8000fb6:	f001 fd47 	bl	8002a48 <assert_failed>
 8000fba:	e7c5      	b.n	8000f48 <HAL_NVIC_SetPriority+0xc>
 8000fbc:	e000ed00 	.word	0xe000ed00
 8000fc0:	e000ecfc 	.word	0xe000ecfc
 8000fc4:	08004710 	.word	0x08004710

08000fc8 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	db08      	blt.n	8000fde <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fcc:	f000 011f 	and.w	r1, r0, #31
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	0940      	lsrs	r0, r0, #5
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_NVIC_EnableIRQ+0x20>)
 8000fd6:	408b      	lsls	r3, r1
 8000fd8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000fdc:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000fde:	21be      	movs	r1, #190	; 0xbe
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <HAL_NVIC_EnableIRQ+0x24>)
 8000fe2:	f001 bd31 	b.w	8002a48 <assert_failed>
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	08004710 	.word	0x08004710

08000ff0 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ff0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ff4:	4905      	ldr	r1, [pc, #20]	; (800100c <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ff8:	68ca      	ldr	r2, [r1, #12]
 8000ffa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60cb      	str	r3, [r1, #12]
 8001002:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001006:	bf00      	nop
 8001008:	e7fd      	b.n	8001006 <HAL_NVIC_SystemReset+0x16>
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00
 8001010:	05fa0004 	.word	0x05fa0004

08001014 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001014:	3801      	subs	r0, #1
 8001016:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800101a:	d20e      	bcs.n	800103a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001020:	4c08      	ldr	r4, [pc, #32]	; (8001044 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001022:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	20f0      	movs	r0, #240	; 0xf0
 8001026:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800102e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8001034:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001038:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800103a:	2001      	movs	r0, #1
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e010 	.word	0xe000e010
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001048:	b1c8      	cbz	r0, 800107e <HAL_CRC_Init+0x36>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_CRC_Init+0x3c>)
 800104c:	6802      	ldr	r2, [r0, #0]
 800104e:	429a      	cmp	r2, r3
{
 8001050:	b510      	push	{r4, lr}
 8001052:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8001054:	d003      	beq.n	800105e <HAL_CRC_Init+0x16>
 8001056:	2168      	movs	r1, #104	; 0x68
 8001058:	480b      	ldr	r0, [pc, #44]	; (8001088 <HAL_CRC_Init+0x40>)
 800105a:	f001 fcf5 	bl	8002a48 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800105e:	7963      	ldrb	r3, [r4, #5]
 8001060:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001064:	b11b      	cbz	r3, 800106e <HAL_CRC_Init+0x26>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001066:	2301      	movs	r3, #1
 8001068:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800106a:	2000      	movs	r0, #0
}
 800106c:	bd10      	pop	{r4, pc}
    HAL_CRC_MspInit(hcrc);
 800106e:	4620      	mov	r0, r4
    hcrc->Lock = HAL_UNLOCKED;
 8001070:	7122      	strb	r2, [r4, #4]
    HAL_CRC_MspInit(hcrc);
 8001072:	f001 fbdb 	bl	800282c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_READY;
 8001076:	2301      	movs	r3, #1
 8001078:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 800107a:	2000      	movs	r0, #0
}
 800107c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800107e:	2001      	movs	r0, #1
}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40023000 	.word	0x40023000
 8001088:	0800474c 	.word	0x0800474c

0800108c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800108c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001090:	2b02      	cmp	r3, #2
 8001092:	d003      	beq.n	800109c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001098:	2001      	movs	r0, #1
 800109a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800109c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800109e:	2305      	movs	r3, #5
 80010a0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80010a4:	6813      	ldr	r3, [r2, #0]
 80010a6:	f023 0301 	bic.w	r3, r3, #1
 80010aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80010ac:	2000      	movs	r0, #0
}
 80010ae:	4770      	bx	lr

080010b0 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <FLASH_SetErrorCode+0x88>)
 80010b2:	68da      	ldr	r2, [r3, #12]
 80010b4:	06d0      	lsls	r0, r2, #27
 80010b6:	d505      	bpl.n	80010c4 <FLASH_SetErrorCode+0x14>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80010b8:	4920      	ldr	r1, [pc, #128]	; (800113c <FLASH_SetErrorCode+0x8c>)
 80010ba:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80010bc:	2010      	movs	r0, #16
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80010be:	4302      	orrs	r2, r0
 80010c0:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80010c2:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <FLASH_SetErrorCode+0x88>)
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	0691      	lsls	r1, r2, #26
 80010ca:	d506      	bpl.n	80010da <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80010cc:	491b      	ldr	r1, [pc, #108]	; (800113c <FLASH_SetErrorCode+0x8c>)
 80010ce:	69ca      	ldr	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80010d0:	2020      	movs	r0, #32
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80010d2:	f042 0208 	orr.w	r2, r2, #8
 80010d6:	61ca      	str	r2, [r1, #28]
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80010d8:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <FLASH_SetErrorCode+0x88>)
 80010dc:	68da      	ldr	r2, [r3, #12]
 80010de:	0652      	lsls	r2, r2, #25
 80010e0:	d506      	bpl.n	80010f0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80010e2:	4916      	ldr	r1, [pc, #88]	; (800113c <FLASH_SetErrorCode+0x8c>)
 80010e4:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80010e6:	2040      	movs	r0, #64	; 0x40
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80010e8:	f042 0204 	orr.w	r2, r2, #4
 80010ec:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80010ee:	60d8      	str	r0, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <FLASH_SetErrorCode+0x88>)
 80010f2:	68da      	ldr	r2, [r3, #12]
 80010f4:	0610      	lsls	r0, r2, #24
 80010f6:	d506      	bpl.n	8001106 <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80010f8:	4910      	ldr	r1, [pc, #64]	; (800113c <FLASH_SetErrorCode+0x8c>)
 80010fa:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80010fc:	2080      	movs	r0, #128	; 0x80
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80010fe:	f042 0202 	orr.w	r2, r2, #2
 8001102:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001104:	60d8      	str	r0, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <FLASH_SetErrorCode+0x88>)
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	05d1      	lsls	r1, r2, #23
 800110c:	d507      	bpl.n	800111e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800110e:	490b      	ldr	r1, [pc, #44]	; (800113c <FLASH_SetErrorCode+0x8c>)
 8001110:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001112:	f44f 7080 	mov.w	r0, #256	; 0x100
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800111c:	60d8      	str	r0, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <FLASH_SetErrorCode+0x88>)
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	0792      	lsls	r2, r2, #30
 8001124:	d506      	bpl.n	8001134 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001126:	4905      	ldr	r1, [pc, #20]	; (800113c <FLASH_SetErrorCode+0x8c>)
 8001128:	69ca      	ldr	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800112a:	2002      	movs	r0, #2
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800112c:	f042 0220 	orr.w	r2, r2, #32
 8001130:	61ca      	str	r2, [r1, #28]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001132:	60d8      	str	r0, [r3, #12]
  }
}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023c00 	.word	0x40023c00
 800113c:	2000030c 	.word	0x2000030c

08001140 <HAL_FLASH_Program>:
{
 8001140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8001144:	4f77      	ldr	r7, [pc, #476]	; (8001324 <HAL_FLASH_Program+0x1e4>)
 8001146:	7e3c      	ldrb	r4, [r7, #24]
 8001148:	2c01      	cmp	r4, #1
 800114a:	f000 809f 	beq.w	800128c <HAL_FLASH_Program+0x14c>
 800114e:	469b      	mov	fp, r3
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8001150:	2803      	cmp	r0, #3
  __HAL_LOCK(&pFlash);
 8001152:	f04f 0301 	mov.w	r3, #1
 8001156:	4692      	mov	sl, r2
 8001158:	4689      	mov	r9, r1
 800115a:	4680      	mov	r8, r0
 800115c:	763b      	strb	r3, [r7, #24]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800115e:	d86d      	bhi.n	800123c <HAL_FLASH_Program+0xfc>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  tickstart = HAL_GetTick();
 8001164:	f7ff feb6 	bl	8000ed4 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001168:	4c6f      	ldr	r4, [pc, #444]	; (8001328 <HAL_FLASH_Program+0x1e8>)
  tickstart = HAL_GetTick();
 800116a:	4606      	mov	r6, r0
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800116c:	f24c 3550 	movw	r5, #50000	; 0xc350
 8001170:	e004      	b.n	800117c <HAL_FLASH_Program+0x3c>
 8001172:	f7ff feaf 	bl	8000ed4 <HAL_GetTick>
 8001176:	1b80      	subs	r0, r0, r6
 8001178:	42a8      	cmp	r0, r5
 800117a:	d85a      	bhi.n	8001232 <HAL_FLASH_Program+0xf2>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800117c:	68e3      	ldr	r3, [r4, #12]
 800117e:	03d8      	lsls	r0, r3, #15
 8001180:	d4f7      	bmi.n	8001172 <HAL_FLASH_Program+0x32>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001182:	68e3      	ldr	r3, [r4, #12]
 8001184:	07d9      	lsls	r1, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001186:	bf44      	itt	mi
 8001188:	2301      	movmi	r3, #1
 800118a:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800118c:	4b66      	ldr	r3, [pc, #408]	; (8001328 <HAL_FLASH_Program+0x1e8>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 8001194:	d157      	bne.n	8001246 <HAL_FLASH_Program+0x106>
 8001196:	f109 4378 	add.w	r3, r9, #4160749568	; 0xf8000000
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800119a:	f1b8 0f00 	cmp.w	r8, #0
 800119e:	d07a      	beq.n	8001296 <HAL_FLASH_Program+0x156>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80011a0:	f1b8 0f01 	cmp.w	r8, #1
 80011a4:	f000 8091 	beq.w	80012ca <HAL_FLASH_Program+0x18a>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80011a8:	f1b8 0f02 	cmp.w	r8, #2
 80011ac:	d04f      	beq.n	800124e <HAL_FLASH_Program+0x10e>
  assert_param(IS_FLASH_ADDRESS(Address));
 80011ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011b2:	d307      	bcc.n	80011c4 <HAL_FLASH_Program+0x84>
 80011b4:	f109 4360 	add.w	r3, r9, #3758096384	; 0xe0000000
 80011b8:	f503 4308 	add.w	r3, r3, #34816	; 0x8800
 80011bc:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 80011c0:	f080 80a4 	bcs.w	800130c <HAL_FLASH_Program+0x1cc>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011c4:	4b58      	ldr	r3, [pc, #352]	; (8001328 <HAL_FLASH_Program+0x1e8>)
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80011cc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80011d4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	f042 0201 	orr.w	r2, r2, #1
 80011dc:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80011de:	f8c9 a000 	str.w	sl, [r9]
  __ASM volatile ("isb 0xF":::"memory");
 80011e2:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80011e6:	f8c9 b004 	str.w	fp, [r9, #4]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  tickstart = HAL_GetTick();
 80011ee:	f7ff fe71 	bl	8000ed4 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80011f2:	4c4d      	ldr	r4, [pc, #308]	; (8001328 <HAL_FLASH_Program+0x1e8>)
  tickstart = HAL_GetTick();
 80011f4:	4606      	mov	r6, r0
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80011f6:	f24c 3550 	movw	r5, #50000	; 0xc350
 80011fa:	e004      	b.n	8001206 <HAL_FLASH_Program+0xc6>
 80011fc:	f7ff fe6a 	bl	8000ed4 <HAL_GetTick>
 8001200:	1b80      	subs	r0, r0, r6
 8001202:	42a8      	cmp	r0, r5
 8001204:	d845      	bhi.n	8001292 <HAL_FLASH_Program+0x152>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001206:	68e3      	ldr	r3, [r4, #12]
 8001208:	03da      	lsls	r2, r3, #15
 800120a:	d4f7      	bmi.n	80011fc <HAL_FLASH_Program+0xbc>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800120c:	68e3      	ldr	r3, [r4, #12]
 800120e:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001210:	bf44      	itt	mi
 8001212:	2301      	movmi	r3, #1
 8001214:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001216:	4b44      	ldr	r3, [pc, #272]	; (8001328 <HAL_FLASH_Program+0x1e8>)
 8001218:	68d8      	ldr	r0, [r3, #12]
 800121a:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 800121e:	d002      	beq.n	8001226 <HAL_FLASH_Program+0xe6>
    FLASH_SetErrorCode();
 8001220:	f7ff ff46 	bl	80010b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001224:	2001      	movs	r0, #1
    FLASH->CR &= (~FLASH_CR_PG);  
 8001226:	4a40      	ldr	r2, [pc, #256]	; (8001328 <HAL_FLASH_Program+0x1e8>)
 8001228:	6913      	ldr	r3, [r2, #16]
 800122a:	f023 0301 	bic.w	r3, r3, #1
 800122e:	6113      	str	r3, [r2, #16]
 8001230:	e000      	b.n	8001234 <HAL_FLASH_Program+0xf4>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001232:	2003      	movs	r0, #3
  __HAL_UNLOCK(&pFlash);
 8001234:	2300      	movs	r3, #0
 8001236:	763b      	strb	r3, [r7, #24]
}
 8001238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800123c:	21a4      	movs	r1, #164	; 0xa4
 800123e:	483b      	ldr	r0, [pc, #236]	; (800132c <HAL_FLASH_Program+0x1ec>)
 8001240:	f001 fc02 	bl	8002a48 <assert_failed>
 8001244:	e78c      	b.n	8001160 <HAL_FLASH_Program+0x20>
    FLASH_SetErrorCode();
 8001246:	f7ff ff33 	bl	80010b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800124a:	2001      	movs	r0, #1
 800124c:	e7f2      	b.n	8001234 <HAL_FLASH_Program+0xf4>
  assert_param(IS_FLASH_ADDRESS(Address));
 800124e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001252:	d30b      	bcc.n	800126c <HAL_FLASH_Program+0x12c>
 8001254:	f109 4360 	add.w	r3, r9, #3758096384	; 0xe0000000
 8001258:	f503 4308 	add.w	r3, r3, #34816	; 0x8800
 800125c:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8001260:	d304      	bcc.n	800126c <HAL_FLASH_Program+0x12c>
 8001262:	f240 2189 	movw	r1, #649	; 0x289
 8001266:	4831      	ldr	r0, [pc, #196]	; (800132c <HAL_FLASH_Program+0x1ec>)
 8001268:	f001 fbee 	bl	8002a48 <assert_failed>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800126c:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <HAL_FLASH_Program+0x1e8>)
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001274:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800127c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	f042 0201 	orr.w	r2, r2, #1
 8001284:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = Data;
 8001286:	f8c9 a000 	str.w	sl, [r9]
 800128a:	e7ae      	b.n	80011ea <HAL_FLASH_Program+0xaa>
  __HAL_LOCK(&pFlash);
 800128c:	2002      	movs	r0, #2
}
 800128e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return HAL_TIMEOUT;
 8001292:	2003      	movs	r0, #3
 8001294:	e7c7      	b.n	8001226 <HAL_FLASH_Program+0xe6>
  assert_param(IS_FLASH_ADDRESS(Address));
 8001296:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800129a:	fa5f fa8a 	uxtb.w	sl, sl
  assert_param(IS_FLASH_ADDRESS(Address));
 800129e:	d306      	bcc.n	80012ae <HAL_FLASH_Program+0x16e>
 80012a0:	f109 4360 	add.w	r3, r9, #3758096384	; 0xe0000000
 80012a4:	f503 4308 	add.w	r3, r3, #34816	; 0x8800
 80012a8:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 80012ac:	d234      	bcs.n	8001318 <HAL_FLASH_Program+0x1d8>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <HAL_FLASH_Program+0x1e8>)
 80012b0:	6919      	ldr	r1, [r3, #16]
 80012b2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80012b6:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80012bc:	6919      	ldr	r1, [r3, #16]
 80012be:	f041 0101 	orr.w	r1, r1, #1
 80012c2:	6119      	str	r1, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 80012c4:	f889 a000 	strb.w	sl, [r9]
 80012c8:	e78f      	b.n	80011ea <HAL_FLASH_Program+0xaa>
  assert_param(IS_FLASH_ADDRESS(Address));
 80012ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80012ce:	fa1f fa8a 	uxth.w	sl, sl
  assert_param(IS_FLASH_ADDRESS(Address));
 80012d2:	d30b      	bcc.n	80012ec <HAL_FLASH_Program+0x1ac>
 80012d4:	f109 4360 	add.w	r3, r9, #3758096384	; 0xe0000000
 80012d8:	f503 4308 	add.w	r3, r3, #34816	; 0x8800
 80012dc:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 80012e0:	d304      	bcc.n	80012ec <HAL_FLASH_Program+0x1ac>
 80012e2:	f240 21a2 	movw	r1, #674	; 0x2a2
 80012e6:	4811      	ldr	r0, [pc, #68]	; (800132c <HAL_FLASH_Program+0x1ec>)
 80012e8:	f001 fbae 	bl	8002a48 <assert_failed>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_FLASH_Program+0x1e8>)
 80012ee:	691a      	ldr	r2, [r3, #16]
 80012f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80012f4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012fc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	f042 0201 	orr.w	r2, r2, #1
 8001304:	611a      	str	r2, [r3, #16]
  *(__IO uint16_t*)Address = Data;
 8001306:	f8a9 a000 	strh.w	sl, [r9]
 800130a:	e76e      	b.n	80011ea <HAL_FLASH_Program+0xaa>
  assert_param(IS_FLASH_ADDRESS(Address));
 800130c:	f240 2167 	movw	r1, #615	; 0x267
 8001310:	4806      	ldr	r0, [pc, #24]	; (800132c <HAL_FLASH_Program+0x1ec>)
 8001312:	f001 fb99 	bl	8002a48 <assert_failed>
 8001316:	e755      	b.n	80011c4 <HAL_FLASH_Program+0x84>
  assert_param(IS_FLASH_ADDRESS(Address));
 8001318:	f240 21bb 	movw	r1, #699	; 0x2bb
 800131c:	4803      	ldr	r0, [pc, #12]	; (800132c <HAL_FLASH_Program+0x1ec>)
 800131e:	f001 fb93 	bl	8002a48 <assert_failed>
 8001322:	e7c4      	b.n	80012ae <HAL_FLASH_Program+0x16e>
 8001324:	2000030c 	.word	0x2000030c
 8001328:	40023c00 	.word	0x40023c00
 800132c:	08004784 	.word	0x08004784

08001330 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_FLASH_Unlock+0x1c>)
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	2a00      	cmp	r2, #0
 8001336:	db01      	blt.n	800133c <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8001338:	2000      	movs	r0, #0
}
 800133a:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800133c:	4904      	ldr	r1, [pc, #16]	; (8001350 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001340:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001342:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001344:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8001346:	0fc0      	lsrs	r0, r0, #31
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023c00 	.word	0x40023c00
 8001350:	45670123 	.word	0x45670123
 8001354:	cdef89ab 	.word	0xcdef89ab

08001358 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8001358:	4a03      	ldr	r2, [pc, #12]	; (8001368 <HAL_FLASH_Lock+0x10>)
 800135a:	6913      	ldr	r3, [r2, #16]
 800135c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001360:	6113      	str	r3, [r2, #16]
}
 8001362:	2000      	movs	r0, #0
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023c00 	.word	0x40023c00

0800136c <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <FLASH_WaitForLastOperation+0x54>)
{ 
 800136e:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001370:	2200      	movs	r2, #0
{ 
 8001372:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001374:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8001376:	f7ff fdad 	bl	8000ed4 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800137a:	4d12      	ldr	r5, [pc, #72]	; (80013c4 <FLASH_WaitForLastOperation+0x58>)
  tickstart = HAL_GetTick();
 800137c:	4606      	mov	r6, r0
 800137e:	1c63      	adds	r3, r4, #1
 8001380:	d10f      	bne.n	80013a2 <FLASH_WaitForLastOperation+0x36>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001382:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <FLASH_WaitForLastOperation+0x58>)
 8001384:	68d3      	ldr	r3, [r2, #12]
 8001386:	03d8      	lsls	r0, r3, #15
 8001388:	d4fc      	bmi.n	8001384 <FLASH_WaitForLastOperation+0x18>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <FLASH_WaitForLastOperation+0x58>)
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	07d2      	lsls	r2, r2, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001390:	bf44      	itt	mi
 8001392:	2201      	movmi	r2, #1
 8001394:	60da      	strmi	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <FLASH_WaitForLastOperation+0x58>)
 8001398:	68d8      	ldr	r0, [r3, #12]
 800139a:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 800139e:	d10b      	bne.n	80013b8 <FLASH_WaitForLastOperation+0x4c>
}  
 80013a0:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80013a2:	68eb      	ldr	r3, [r5, #12]
 80013a4:	03d9      	lsls	r1, r3, #15
 80013a6:	d5f0      	bpl.n	800138a <FLASH_WaitForLastOperation+0x1e>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80013a8:	b124      	cbz	r4, 80013b4 <FLASH_WaitForLastOperation+0x48>
 80013aa:	f7ff fd93 	bl	8000ed4 <HAL_GetTick>
 80013ae:	1b80      	subs	r0, r0, r6
 80013b0:	42a0      	cmp	r0, r4
 80013b2:	d9e4      	bls.n	800137e <FLASH_WaitForLastOperation+0x12>
        return HAL_TIMEOUT;
 80013b4:	2003      	movs	r0, #3
}  
 80013b6:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 80013b8:	f7ff fe7a 	bl	80010b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80013bc:	2001      	movs	r0, #1
}  
 80013be:	bd70      	pop	{r4, r5, r6, pc}
 80013c0:	2000030c 	.word	0x2000030c
 80013c4:	40023c00 	.word	0x40023c00

080013c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80013c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0U;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80013cc:	4e78      	ldr	r6, [pc, #480]	; (80015b0 <HAL_FLASHEx_Erase+0x1e8>)
 80013ce:	7e33      	ldrb	r3, [r6, #24]
 80013d0:	2b01      	cmp	r3, #1
{
 80013d2:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 80013d4:	f000 80d3 	beq.w	800157e <HAL_FLASHEx_Erase+0x1b6>

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 80013d8:	6803      	ldr	r3, [r0, #0]
 80013da:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(&pFlash);
 80013dc:	2201      	movs	r2, #1
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 80013de:	4293      	cmp	r3, r2
 80013e0:	4682      	mov	sl, r0
  __HAL_LOCK(&pFlash);
 80013e2:	7632      	strb	r2, [r6, #24]
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 80013e4:	f200 80ba 	bhi.w	800155c <HAL_FLASHEx_Erase+0x194>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013ec:	f7ff ffbe 	bl	800136c <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 80013f0:	4680      	mov	r8, r0
 80013f2:	2800      	cmp	r0, #0
 80013f4:	f040 80ac 	bne.w	8001550 <HAL_FLASHEx_Erase+0x188>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80013f8:	9a01      	ldr	r2, [sp, #4]
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013fe:	6013      	str	r3, [r2, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001400:	f8da 3000 	ldr.w	r3, [sl]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d054      	beq.n	80014b2 <HAL_FLASHEx_Erase+0xea>
      FLASH->CR &= (~FLASH_MER_BIT);
    }
    else
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 8001408:	e9da b302 	ldrd	fp, r3, [sl, #8]
 800140c:	445b      	add	r3, fp
 800140e:	1e5a      	subs	r2, r3, #1
 8001410:	2a07      	cmp	r2, #7
 8001412:	f200 80bf 	bhi.w	8001594 <HAL_FLASHEx_Erase+0x1cc>

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001416:	459b      	cmp	fp, r3
 8001418:	d272      	bcs.n	8001500 <HAL_FLASHEx_Erase+0x138>
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
  uint32_t tmp_psize = 0U;

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 800141a:	f8df 919c 	ldr.w	r9, [pc, #412]	; 80015b8 <HAL_FLASHEx_Erase+0x1f0>
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800141e:	4c65      	ldr	r4, [pc, #404]	; (80015b4 <HAL_FLASHEx_Erase+0x1ec>)
 8001420:	ea4f 05cb 	mov.w	r5, fp, lsl #3
 8001424:	e02d      	b.n	8001482 <HAL_FLASHEx_Erase+0xba>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8001426:	2f03      	cmp	r7, #3
 8001428:	d837      	bhi.n	800149a <HAL_FLASHEx_Erase+0xd2>
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800142a:	2f00      	cmp	r7, #0
 800142c:	f040 80a2 	bne.w	8001574 <HAL_FLASHEx_Erase+0x1ac>
     tmp_psize = FLASH_PSIZE_BYTE;
 8001430:	463b      	mov	r3, r7
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001432:	6922      	ldr	r2, [r4, #16]
 8001434:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001438:	6122      	str	r2, [r4, #16]
  FLASH->CR |= tmp_psize;
 800143a:	6922      	ldr	r2, [r4, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001440:	6923      	ldr	r3, [r4, #16]
 8001442:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001446:	6123      	str	r3, [r4, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001448:	6923      	ldr	r3, [r4, #16]
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	432b      	orrs	r3, r5
 8001450:	6123      	str	r3, [r4, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001452:	6923      	ldr	r3, [r4, #16]
 8001454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001458:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800145a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800145e:	f7ff ff85 	bl	800136c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001462:	6923      	ldr	r3, [r4, #16]
 8001464:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001468:	6123      	str	r3, [r4, #16]
        if(status != HAL_OK) 
 800146a:	2800      	cmp	r0, #0
 800146c:	f040 808d 	bne.w	800158a <HAL_FLASHEx_Erase+0x1c2>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001470:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8001474:	f10b 0b01 	add.w	fp, fp, #1
 8001478:	4413      	add	r3, r2
 800147a:	455b      	cmp	r3, fp
 800147c:	f105 0508 	add.w	r5, r5, #8
 8001480:	d93e      	bls.n	8001500 <HAL_FLASHEx_Erase+0x138>
  assert_param(IS_FLASH_SECTOR(Sector));
 8001482:	f1bb 0f07 	cmp.w	fp, #7
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001486:	f89a 7010 	ldrb.w	r7, [sl, #16]
  assert_param(IS_FLASH_SECTOR(Sector));
 800148a:	d9cc      	bls.n	8001426 <HAL_FLASHEx_Erase+0x5e>
 800148c:	f240 31db 	movw	r1, #987	; 0x3db
 8001490:	4648      	mov	r0, r9
 8001492:	f001 fad9 	bl	8002a48 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8001496:	2f03      	cmp	r7, #3
 8001498:	d9c7      	bls.n	800142a <HAL_FLASHEx_Erase+0x62>
 800149a:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 800149e:	4648      	mov	r0, r9
 80014a0:	f001 fad2 	bl	8002a48 <assert_failed>
    tmp_psize = FLASH_PSIZE_WORD;
 80014a4:	2f02      	cmp	r7, #2
 80014a6:	bf14      	ite	ne
 80014a8:	f44f 7340 	movne.w	r3, #768	; 0x300
 80014ac:	f44f 7300 	moveq.w	r3, #512	; 0x200
 80014b0:	e7bf      	b.n	8001432 <HAL_FLASHEx_Erase+0x6a>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80014b2:	f8da 5010 	ldr.w	r5, [sl, #16]
 80014b6:	f8da 4004 	ldr.w	r4, [sl, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 80014ba:	b2eb      	uxtb	r3, r5
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d871      	bhi.n	80015a4 <HAL_FLASHEx_Erase+0x1dc>
  assert_param(IS_FLASH_BANK(Banks));
 80014c0:	2c01      	cmp	r4, #1
 80014c2:	d004      	beq.n	80014ce <HAL_FLASHEx_Erase+0x106>
 80014c4:	f240 31bd 	movw	r1, #957	; 0x3bd
 80014c8:	483b      	ldr	r0, [pc, #236]	; (80015b8 <HAL_FLASHEx_Erase+0x1f0>)
 80014ca:	f001 fabd 	bl	8002a48 <assert_failed>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014ce:	4c39      	ldr	r4, [pc, #228]	; (80015b4 <HAL_FLASHEx_Erase+0x1ec>)
 80014d0:	6923      	ldr	r3, [r4, #16]
 80014d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014d6:	6123      	str	r3, [r4, #16]
  FLASH->CR |= FLASH_CR_MER;
 80014d8:	6923      	ldr	r3, [r4, #16]
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	6123      	str	r3, [r4, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80014e0:	6922      	ldr	r2, [r4, #16]
 80014e2:	022b      	lsls	r3, r5, #8
 80014e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	6123      	str	r3, [r4, #16]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014f2:	f7ff ff3b 	bl	800136c <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 80014f6:	6923      	ldr	r3, [r4, #16]
 80014f8:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014fc:	4680      	mov	r8, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 80014fe:	6123      	str	r3, [r4, #16]
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001500:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <HAL_FLASHEx_Erase+0x1ec>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	0591      	lsls	r1, r2, #22
 8001506:	d50f      	bpl.n	8001528 <HAL_FLASHEx_Erase+0x160>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800150e:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800151e:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001526:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <HAL_FLASHEx_Erase+0x1ec>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	0552      	lsls	r2, r2, #21
 800152e:	d50f      	bpl.n	8001550 <HAL_FLASHEx_Erase+0x188>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001536:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001546:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800154e:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(&pFlash);
 8001550:	2300      	movs	r3, #0
}
 8001552:	4640      	mov	r0, r8
  __HAL_UNLOCK(&pFlash);
 8001554:	7633      	strb	r3, [r6, #24]
}
 8001556:	b003      	add	sp, #12
 8001558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800155c:	21ab      	movs	r1, #171	; 0xab
 800155e:	4816      	ldr	r0, [pc, #88]	; (80015b8 <HAL_FLASHEx_Erase+0x1f0>)
 8001560:	f001 fa72 	bl	8002a48 <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001564:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001568:	f7ff ff00 	bl	800136c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800156c:	4680      	mov	r8, r0
 800156e:	2800      	cmp	r0, #0
 8001570:	d1ee      	bne.n	8001550 <HAL_FLASHEx_Erase+0x188>
 8001572:	e741      	b.n	80013f8 <HAL_FLASHEx_Erase+0x30>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001574:	2f01      	cmp	r7, #1
 8001576:	d195      	bne.n	80014a4 <HAL_FLASHEx_Erase+0xdc>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157c:	e759      	b.n	8001432 <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 800157e:	f04f 0802 	mov.w	r8, #2
}
 8001582:	4640      	mov	r0, r8
 8001584:	b003      	add	sp, #12
 8001586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          *SectorError = index;
 800158a:	9b01      	ldr	r3, [sp, #4]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800158c:	4680      	mov	r8, r0
          *SectorError = index;
 800158e:	f8c3 b000 	str.w	fp, [r3]
          break;
 8001592:	e7b5      	b.n	8001500 <HAL_FLASHEx_Erase+0x138>
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 8001594:	21c3      	movs	r1, #195	; 0xc3
 8001596:	4808      	ldr	r0, [pc, #32]	; (80015b8 <HAL_FLASHEx_Erase+0x1f0>)
 8001598:	f001 fa56 	bl	8002a48 <assert_failed>
 800159c:	e9da b302 	ldrd	fp, r3, [sl, #8]
 80015a0:	445b      	add	r3, fp
 80015a2:	e738      	b.n	8001416 <HAL_FLASHEx_Erase+0x4e>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 80015a4:	f44f 716f 	mov.w	r1, #956	; 0x3bc
 80015a8:	4803      	ldr	r0, [pc, #12]	; (80015b8 <HAL_FLASHEx_Erase+0x1f0>)
 80015aa:	f001 fa4d 	bl	8002a48 <assert_failed>
 80015ae:	e787      	b.n	80014c0 <HAL_FLASHEx_Erase+0xf8>
 80015b0:	2000030c 	.word	0x2000030c
 80015b4:	40023c00 	.word	0x40023c00
 80015b8:	080047c0 	.word	0x080047c0

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80015c0:	4b9b      	ldr	r3, [pc, #620]	; (8001830 <HAL_GPIO_Init+0x274>)
 80015c2:	4298      	cmp	r0, r3
{
 80015c4:	b083      	sub	sp, #12
 80015c6:	4683      	mov	fp, r0
 80015c8:	468a      	mov	sl, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80015ca:	d017      	beq.n	80015fc <HAL_GPIO_Init+0x40>
 80015cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015d0:	4298      	cmp	r0, r3
 80015d2:	d013      	beq.n	80015fc <HAL_GPIO_Init+0x40>
 80015d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015d8:	4298      	cmp	r0, r3
 80015da:	d00f      	beq.n	80015fc <HAL_GPIO_Init+0x40>
 80015dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015e0:	4298      	cmp	r0, r3
 80015e2:	d00b      	beq.n	80015fc <HAL_GPIO_Init+0x40>
 80015e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015e8:	4298      	cmp	r0, r3
 80015ea:	d007      	beq.n	80015fc <HAL_GPIO_Init+0x40>
 80015ec:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80015f0:	4298      	cmp	r0, r3
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x40>
 80015f4:	21b3      	movs	r1, #179	; 0xb3
 80015f6:	488f      	ldr	r0, [pc, #572]	; (8001834 <HAL_GPIO_Init+0x278>)
 80015f8:	f001 fa26 	bl	8002a48 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80015fc:	f8da 3000 	ldr.w	r3, [sl]
 8001600:	b299      	uxth	r1, r3
 8001602:	2900      	cmp	r1, #0
 8001604:	f000 80b5 	beq.w	8001772 <HAL_GPIO_Init+0x1b6>
 8001608:	0c1b      	lsrs	r3, r3, #16
 800160a:	041b      	lsls	r3, r3, #16
 800160c:	2b00      	cmp	r3, #0
 800160e:	f040 80b0 	bne.w	8001772 <HAL_GPIO_Init+0x1b6>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001612:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001616:	2b03      	cmp	r3, #3
 8001618:	d917      	bls.n	800164a <HAL_GPIO_Init+0x8e>
 800161a:	f1a3 0111 	sub.w	r1, r3, #17
 800161e:	2901      	cmp	r1, #1
 8001620:	d913      	bls.n	800164a <HAL_GPIO_Init+0x8e>
 8001622:	4885      	ldr	r0, [pc, #532]	; (8001838 <HAL_GPIO_Init+0x27c>)
 8001624:	f423 1100 	bic.w	r1, r3, #2097152	; 0x200000
 8001628:	4281      	cmp	r1, r0
 800162a:	d00e      	beq.n	800164a <HAL_GPIO_Init+0x8e>
 800162c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8001630:	4283      	cmp	r3, r0
 8001632:	d00a      	beq.n	800164a <HAL_GPIO_Init+0x8e>
 8001634:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 8001638:	4281      	cmp	r1, r0
 800163a:	d006      	beq.n	800164a <HAL_GPIO_Init+0x8e>
 800163c:	497f      	ldr	r1, [pc, #508]	; (800183c <HAL_GPIO_Init+0x280>)
 800163e:	428b      	cmp	r3, r1
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x8e>
 8001642:	21b5      	movs	r1, #181	; 0xb5
 8001644:	487b      	ldr	r0, [pc, #492]	; (8001834 <HAL_GPIO_Init+0x278>)
 8001646:	f001 f9ff 	bl	8002a48 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800164a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800164e:	2b02      	cmp	r3, #2
 8001650:	f200 80e4 	bhi.w	800181c <HAL_GPIO_Init+0x260>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001654:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8001854 <HAL_GPIO_Init+0x298>
{
 8001658:	f04f 0800 	mov.w	r8, #0
 800165c:	e005      	b.n	800166a <HAL_GPIO_Init+0xae>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	f108 0801 	add.w	r8, r8, #1
 8001662:	f1b8 0f10 	cmp.w	r8, #16
 8001666:	f000 8081 	beq.w	800176c <HAL_GPIO_Init+0x1b0>
    ioposition = 0x01U << position;
 800166a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166c:	f8da 5000 	ldr.w	r5, [sl]
    ioposition = 0x01U << position;
 8001670:	fa04 f408 	lsl.w	r4, r4, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001674:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8001676:	42ac      	cmp	r4, r5
 8001678:	d1f1      	bne.n	800165e <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800167a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800167e:	f022 0110 	bic.w	r1, r2, #16
 8001682:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8001686:	2603      	movs	r6, #3
 8001688:	1e4b      	subs	r3, r1, #1
 800168a:	40be      	lsls	r6, r7
 800168c:	2b01      	cmp	r3, #1
 800168e:	ea6f 0606 	mvn.w	r6, r6
 8001692:	d973      	bls.n	800177c <HAL_GPIO_Init+0x1c0>
      temp = GPIOx->PUPDR;
 8001694:	f8db 000c 	ldr.w	r0, [fp, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001698:	f8da 3008 	ldr.w	r3, [sl, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800169c:	4030      	ands	r0, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800169e:	40bb      	lsls	r3, r7
 80016a0:	4303      	orrs	r3, r0
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a2:	2902      	cmp	r1, #2
      GPIOx->PUPDR = temp;
 80016a4:	f8cb 300c 	str.w	r3, [fp, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a8:	d07f      	beq.n	80017aa <HAL_GPIO_Init+0x1ee>
      temp = GPIOx->MODER;
 80016aa:	f8db 1000 	ldr.w	r1, [fp]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ae:	f002 0303 	and.w	r3, r2, #3
 80016b2:	40bb      	lsls	r3, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016b4:	400e      	ands	r6, r1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b6:	4333      	orrs	r3, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016b8:	00d7      	lsls	r7, r2, #3
      GPIOx->MODER = temp;
 80016ba:	f8cb 3000 	str.w	r3, [fp]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016be:	d5ce      	bpl.n	800165e <HAL_GPIO_Init+0xa2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c0:	4b5f      	ldr	r3, [pc, #380]	; (8001840 <HAL_GPIO_Init+0x284>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c2:	4c5b      	ldr	r4, [pc, #364]	; (8001830 <HAL_GPIO_Init+0x274>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c4:	2100      	movs	r1, #0
 80016c6:	9101      	str	r1, [sp, #4]
 80016c8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80016ca:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80016ce:	6459      	str	r1, [r3, #68]	; 0x44
 80016d0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80016d2:	f028 0303 	bic.w	r3, r8, #3
 80016d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016da:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80016de:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80016e2:	9101      	str	r1, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016e4:	f008 0103 	and.w	r1, r8, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e8:	9801      	ldr	r0, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80016ea:	689e      	ldr	r6, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ec:	0089      	lsls	r1, r1, #2
 80016ee:	200f      	movs	r0, #15
 80016f0:	4088      	lsls	r0, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016f2:	45a3      	cmp	fp, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f4:	ea26 0000 	bic.w	r0, r6, r0
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016f8:	d012      	beq.n	8001720 <HAL_GPIO_Init+0x164>
 80016fa:	45cb      	cmp	fp, r9
 80016fc:	f000 8084 	beq.w	8001808 <HAL_GPIO_Init+0x24c>
 8001700:	4c50      	ldr	r4, [pc, #320]	; (8001844 <HAL_GPIO_Init+0x288>)
 8001702:	45a3      	cmp	fp, r4
 8001704:	f000 8085 	beq.w	8001812 <HAL_GPIO_Init+0x256>
 8001708:	4c4f      	ldr	r4, [pc, #316]	; (8001848 <HAL_GPIO_Init+0x28c>)
 800170a:	45a3      	cmp	fp, r4
 800170c:	f000 808b 	beq.w	8001826 <HAL_GPIO_Init+0x26a>
 8001710:	4c4e      	ldr	r4, [pc, #312]	; (800184c <HAL_GPIO_Init+0x290>)
 8001712:	45a3      	cmp	fp, r4
 8001714:	bf0c      	ite	eq
 8001716:	2404      	moveq	r4, #4
 8001718:	2407      	movne	r4, #7
 800171a:	fa04 f101 	lsl.w	r1, r4, r1
 800171e:	4308      	orrs	r0, r1
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001720:	494b      	ldr	r1, [pc, #300]	; (8001850 <HAL_GPIO_Init+0x294>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001722:	6098      	str	r0, [r3, #8]
        temp = EXTI->IMR;
 8001724:	680b      	ldr	r3, [r1, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001726:	484a      	ldr	r0, [pc, #296]	; (8001850 <HAL_GPIO_Init+0x294>)
        temp &= ~((uint32_t)iocurrent);
 8001728:	43e9      	mvns	r1, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800172a:	03d6      	lsls	r6, r2, #15
          temp |= iocurrent;
 800172c:	bf4c      	ite	mi
 800172e:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8001730:	400b      	andpl	r3, r1
        EXTI->IMR = temp;
 8001732:	6003      	str	r3, [r0, #0]

        temp = EXTI->EMR;
 8001734:	6843      	ldr	r3, [r0, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001736:	4846      	ldr	r0, [pc, #280]	; (8001850 <HAL_GPIO_Init+0x294>)
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001738:	0394      	lsls	r4, r2, #14
          temp |= iocurrent;
 800173a:	bf4c      	ite	mi
 800173c:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 800173e:	400b      	andpl	r3, r1
        EXTI->EMR = temp;
 8001740:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001742:	6883      	ldr	r3, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001744:	02d0      	lsls	r0, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001746:	4842      	ldr	r0, [pc, #264]	; (8001850 <HAL_GPIO_Init+0x294>)
          temp |= iocurrent;
 8001748:	bf4c      	ite	mi
 800174a:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 800174c:	400b      	andpl	r3, r1
        EXTI->RTSR = temp;
 800174e:	6083      	str	r3, [r0, #8]

        temp = EXTI->FTSR;
 8001750:	68c3      	ldr	r3, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001752:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8001754:	bf54      	ite	pl
 8001756:	ea01 0503 	andpl.w	r5, r1, r3
        {
          temp |= iocurrent;
 800175a:	431d      	orrmi	r5, r3
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175c:	f108 0801 	add.w	r8, r8, #1
        }
        EXTI->FTSR = temp;
 8001760:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <HAL_GPIO_Init+0x294>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001762:	f1b8 0f10 	cmp.w	r8, #16
        EXTI->FTSR = temp;
 8001766:	60dd      	str	r5, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001768:	f47f af7f 	bne.w	800166a <HAL_GPIO_Init+0xae>
      }
    }
  }
}
 800176c:	b003      	add	sp, #12
 800176e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001772:	21b4      	movs	r1, #180	; 0xb4
 8001774:	482f      	ldr	r0, [pc, #188]	; (8001834 <HAL_GPIO_Init+0x278>)
 8001776:	f001 f967 	bl	8002a48 <assert_failed>
 800177a:	e74a      	b.n	8001612 <HAL_GPIO_Init+0x56>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800177c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8001780:	2b03      	cmp	r3, #3
 8001782:	d836      	bhi.n	80017f2 <HAL_GPIO_Init+0x236>
        temp = GPIOx->OSPEEDR; 
 8001784:	f8db 0008 	ldr.w	r0, [fp, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001788:	40bb      	lsls	r3, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800178a:	4030      	ands	r0, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178c:	4303      	orrs	r3, r0
        GPIOx->OSPEEDR = temp;
 800178e:	f8cb 3008 	str.w	r3, [fp, #8]
        temp = GPIOx->OTYPER;
 8001792:	f8db 0004 	ldr.w	r0, [fp, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001796:	f3c2 1300 	ubfx	r3, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800179a:	ea20 0004 	bic.w	r0, r0, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800179e:	fa03 f408 	lsl.w	r4, r3, r8
 80017a2:	4304      	orrs	r4, r0
        GPIOx->OTYPER = temp;
 80017a4:	f8cb 4004 	str.w	r4, [fp, #4]
 80017a8:	e774      	b.n	8001694 <HAL_GPIO_Init+0xd8>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80017aa:	f8da 3010 	ldr.w	r3, [sl, #16]
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	d919      	bls.n	80017e6 <HAL_GPIO_Init+0x22a>
 80017b2:	21e0      	movs	r1, #224	; 0xe0
 80017b4:	481f      	ldr	r0, [pc, #124]	; (8001834 <HAL_GPIO_Init+0x278>)
 80017b6:	f001 f947 	bl	8002a48 <assert_failed>
 80017ba:	f8da 3010 	ldr.w	r3, [sl, #16]
 80017be:	f8da 2004 	ldr.w	r2, [sl, #4]
        temp = GPIOx->AFR[position >> 3U];
 80017c2:	ea4f 00d8 	mov.w	r0, r8, lsr #3
 80017c6:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ca:	f008 0107 	and.w	r1, r8, #7
        temp = GPIOx->AFR[position >> 3U];
 80017ce:	6a04      	ldr	r4, [r0, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017d0:	0089      	lsls	r1, r1, #2
 80017d2:	f04f 0c0f 	mov.w	ip, #15
 80017d6:	fa0c fc01 	lsl.w	ip, ip, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017da:	408b      	lsls	r3, r1
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017dc:	ea24 040c 	bic.w	r4, r4, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e0:	4323      	orrs	r3, r4
        GPIOx->AFR[position >> 3U] = temp;
 80017e2:	6203      	str	r3, [r0, #32]
 80017e4:	e761      	b.n	80016aa <HAL_GPIO_Init+0xee>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80017e6:	f249 71f7 	movw	r1, #38903	; 0x97f7
 80017ea:	40d9      	lsrs	r1, r3
 80017ec:	07c9      	lsls	r1, r1, #31
 80017ee:	d4e8      	bmi.n	80017c2 <HAL_GPIO_Init+0x206>
 80017f0:	e7df      	b.n	80017b2 <HAL_GPIO_Init+0x1f6>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80017f2:	21c8      	movs	r1, #200	; 0xc8
 80017f4:	480f      	ldr	r0, [pc, #60]	; (8001834 <HAL_GPIO_Init+0x278>)
 80017f6:	f001 f927 	bl	8002a48 <assert_failed>
 80017fa:	f8da 2004 	ldr.w	r2, [sl, #4]
 80017fe:	f8da 300c 	ldr.w	r3, [sl, #12]
 8001802:	f022 0110 	bic.w	r1, r2, #16
 8001806:	e7bd      	b.n	8001784 <HAL_GPIO_Init+0x1c8>
 8001808:	2401      	movs	r4, #1
 800180a:	fa04 f101 	lsl.w	r1, r4, r1
 800180e:	4308      	orrs	r0, r1
 8001810:	e786      	b.n	8001720 <HAL_GPIO_Init+0x164>
 8001812:	2402      	movs	r4, #2
 8001814:	fa04 f101 	lsl.w	r1, r4, r1
 8001818:	4308      	orrs	r0, r1
 800181a:	e781      	b.n	8001720 <HAL_GPIO_Init+0x164>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800181c:	21b6      	movs	r1, #182	; 0xb6
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <HAL_GPIO_Init+0x278>)
 8001820:	f001 f912 	bl	8002a48 <assert_failed>
 8001824:	e716      	b.n	8001654 <HAL_GPIO_Init+0x98>
 8001826:	2403      	movs	r4, #3
 8001828:	fa04 f101 	lsl.w	r1, r4, r1
 800182c:	4308      	orrs	r0, r1
 800182e:	e777      	b.n	8001720 <HAL_GPIO_Init+0x164>
 8001830:	40020000 	.word	0x40020000
 8001834:	08004800 	.word	0x08004800
 8001838:	10110000 	.word	0x10110000
 800183c:	10220000 	.word	0x10220000
 8001840:	40023800 	.word	0x40023800
 8001844:	40020800 	.word	0x40020800
 8001848:	40020c00 	.word	0x40020c00
 800184c:	40021000 	.word	0x40021000
 8001850:	40013c00 	.word	0x40013c00
 8001854:	40020400 	.word	0x40020400

08001858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001858:	b570      	push	{r4, r5, r6, lr}
 800185a:	4606      	mov	r6, r0
 800185c:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800185e:	460c      	mov	r4, r1
 8001860:	b161      	cbz	r1, 800187c <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001862:	2d01      	cmp	r5, #1
 8001864:	d803      	bhi.n	800186e <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 8001866:	b905      	cbnz	r5, 800186a <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001868:	0424      	lsls	r4, r4, #16
 800186a:	61b4      	str	r4, [r6, #24]
  }
}
 800186c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800186e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <HAL_GPIO_WritePin+0x30>)
 8001874:	f001 f8e8 	bl	8002a48 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001878:	61b4      	str	r4, [r6, #24]
}
 800187a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800187c:	f240 119f 	movw	r1, #415	; 0x19f
 8001880:	4801      	ldr	r0, [pc, #4]	; (8001888 <HAL_GPIO_WritePin+0x30>)
 8001882:	f001 f8e1 	bl	8002a48 <assert_failed>
 8001886:	e7ec      	b.n	8001862 <HAL_GPIO_WritePin+0xa>
 8001888:	08004800 	.word	0x08004800

0800188c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800188c:	2800      	cmp	r0, #0
 800188e:	f000 81d2 	beq.w	8001c36 <HAL_RCC_OscConfig+0x3aa>
{
 8001892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001896:	6803      	ldr	r3, [r0, #0]
 8001898:	2b0f      	cmp	r3, #15
{
 800189a:	b082      	sub	sp, #8
 800189c:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800189e:	f200 8138 	bhi.w	8001b12 <HAL_RCC_OscConfig+0x286>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a2:	07dd      	lsls	r5, r3, #31
 80018a4:	d53a      	bpl.n	800191c <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80018a6:	6863      	ldr	r3, [r4, #4]
 80018a8:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 80018ac:	d006      	beq.n	80018bc <HAL_RCC_OscConfig+0x30>
 80018ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b2:	d003      	beq.n	80018bc <HAL_RCC_OscConfig+0x30>
 80018b4:	21ed      	movs	r1, #237	; 0xed
 80018b6:	48b2      	ldr	r0, [pc, #712]	; (8001b80 <HAL_RCC_OscConfig+0x2f4>)
 80018b8:	f001 f8c6 	bl	8002a48 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018bc:	4ab1      	ldr	r2, [pc, #708]	; (8001b84 <HAL_RCC_OscConfig+0x2f8>)
 80018be:	6893      	ldr	r3, [r2, #8]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	f000 8175 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x328>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ca:	6893      	ldr	r3, [r2, #8]
 80018cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	f000 816b 	beq.w	8001bac <HAL_RCC_OscConfig+0x320>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d6:	6863      	ldr	r3, [r4, #4]
 80018d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018dc:	f000 8174 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x33c>
 80018e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e4:	f000 8217 	beq.w	8001d16 <HAL_RCC_OscConfig+0x48a>
 80018e8:	4da6      	ldr	r5, [pc, #664]	; (8001b84 <HAL_RCC_OscConfig+0x2f8>)
 80018ea:	682a      	ldr	r2, [r5, #0]
 80018ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018f0:	602a      	str	r2, [r5, #0]
 80018f2:	682a      	ldr	r2, [r5, #0]
 80018f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018f8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f040 8169 	bne.w	8001bd2 <HAL_RCC_OscConfig+0x346>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fae8 	bl	8000ed4 <HAL_GetTick>
 8001904:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001906:	e005      	b.n	8001914 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff fae4 	bl	8000ed4 <HAL_GetTick>
 800190c:	1b80      	subs	r0, r0, r6
 800190e:	2864      	cmp	r0, #100	; 0x64
 8001910:	f200 817d 	bhi.w	8001c0e <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001914:	682b      	ldr	r3, [r5, #0]
 8001916:	039b      	lsls	r3, r3, #14
 8001918:	d4f6      	bmi.n	8001908 <HAL_RCC_OscConfig+0x7c>
 800191a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191c:	079f      	lsls	r7, r3, #30
 800191e:	f100 80c9 	bmi.w	8001ab4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001922:	071a      	lsls	r2, r3, #28
 8001924:	d518      	bpl.n	8001958 <HAL_RCC_OscConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001926:	6963      	ldr	r3, [r4, #20]
 8001928:	2b01      	cmp	r3, #1
 800192a:	f200 811f 	bhi.w	8001b6c <HAL_RCC_OscConfig+0x2e0>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 810c 	beq.w	8001b4c <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001934:	4b94      	ldr	r3, [pc, #592]	; (8001b88 <HAL_RCC_OscConfig+0x2fc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	4d93      	ldr	r5, [pc, #588]	; (8001b84 <HAL_RCC_OscConfig+0x2f8>)
      __HAL_RCC_LSI_ENABLE();
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800193c:	f7ff faca 	bl	8000ed4 <HAL_GetTick>
 8001940:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	e005      	b.n	8001950 <HAL_RCC_OscConfig+0xc4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fac6 	bl	8000ed4 <HAL_GetTick>
 8001948:	1b80      	subs	r0, r0, r6
 800194a:	2802      	cmp	r0, #2
 800194c:	f200 815f 	bhi.w	8001c0e <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001950:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001952:	079b      	lsls	r3, r3, #30
 8001954:	d5f6      	bpl.n	8001944 <HAL_RCC_OscConfig+0xb8>
 8001956:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001958:	075d      	lsls	r5, r3, #29
 800195a:	d545      	bpl.n	80019e8 <HAL_RCC_OscConfig+0x15c>
  {
    FlagStatus       pwrclkchanged = RESET;

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800195c:	68a3      	ldr	r3, [r4, #8]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d906      	bls.n	8001970 <HAL_RCC_OscConfig+0xe4>
 8001962:	2b05      	cmp	r3, #5
 8001964:	d004      	beq.n	8001970 <HAL_RCC_OscConfig+0xe4>
 8001966:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800196a:	4885      	ldr	r0, [pc, #532]	; (8001b80 <HAL_RCC_OscConfig+0x2f4>)
 800196c:	f001 f86c 	bl	8002a48 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001970:	4a84      	ldr	r2, [pc, #528]	; (8001b84 <HAL_RCC_OscConfig+0x2f8>)
 8001972:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001974:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001978:	f040 815f 	bne.w	8001c3a <HAL_RCC_OscConfig+0x3ae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001990:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001992:	4d7e      	ldr	r5, [pc, #504]	; (8001b8c <HAL_RCC_OscConfig+0x300>)
 8001994:	682a      	ldr	r2, [r5, #0]
 8001996:	05d0      	lsls	r0, r2, #23
 8001998:	f140 8129 	bpl.w	8001bee <HAL_RCC_OscConfig+0x362>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199c:	68a3      	ldr	r3, [r4, #8]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	f000 814d 	beq.w	8001c3e <HAL_RCC_OscConfig+0x3b2>
 80019a4:	2b05      	cmp	r3, #5
 80019a6:	f000 81c0 	beq.w	8001d2a <HAL_RCC_OscConfig+0x49e>
 80019aa:	4d76      	ldr	r5, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x2f8>)
 80019ac:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	672a      	str	r2, [r5, #112]	; 0x70
 80019b4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80019b6:	f022 0204 	bic.w	r2, r2, #4
 80019ba:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f040 8143 	bne.w	8001c48 <HAL_RCC_OscConfig+0x3bc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c2:	f7ff fa87 	bl	8000ed4 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80019ca:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019cc:	e006      	b.n	80019dc <HAL_RCC_OscConfig+0x150>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ce:	f7ff fa81 	bl	8000ed4 <HAL_GetTick>
 80019d2:	eba0 0008 	sub.w	r0, r0, r8
 80019d6:	42b8      	cmp	r0, r7
 80019d8:	f200 8119 	bhi.w	8001c0e <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019de:	079b      	lsls	r3, r3, #30
 80019e0:	d4f5      	bmi.n	80019ce <HAL_RCC_OscConfig+0x142>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019e2:	2e00      	cmp	r6, #0
 80019e4:	f040 8166 	bne.w	8001cb4 <HAL_RCC_OscConfig+0x428>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80019e8:	69a0      	ldr	r0, [r4, #24]
 80019ea:	2802      	cmp	r0, #2
 80019ec:	f200 80d4 	bhi.w	8001b98 <HAL_RCC_OscConfig+0x30c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f0:	2800      	cmp	r0, #0
 80019f2:	d05b      	beq.n	8001aac <HAL_RCC_OscConfig+0x220>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019f4:	4b63      	ldr	r3, [pc, #396]	; (8001b84 <HAL_RCC_OscConfig+0x2f8>)
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	f002 020c 	and.w	r2, r2, #12
 80019fc:	2a08      	cmp	r2, #8
 80019fe:	f000 815f 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x434>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a02:	2802      	cmp	r0, #2
 8001a04:	f040 8145 	bne.w	8001c92 <HAL_RCC_OscConfig+0x406>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001a08:	69e3      	ldr	r3, [r4, #28]
 8001a0a:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8001a0e:	d004      	beq.n	8001a1a <HAL_RCC_OscConfig+0x18e>
 8001a10:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001a14:	485a      	ldr	r0, [pc, #360]	; (8001b80 <HAL_RCC_OscConfig+0x2f4>)
 8001a16:	f001 f817 	bl	8002a48 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001a1a:	6a23      	ldr	r3, [r4, #32]
 8001a1c:	2b3f      	cmp	r3, #63	; 0x3f
 8001a1e:	f200 819a 	bhi.w	8001d56 <HAL_RCC_OscConfig+0x4ca>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a24:	3b32      	subs	r3, #50	; 0x32
 8001a26:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8001a2a:	f200 818e 	bhi.w	8001d4a <HAL_RCC_OscConfig+0x4be>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001a2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a30:	2a08      	cmp	r2, #8
 8001a32:	f240 8169 	bls.w	8001d08 <HAL_RCC_OscConfig+0x47c>
 8001a36:	f240 11db 	movw	r1, #475	; 0x1db
 8001a3a:	4851      	ldr	r0, [pc, #324]	; (8001b80 <HAL_RCC_OscConfig+0x2f4>)
 8001a3c:	f001 f804 	bl	8002a48 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001a40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a42:	3b02      	subs	r3, #2
 8001a44:	2b0d      	cmp	r3, #13
 8001a46:	f200 817a 	bhi.w	8001d3e <HAL_RCC_OscConfig+0x4b2>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	4b51      	ldr	r3, [pc, #324]	; (8001b90 <HAL_RCC_OscConfig+0x304>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4c:	4d4d      	ldr	r5, [pc, #308]	; (8001b84 <HAL_RCC_OscConfig+0x2f8>)
        __HAL_RCC_PLL_DISABLE();
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a52:	f7ff fa3f 	bl	8000ed4 <HAL_GetTick>
 8001a56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a58:	e005      	b.n	8001a66 <HAL_RCC_OscConfig+0x1da>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5a:	f7ff fa3b 	bl	8000ed4 <HAL_GetTick>
 8001a5e:	1b80      	subs	r0, r0, r6
 8001a60:	2802      	cmp	r0, #2
 8001a62:	f200 80d4 	bhi.w	8001c0e <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a66:	682b      	ldr	r3, [r5, #0]
 8001a68:	0199      	lsls	r1, r3, #6
 8001a6a:	d4f6      	bmi.n	8001a5a <HAL_RCC_OscConfig+0x1ce>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a6c:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8001a70:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001a74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a76:	4c43      	ldr	r4, [pc, #268]	; (8001b84 <HAL_RCC_OscConfig+0x2f8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a78:	4333      	orrs	r3, r6
 8001a7a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001a7e:	0852      	lsrs	r2, r2, #1
 8001a80:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001a84:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001a86:	4942      	ldr	r1, [pc, #264]	; (8001b90 <HAL_RCC_OscConfig+0x304>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001a8c:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a8e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a90:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8001a92:	f7ff fa1f 	bl	8000ed4 <HAL_GetTick>
 8001a96:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a98:	e005      	b.n	8001aa6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7ff fa1b 	bl	8000ed4 <HAL_GetTick>
 8001a9e:	1b40      	subs	r0, r0, r5
 8001aa0:	2802      	cmp	r0, #2
 8001aa2:	f200 80b4 	bhi.w	8001c0e <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	019a      	lsls	r2, r3, #6
 8001aaa:	d5f6      	bpl.n	8001a9a <HAL_RCC_OscConfig+0x20e>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001aac:	2000      	movs	r0, #0
}
 8001aae:	b002      	add	sp, #8
 8001ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001ab4:	68e3      	ldr	r3, [r4, #12]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d842      	bhi.n	8001b40 <HAL_RCC_OscConfig+0x2b4>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001aba:	6923      	ldr	r3, [r4, #16]
 8001abc:	2b1f      	cmp	r3, #31
 8001abe:	f200 80b4 	bhi.w	8001c2a <HAL_RCC_OscConfig+0x39e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ac2:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <HAL_RCC_OscConfig+0x2f8>)
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	f012 0f0c 	tst.w	r2, #12
 8001aca:	d02e      	beq.n	8001b2a <HAL_RCC_OscConfig+0x29e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ad2:	2a08      	cmp	r2, #8
 8001ad4:	d026      	beq.n	8001b24 <HAL_RCC_OscConfig+0x298>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ad6:	68e3      	ldr	r3, [r4, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 80c9 	beq.w	8001c70 <HAL_RCC_OscConfig+0x3e4>
        __HAL_RCC_HSI_ENABLE();
 8001ade:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae0:	4d28      	ldr	r5, [pc, #160]	; (8001b84 <HAL_RCC_OscConfig+0x2f8>)
        __HAL_RCC_HSI_ENABLE();
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ae6:	f7ff f9f5 	bl	8000ed4 <HAL_GetTick>
 8001aea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aec:	e005      	b.n	8001afa <HAL_RCC_OscConfig+0x26e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aee:	f7ff f9f1 	bl	8000ed4 <HAL_GetTick>
 8001af2:	1b80      	subs	r0, r0, r6
 8001af4:	2802      	cmp	r0, #2
 8001af6:	f200 808a 	bhi.w	8001c0e <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afa:	682b      	ldr	r3, [r5, #0]
 8001afc:	0798      	lsls	r0, r3, #30
 8001afe:	d5f6      	bpl.n	8001aee <HAL_RCC_OscConfig+0x262>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b00:	682b      	ldr	r3, [r5, #0]
 8001b02:	6922      	ldr	r2, [r4, #16]
 8001b04:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b08:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b0c:	602b      	str	r3, [r5, #0]
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	e707      	b.n	8001922 <HAL_RCC_OscConfig+0x96>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001b12:	21e8      	movs	r1, #232	; 0xe8
 8001b14:	481a      	ldr	r0, [pc, #104]	; (8001b80 <HAL_RCC_OscConfig+0x2f4>)
 8001b16:	f000 ff97 	bl	8002a48 <assert_failed>
 8001b1a:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1c:	07dd      	lsls	r5, r3, #31
 8001b1e:	f57f aefd 	bpl.w	800191c <HAL_RCC_OscConfig+0x90>
 8001b22:	e6c0      	b.n	80018a6 <HAL_RCC_OscConfig+0x1a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	025e      	lsls	r6, r3, #9
 8001b28:	d4d5      	bmi.n	8001ad6 <HAL_RCC_OscConfig+0x24a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_RCC_OscConfig+0x2f8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	079d      	lsls	r5, r3, #30
 8001b30:	d571      	bpl.n	8001c16 <HAL_RCC_OscConfig+0x38a>
 8001b32:	68e3      	ldr	r3, [r4, #12]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d06e      	beq.n	8001c16 <HAL_RCC_OscConfig+0x38a>
        return HAL_ERROR;
 8001b38:	2001      	movs	r0, #1
}
 8001b3a:	b002      	add	sp, #8
 8001b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001b40:	f240 111f 	movw	r1, #287	; 0x11f
 8001b44:	480e      	ldr	r0, [pc, #56]	; (8001b80 <HAL_RCC_OscConfig+0x2f4>)
 8001b46:	f000 ff7f 	bl	8002a48 <assert_failed>
 8001b4a:	e7b6      	b.n	8001aba <HAL_RCC_OscConfig+0x22e>
      __HAL_RCC_LSI_DISABLE();
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <HAL_RCC_OscConfig+0x2fc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b4e:	4d0d      	ldr	r5, [pc, #52]	; (8001b84 <HAL_RCC_OscConfig+0x2f8>)
      __HAL_RCC_LSI_DISABLE();
 8001b50:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001b52:	f7ff f9bf 	bl	8000ed4 <HAL_GetTick>
 8001b56:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b58:	e004      	b.n	8001b64 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b5a:	f7ff f9bb 	bl	8000ed4 <HAL_GetTick>
 8001b5e:	1b80      	subs	r0, r0, r6
 8001b60:	2802      	cmp	r0, #2
 8001b62:	d854      	bhi.n	8001c0e <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b64:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001b66:	079f      	lsls	r7, r3, #30
 8001b68:	d4f7      	bmi.n	8001b5a <HAL_RCC_OscConfig+0x2ce>
 8001b6a:	e6f4      	b.n	8001956 <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001b6c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <HAL_RCC_OscConfig+0x2f4>)
 8001b72:	f000 ff69 	bl	8002a48 <assert_failed>
 8001b76:	6963      	ldr	r3, [r4, #20]
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0e7      	beq.n	8001b4c <HAL_RCC_OscConfig+0x2c0>
 8001b7c:	e6da      	b.n	8001934 <HAL_RCC_OscConfig+0xa8>
 8001b7e:	bf00      	nop
 8001b80:	0800483c 	.word	0x0800483c
 8001b84:	40023800 	.word	0x40023800
 8001b88:	42470e80 	.word	0x42470e80
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	42470060 	.word	0x42470060
 8001b94:	42470000 	.word	0x42470000
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001b98:	4872      	ldr	r0, [pc, #456]	; (8001d64 <HAL_RCC_OscConfig+0x4d8>)
 8001b9a:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001b9e:	f000 ff53 	bl	8002a48 <assert_failed>
 8001ba2:	69a0      	ldr	r0, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	f47f af25 	bne.w	80019f4 <HAL_RCC_OscConfig+0x168>
 8001baa:	e77f      	b.n	8001aac <HAL_RCC_OscConfig+0x220>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bac:	6853      	ldr	r3, [r2, #4]
 8001bae:	0258      	lsls	r0, r3, #9
 8001bb0:	f57f ae91 	bpl.w	80018d6 <HAL_RCC_OscConfig+0x4a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	4b6c      	ldr	r3, [pc, #432]	; (8001d68 <HAL_RCC_OscConfig+0x4dc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0399      	lsls	r1, r3, #14
 8001bba:	f57f aeae 	bpl.w	800191a <HAL_RCC_OscConfig+0x8e>
 8001bbe:	6863      	ldr	r3, [r4, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f47f aeaa 	bne.w	800191a <HAL_RCC_OscConfig+0x8e>
 8001bc6:	e7b7      	b.n	8001b38 <HAL_RCC_OscConfig+0x2ac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc8:	4a67      	ldr	r2, [pc, #412]	; (8001d68 <HAL_RCC_OscConfig+0x4dc>)
 8001bca:	6813      	ldr	r3, [r2, #0]
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f97f 	bl	8000ed4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	4d64      	ldr	r5, [pc, #400]	; (8001d68 <HAL_RCC_OscConfig+0x4dc>)
        tickstart = HAL_GetTick();
 8001bd8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	e004      	b.n	8001be6 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff f97a 	bl	8000ed4 <HAL_GetTick>
 8001be0:	1b80      	subs	r0, r0, r6
 8001be2:	2864      	cmp	r0, #100	; 0x64
 8001be4:	d813      	bhi.n	8001c0e <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	682b      	ldr	r3, [r5, #0]
 8001be8:	039a      	lsls	r2, r3, #14
 8001bea:	d5f7      	bpl.n	8001bdc <HAL_RCC_OscConfig+0x350>
 8001bec:	e695      	b.n	800191a <HAL_RCC_OscConfig+0x8e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bee:	682a      	ldr	r2, [r5, #0]
 8001bf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bf4:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8001bf6:	f7ff f96d 	bl	8000ed4 <HAL_GetTick>
 8001bfa:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	682b      	ldr	r3, [r5, #0]
 8001bfe:	05d9      	lsls	r1, r3, #23
 8001c00:	f53f aecc 	bmi.w	800199c <HAL_RCC_OscConfig+0x110>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c04:	f7ff f966 	bl	8000ed4 <HAL_GetTick>
 8001c08:	1bc0      	subs	r0, r0, r7
 8001c0a:	2802      	cmp	r0, #2
 8001c0c:	d9f6      	bls.n	8001bfc <HAL_RCC_OscConfig+0x370>
            return HAL_TIMEOUT;
 8001c0e:	2003      	movs	r0, #3
}
 8001c10:	b002      	add	sp, #8
 8001c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c16:	4a54      	ldr	r2, [pc, #336]	; (8001d68 <HAL_RCC_OscConfig+0x4dc>)
 8001c18:	6921      	ldr	r1, [r4, #16]
 8001c1a:	6813      	ldr	r3, [r2, #0]
 8001c1c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c20:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	6823      	ldr	r3, [r4, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c28:	e67b      	b.n	8001922 <HAL_RCC_OscConfig+0x96>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001c2a:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001c2e:	484d      	ldr	r0, [pc, #308]	; (8001d64 <HAL_RCC_OscConfig+0x4d8>)
 8001c30:	f000 ff0a 	bl	8002a48 <assert_failed>
 8001c34:	e745      	b.n	8001ac2 <HAL_RCC_OscConfig+0x236>
    return HAL_ERROR;
 8001c36:	2001      	movs	r0, #1
}
 8001c38:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8001c3a:	2600      	movs	r6, #0
 8001c3c:	e6a9      	b.n	8001992 <HAL_RCC_OscConfig+0x106>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3e:	4a4a      	ldr	r2, [pc, #296]	; (8001d68 <HAL_RCC_OscConfig+0x4dc>)
 8001c40:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001c48:	f7ff f944 	bl	8000ed4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4c:	4d46      	ldr	r5, [pc, #280]	; (8001d68 <HAL_RCC_OscConfig+0x4dc>)
      tickstart = HAL_GetTick();
 8001c4e:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c50:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c54:	e005      	b.n	8001c62 <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c56:	f7ff f93d 	bl	8000ed4 <HAL_GetTick>
 8001c5a:	eba0 0008 	sub.w	r0, r0, r8
 8001c5e:	42b8      	cmp	r0, r7
 8001c60:	d8d5      	bhi.n	8001c0e <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c62:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c64:	079a      	lsls	r2, r3, #30
 8001c66:	d5f6      	bpl.n	8001c56 <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 8001c68:	2e00      	cmp	r6, #0
 8001c6a:	f43f aebd 	beq.w	80019e8 <HAL_RCC_OscConfig+0x15c>
 8001c6e:	e021      	b.n	8001cb4 <HAL_RCC_OscConfig+0x428>
        __HAL_RCC_HSI_DISABLE();
 8001c70:	4a3e      	ldr	r2, [pc, #248]	; (8001d6c <HAL_RCC_OscConfig+0x4e0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c72:	4d3d      	ldr	r5, [pc, #244]	; (8001d68 <HAL_RCC_OscConfig+0x4dc>)
        __HAL_RCC_HSI_DISABLE();
 8001c74:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001c76:	f7ff f92d 	bl	8000ed4 <HAL_GetTick>
 8001c7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7c:	e004      	b.n	8001c88 <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff f929 	bl	8000ed4 <HAL_GetTick>
 8001c82:	1b80      	subs	r0, r0, r6
 8001c84:	2802      	cmp	r0, #2
 8001c86:	d8c2      	bhi.n	8001c0e <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c88:	682b      	ldr	r3, [r5, #0]
 8001c8a:	0799      	lsls	r1, r3, #30
 8001c8c:	d4f7      	bmi.n	8001c7e <HAL_RCC_OscConfig+0x3f2>
 8001c8e:	6823      	ldr	r3, [r4, #0]
 8001c90:	e647      	b.n	8001922 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4a37      	ldr	r2, [pc, #220]	; (8001d70 <HAL_RCC_OscConfig+0x4e4>)
 8001c94:	2100      	movs	r1, #0
 8001c96:	6011      	str	r1, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c98:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 8001c9a:	f7ff f91b 	bl	8000ed4 <HAL_GetTick>
 8001c9e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca0:	e004      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca2:	f7ff f917 	bl	8000ed4 <HAL_GetTick>
 8001ca6:	1b40      	subs	r0, r0, r5
 8001ca8:	2802      	cmp	r0, #2
 8001caa:	d8b0      	bhi.n	8001c0e <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	019b      	lsls	r3, r3, #6
 8001cb0:	d4f7      	bmi.n	8001ca2 <HAL_RCC_OscConfig+0x416>
 8001cb2:	e6fb      	b.n	8001aac <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb4:	4a2c      	ldr	r2, [pc, #176]	; (8001d68 <HAL_RCC_OscConfig+0x4dc>)
 8001cb6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	e693      	b.n	80019e8 <HAL_RCC_OscConfig+0x15c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc0:	2801      	cmp	r0, #1
 8001cc2:	f43f af3a 	beq.w	8001b3a <HAL_RCC_OscConfig+0x2ae>
        pll_config = RCC->PLLCFGR;
 8001cc6:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc8:	69e2      	ldr	r2, [r4, #28]
 8001cca:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001cce:	4291      	cmp	r1, r2
 8001cd0:	f47f af32 	bne.w	8001b38 <HAL_RCC_OscConfig+0x2ac>
 8001cd4:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cd6:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	4291      	cmp	r1, r2
 8001cdc:	f47f af2c 	bne.w	8001b38 <HAL_RCC_OscConfig+0x2ac>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ce0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ce4:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ce6:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ce8:	428a      	cmp	r2, r1
 8001cea:	f47f af25 	bne.w	8001b38 <HAL_RCC_OscConfig+0x2ac>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001cee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cf0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001cf4:	4291      	cmp	r1, r2
 8001cf6:	f47f af1f 	bne.w	8001b38 <HAL_RCC_OscConfig+0x2ac>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cfa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001cfc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 8001d00:	1a18      	subs	r0, r3, r0
 8001d02:	bf18      	it	ne
 8001d04:	2001      	movne	r0, #1
 8001d06:	e718      	b.n	8001b3a <HAL_RCC_OscConfig+0x2ae>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001d08:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8001d0c:	40d3      	lsrs	r3, r2
 8001d0e:	07d8      	lsls	r0, r3, #31
 8001d10:	f53f ae96 	bmi.w	8001a40 <HAL_RCC_OscConfig+0x1b4>
 8001d14:	e68f      	b.n	8001a36 <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <HAL_RCC_OscConfig+0x4dc>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e753      	b.n	8001bd2 <HAL_RCC_OscConfig+0x346>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <HAL_RCC_OscConfig+0x4dc>)
 8001d2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d2e:	f042 0204 	orr.w	r2, r2, #4
 8001d32:	671a      	str	r2, [r3, #112]	; 0x70
 8001d34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	671a      	str	r2, [r3, #112]	; 0x70
 8001d3c:	e784      	b.n	8001c48 <HAL_RCC_OscConfig+0x3bc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001d3e:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001d42:	4808      	ldr	r0, [pc, #32]	; (8001d64 <HAL_RCC_OscConfig+0x4d8>)
 8001d44:	f000 fe80 	bl	8002a48 <assert_failed>
 8001d48:	e67f      	b.n	8001a4a <HAL_RCC_OscConfig+0x1be>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001d4a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <HAL_RCC_OscConfig+0x4d8>)
 8001d50:	f000 fe7a 	bl	8002a48 <assert_failed>
 8001d54:	e66b      	b.n	8001a2e <HAL_RCC_OscConfig+0x1a2>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001d56:	f240 11d9 	movw	r1, #473	; 0x1d9
 8001d5a:	4802      	ldr	r0, [pc, #8]	; (8001d64 <HAL_RCC_OscConfig+0x4d8>)
 8001d5c:	f000 fe74 	bl	8002a48 <assert_failed>
 8001d60:	e65f      	b.n	8001a22 <HAL_RCC_OscConfig+0x196>
 8001d62:	bf00      	nop
 8001d64:	0800483c 	.word	0x0800483c
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	42470000 	.word	0x42470000
 8001d70:	42470060 	.word	0x42470060

08001d74 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d74:	4917      	ldr	r1, [pc, #92]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8001d76:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d78:	688b      	ldr	r3, [r1, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d01b      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x46>
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d117      	bne.n	8001db6 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d86:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d88:	684b      	ldr	r3, [r1, #4]
 8001d8a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d92:	d114      	bne.n	8001dbe <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d94:	6849      	ldr	r1, [r1, #4]
 8001d96:	4810      	ldr	r0, [pc, #64]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x64>)
 8001d98:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001d9c:	fba1 0100 	umull	r0, r1, r1, r0
 8001da0:	f7fe feb6 	bl	8000b10 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001dac:	3301      	adds	r3, #1
 8001dae:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001db0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001db4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001db6:	4808      	ldr	r0, [pc, #32]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001db8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001dba:	4808      	ldr	r0, [pc, #32]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001dbc:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dbe:	684b      	ldr	r3, [r1, #4]
 8001dc0:	4806      	ldr	r0, [pc, #24]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x68>)
 8001dc2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001dc6:	fba3 0100 	umull	r0, r1, r3, r0
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f7fe fea0 	bl	8000b10 <__aeabi_uldivmod>
 8001dd0:	e7e8      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x30>
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	00f42400 	.word	0x00f42400
 8001ddc:	007a1200 	.word	0x007a1200

08001de0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001de0:	2800      	cmp	r0, #0
 8001de2:	f000 80f1 	beq.w	8001fc8 <HAL_RCC_ClockConfig+0x1e8>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001de6:	6803      	ldr	r3, [r0, #0]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	2b0e      	cmp	r3, #14
{
 8001dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001df0:	4604      	mov	r4, r0
 8001df2:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001df4:	f200 80d2 	bhi.w	8001f9c <HAL_RCC_ClockConfig+0x1bc>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001df8:	2d07      	cmp	r5, #7
 8001dfa:	f200 80c2 	bhi.w	8001f82 <HAL_RCC_ClockConfig+0x1a2>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dfe:	4a76      	ldr	r2, [pc, #472]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e00:	6813      	ldr	r3, [r2, #0]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	42ab      	cmp	r3, r5
 8001e08:	d209      	bcs.n	8001e1e <HAL_RCC_ClockConfig+0x3e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	b2eb      	uxtb	r3, r5
 8001e0c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	6813      	ldr	r3, [r2, #0]
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	42ab      	cmp	r3, r5
 8001e16:	d002      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x3e>
    return HAL_ERROR;
 8001e18:	2001      	movs	r0, #1
}
 8001e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	0798      	lsls	r0, r3, #30
 8001e22:	d52c      	bpl.n	8001e7e <HAL_RCC_ClockConfig+0x9e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e24:	0759      	lsls	r1, r3, #29
 8001e26:	d504      	bpl.n	8001e32 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e28:	496c      	ldr	r1, [pc, #432]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001e2a:	688a      	ldr	r2, [r1, #8]
 8001e2c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001e30:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e32:	071a      	lsls	r2, r3, #28
 8001e34:	d504      	bpl.n	8001e40 <HAL_RCC_ClockConfig+0x60>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e36:	4969      	ldr	r1, [pc, #420]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001e38:	688a      	ldr	r2, [r1, #8]
 8001e3a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001e3e:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001e40:	68a1      	ldr	r1, [r4, #8]
 8001e42:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 8001e46:	d014      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x92>
 8001e48:	f021 0220 	bic.w	r2, r1, #32
 8001e4c:	2a90      	cmp	r2, #144	; 0x90
 8001e4e:	d010      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x92>
 8001e50:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 8001e54:	2aa0      	cmp	r2, #160	; 0xa0
 8001e56:	d00c      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x92>
 8001e58:	f021 0210 	bic.w	r2, r1, #16
 8001e5c:	2ac0      	cmp	r2, #192	; 0xc0
 8001e5e:	d008      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x92>
 8001e60:	29f0      	cmp	r1, #240	; 0xf0
 8001e62:	d006      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x92>
 8001e64:	f240 2175 	movw	r1, #629	; 0x275
 8001e68:	485d      	ldr	r0, [pc, #372]	; (8001fe0 <HAL_RCC_ClockConfig+0x200>)
 8001e6a:	f000 fded 	bl	8002a48 <assert_failed>
 8001e6e:	68a1      	ldr	r1, [r4, #8]
 8001e70:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e72:	485a      	ldr	r0, [pc, #360]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001e74:	6882      	ldr	r2, [r0, #8]
 8001e76:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7e:	07df      	lsls	r7, r3, #31
 8001e80:	d528      	bpl.n	8001ed4 <HAL_RCC_ClockConfig+0xf4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001e82:	6863      	ldr	r3, [r4, #4]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	f200 8098 	bhi.w	8001fba <HAL_RCC_ClockConfig+0x1da>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	f000 808f 	beq.w	8001fae <HAL_RCC_ClockConfig+0x1ce>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e90:	1e9a      	subs	r2, r3, #2
 8001e92:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e94:	4a51      	ldr	r2, [pc, #324]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001e96:	6812      	ldr	r2, [r2, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e98:	f240 809a 	bls.w	8001fd0 <HAL_RCC_ClockConfig+0x1f0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9c:	0791      	lsls	r1, r2, #30
 8001e9e:	d5bb      	bpl.n	8001e18 <HAL_RCC_ClockConfig+0x38>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ea0:	4e4e      	ldr	r6, [pc, #312]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001ea2:	68b2      	ldr	r2, [r6, #8]
 8001ea4:	f022 0203 	bic.w	r2, r2, #3
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001eac:	f7ff f812 	bl	8000ed4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001eb4:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	e006      	b.n	8001ec6 <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb8:	f7ff f80c 	bl	8000ed4 <HAL_GetTick>
 8001ebc:	eba0 0008 	sub.w	r0, r0, r8
 8001ec0:	42b8      	cmp	r0, r7
 8001ec2:	f200 8083 	bhi.w	8001fcc <HAL_RCC_ClockConfig+0x1ec>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	68b3      	ldr	r3, [r6, #8]
 8001ec8:	6862      	ldr	r2, [r4, #4]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ed2:	d1f1      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xd8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed4:	4a40      	ldr	r2, [pc, #256]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ed6:	6813      	ldr	r3, [r2, #0]
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	42ab      	cmp	r3, r5
 8001ede:	d906      	bls.n	8001eee <HAL_RCC_ClockConfig+0x10e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee0:	b2eb      	uxtb	r3, r5
 8001ee2:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee4:	6813      	ldr	r3, [r2, #0]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	42ab      	cmp	r3, r5
 8001eec:	d194      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x38>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	075a      	lsls	r2, r3, #29
 8001ef2:	d518      	bpl.n	8001f26 <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001ef4:	68e1      	ldr	r1, [r4, #12]
 8001ef6:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 8001efa:	d00e      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x13a>
 8001efc:	f421 6200 	bic.w	r2, r1, #2048	; 0x800
 8001f00:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8001f04:	d009      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x13a>
 8001f06:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 8001f0a:	d006      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x13a>
 8001f0c:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001f10:	4833      	ldr	r0, [pc, #204]	; (8001fe0 <HAL_RCC_ClockConfig+0x200>)
 8001f12:	f000 fd99 	bl	8002a48 <assert_failed>
 8001f16:	68e1      	ldr	r1, [r4, #12]
 8001f18:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f1a:	4830      	ldr	r0, [pc, #192]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001f1c:	6882      	ldr	r2, [r0, #8]
 8001f1e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001f22:	430a      	orrs	r2, r1
 8001f24:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	071b      	lsls	r3, r3, #28
 8001f28:	d518      	bpl.n	8001f5c <HAL_RCC_ClockConfig+0x17c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001f2a:	6922      	ldr	r2, [r4, #16]
 8001f2c:	f432 5380 	bics.w	r3, r2, #4096	; 0x1000
 8001f30:	d00d      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x16e>
 8001f32:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 8001f36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001f3a:	d008      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x16e>
 8001f3c:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8001f40:	d005      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x16e>
 8001f42:	f240 21c1 	movw	r1, #705	; 0x2c1
 8001f46:	4826      	ldr	r0, [pc, #152]	; (8001fe0 <HAL_RCC_ClockConfig+0x200>)
 8001f48:	f000 fd7e 	bl	8002a48 <assert_failed>
 8001f4c:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f4e:	4923      	ldr	r1, [pc, #140]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001f50:	688b      	ldr	r3, [r1, #8]
 8001f52:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f56:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f5a:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f5c:	f7ff ff0a 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001f62:	4c20      	ldr	r4, [pc, #128]	; (8001fe4 <HAL_RCC_ClockConfig+0x204>)
 8001f64:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8001f66:	4920      	ldr	r1, [pc, #128]	; (8001fe8 <HAL_RCC_ClockConfig+0x208>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f68:	4a20      	ldr	r2, [pc, #128]	; (8001fec <HAL_RCC_ClockConfig+0x20c>)
 8001f6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f6e:	5ce3      	ldrb	r3, [r4, r3]
 8001f70:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8001f74:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f76:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8001f78:	f7fe ff62 	bl	8000e40 <HAL_InitTick>
  return HAL_OK;
 8001f7c:	2000      	movs	r0, #0
}
 8001f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001f82:	f240 2152 	movw	r1, #594	; 0x252
 8001f86:	4816      	ldr	r0, [pc, #88]	; (8001fe0 <HAL_RCC_ClockConfig+0x200>)
 8001f88:	f000 fd5e 	bl	8002a48 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f8c:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f8e:	6813      	ldr	r3, [r2, #0]
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	42ab      	cmp	r3, r5
 8001f96:	f4ff af38 	bcc.w	8001e0a <HAL_RCC_ClockConfig+0x2a>
 8001f9a:	e740      	b.n	8001e1e <HAL_RCC_ClockConfig+0x3e>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001f9c:	f240 2151 	movw	r1, #593	; 0x251
 8001fa0:	480f      	ldr	r0, [pc, #60]	; (8001fe0 <HAL_RCC_ClockConfig+0x200>)
 8001fa2:	f000 fd51 	bl	8002a48 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001fa6:	2d07      	cmp	r5, #7
 8001fa8:	f67f af29 	bls.w	8001dfe <HAL_RCC_ClockConfig+0x1e>
 8001fac:	e7e9      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1a2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	4a0b      	ldr	r2, [pc, #44]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	0396      	lsls	r6, r2, #14
 8001fb4:	f53f af74 	bmi.w	8001ea0 <HAL_RCC_ClockConfig+0xc0>
 8001fb8:	e72e      	b.n	8001e18 <HAL_RCC_ClockConfig+0x38>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001fba:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8001fbe:	4808      	ldr	r0, [pc, #32]	; (8001fe0 <HAL_RCC_ClockConfig+0x200>)
 8001fc0:	f000 fd42 	bl	8002a48 <assert_failed>
 8001fc4:	6863      	ldr	r3, [r4, #4]
 8001fc6:	e760      	b.n	8001e8a <HAL_RCC_ClockConfig+0xaa>
    return HAL_ERROR;
 8001fc8:	2001      	movs	r0, #1
}
 8001fca:	4770      	bx	lr
        return HAL_TIMEOUT;
 8001fcc:	2003      	movs	r0, #3
 8001fce:	e724      	b.n	8001e1a <HAL_RCC_ClockConfig+0x3a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd0:	0190      	lsls	r0, r2, #6
 8001fd2:	f53f af65 	bmi.w	8001ea0 <HAL_RCC_ClockConfig+0xc0>
 8001fd6:	e71f      	b.n	8001e18 <HAL_RCC_ClockConfig+0x38>
 8001fd8:	40023c00 	.word	0x40023c00
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	0800483c 	.word	0x0800483c
 8001fe4:	080048b0 	.word	0x080048b0
 8001fe8:	20000004 	.word	0x20000004
 8001fec:	2000010c 	.word	0x2000010c

08001ff0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001ff6:	4905      	ldr	r1, [pc, #20]	; (800200c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ff8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001ffc:	6808      	ldr	r0, [r1, #0]
 8001ffe:	5cd3      	ldrb	r3, [r2, r3]
}
 8002000:	40d8      	lsrs	r0, r3
 8002002:	4770      	bx	lr
 8002004:	40023800 	.word	0x40023800
 8002008:	080048c0 	.word	0x080048c0
 800200c:	2000010c 	.word	0x2000010c

08002010 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002012:	4a05      	ldr	r2, [pc, #20]	; (8002028 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002014:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002016:	4905      	ldr	r1, [pc, #20]	; (800202c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002018:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800201c:	6808      	ldr	r0, [r1, #0]
 800201e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002020:	40d8      	lsrs	r0, r3
 8002022:	4770      	bx	lr
 8002024:	40023800 	.word	0x40023800
 8002028:	080048c0 	.word	0x080048c0
 800202c:	2000010c 	.word	0x2000010c

08002030 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002030:	2800      	cmp	r0, #0
 8002032:	f000 80c8 	beq.w	80021c6 <HAL_UART_Init+0x196>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002036:	6982      	ldr	r2, [r0, #24]
 8002038:	6803      	ldr	r3, [r0, #0]
{
 800203a:	b570      	push	{r4, r5, r6, lr}
 800203c:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800203e:	2a00      	cmp	r2, #0
 8002040:	f000 80ad 	beq.w	800219e <HAL_UART_Init+0x16e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002044:	498a      	ldr	r1, [pc, #552]	; (8002270 <HAL_UART_Init+0x240>)
 8002046:	428b      	cmp	r3, r1
 8002048:	f000 8101 	beq.w	800224e <HAL_UART_Init+0x21e>
 800204c:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 8002050:	428b      	cmp	r3, r1
 8002052:	f000 80fc 	beq.w	800224e <HAL_UART_Init+0x21e>
 8002056:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 800205a:	428b      	cmp	r3, r1
 800205c:	f000 80f7 	beq.w	800224e <HAL_UART_Init+0x21e>
 8002060:	f240 114b 	movw	r1, #331	; 0x14b
 8002064:	4883      	ldr	r0, [pc, #524]	; (8002274 <HAL_UART_Init+0x244>)
 8002066:	f000 fcef 	bl	8002a48 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800206a:	69a2      	ldr	r2, [r4, #24]
 800206c:	2a00      	cmp	r2, #0
 800206e:	f040 80ee 	bne.w	800224e <HAL_UART_Init+0x21e>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002072:	68a3      	ldr	r3, [r4, #8]
 8002074:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8002078:	d004      	beq.n	8002084 <HAL_UART_Init+0x54>
 800207a:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800207e:	487d      	ldr	r0, [pc, #500]	; (8002274 <HAL_UART_Init+0x244>)
 8002080:	f000 fce2 	bl	8002a48 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8002084:	69e3      	ldr	r3, [r4, #28]
 8002086:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800208a:	d004      	beq.n	8002096 <HAL_UART_Init+0x66>
 800208c:	f240 1153 	movw	r1, #339	; 0x153
 8002090:	4878      	ldr	r0, [pc, #480]	; (8002274 <HAL_UART_Init+0x244>)
 8002092:	f000 fcd9 	bl	8002a48 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8002096:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800209a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80c6 	beq.w	8002230 <HAL_UART_Init+0x200>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020a4:	2324      	movs	r3, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020a6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80020ac:	68d3      	ldr	r3, [r2, #12]
{
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80020ae:	6860      	ldr	r0, [r4, #4]
 80020b0:	4971      	ldr	r1, [pc, #452]	; (8002278 <HAL_UART_Init+0x248>)
  __HAL_UART_DISABLE(huart);
 80020b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80020b6:	4288      	cmp	r0, r1
  __HAL_UART_DISABLE(huart);
 80020b8:	60d3      	str	r3, [r2, #12]
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80020ba:	f200 80b3 	bhi.w	8002224 <HAL_UART_Init+0x1f4>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80020be:	68e3      	ldr	r3, [r4, #12]
 80020c0:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80020c4:	d004      	beq.n	80020d0 <HAL_UART_Init+0xa0>
 80020c6:	f640 31fc 	movw	r1, #3068	; 0xbfc
 80020ca:	486a      	ldr	r0, [pc, #424]	; (8002274 <HAL_UART_Init+0x244>)
 80020cc:	f000 fcbc 	bl	8002a48 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80020d0:	6923      	ldr	r3, [r4, #16]
 80020d2:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80020d6:	d003      	beq.n	80020e0 <HAL_UART_Init+0xb0>
 80020d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80020dc:	f040 80ae 	bne.w	800223c <HAL_UART_Init+0x20c>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80020e0:	6960      	ldr	r0, [r4, #20]
 80020e2:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80020e6:	4218      	tst	r0, r3
 80020e8:	d100      	bne.n	80020ec <HAL_UART_Init+0xbc>
 80020ea:	b928      	cbnz	r0, 80020f8 <HAL_UART_Init+0xc8>
 80020ec:	4861      	ldr	r0, [pc, #388]	; (8002274 <HAL_UART_Init+0x244>)
 80020ee:	f640 31fe 	movw	r1, #3070	; 0xbfe
 80020f2:	f000 fca9 	bl	8002a48 <assert_failed>
 80020f6:	6960      	ldr	r0, [r4, #20]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020f8:	6822      	ldr	r2, [r4, #0]
 80020fa:	68e5      	ldr	r5, [r4, #12]
 80020fc:	6911      	ldr	r1, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 80020fe:	68a3      	ldr	r3, [r4, #8]
 8002100:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002102:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002106:	4329      	orrs	r1, r5
 8002108:	6111      	str	r1, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
 800210a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800210c:	69e5      	ldr	r5, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 800210e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002112:	4333      	orrs	r3, r6
 8002114:	f021 010c 	bic.w	r1, r1, #12
 8002118:	432b      	orrs	r3, r5
 800211a:	430b      	orrs	r3, r1
 800211c:	4303      	orrs	r3, r0
 800211e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002120:	6953      	ldr	r3, [r2, #20]
 8002122:	69a1      	ldr	r1, [r4, #24]
 8002124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002128:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800212a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800212e:	6153      	str	r3, [r2, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002130:	4b4f      	ldr	r3, [pc, #316]	; (8002270 <HAL_UART_Init+0x240>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002132:	d04a      	beq.n	80021ca <HAL_UART_Init+0x19a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002134:	429a      	cmp	r2, r3
 8002136:	d072      	beq.n	800221e <HAL_UART_Init+0x1ee>
 8002138:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800213c:	429a      	cmp	r2, r3
 800213e:	d06e      	beq.n	800221e <HAL_UART_Init+0x1ee>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002140:	f7ff ff56 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002144:	6863      	ldr	r3, [r4, #4]
 8002146:	4d4d      	ldr	r5, [pc, #308]	; (800227c <HAL_UART_Init+0x24c>)
 8002148:	2219      	movs	r2, #25
 800214a:	fba0 0102 	umull	r0, r1, r0, r2
 800214e:	009a      	lsls	r2, r3, #2
 8002150:	0f9b      	lsrs	r3, r3, #30
 8002152:	f7fe fcdd 	bl	8000b10 <__aeabi_uldivmod>
 8002156:	fba5 2100 	umull	r2, r1, r5, r0
 800215a:	0949      	lsrs	r1, r1, #5
 800215c:	2264      	movs	r2, #100	; 0x64
 800215e:	fb02 0211 	mls	r2, r2, r1, r0
 8002162:	0112      	lsls	r2, r2, #4
 8002164:	3232      	adds	r2, #50	; 0x32
 8002166:	6823      	ldr	r3, [r4, #0]
 8002168:	fba5 0202 	umull	r0, r2, r5, r2
 800216c:	0109      	lsls	r1, r1, #4
 800216e:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 8002172:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800217a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002182:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002184:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002186:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8002188:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800218a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800218e:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8002190:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002192:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002194:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002198:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 800219c:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800219e:	4a34      	ldr	r2, [pc, #208]	; (8002270 <HAL_UART_Init+0x240>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	f43f af66 	beq.w	8002072 <HAL_UART_Init+0x42>
 80021a6:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80021aa:	4293      	cmp	r3, r2
 80021ac:	f43f af61 	beq.w	8002072 <HAL_UART_Init+0x42>
 80021b0:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 80021b4:	4293      	cmp	r3, r2
 80021b6:	f43f af5c 	beq.w	8002072 <HAL_UART_Init+0x42>
 80021ba:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80021be:	482d      	ldr	r0, [pc, #180]	; (8002274 <HAL_UART_Init+0x244>)
 80021c0:	f000 fc42 	bl	8002a48 <assert_failed>
 80021c4:	e755      	b.n	8002072 <HAL_UART_Init+0x42>
    return HAL_ERROR;
 80021c6:	2001      	movs	r0, #1
}
 80021c8:	4770      	bx	lr
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d03c      	beq.n	8002248 <HAL_UART_Init+0x218>
 80021ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d038      	beq.n	8002248 <HAL_UART_Init+0x218>
      pclk = HAL_RCC_GetPCLK1Freq();
 80021d6:	f7ff ff0b 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021da:	6862      	ldr	r2, [r4, #4]
 80021dc:	2600      	movs	r6, #0
 80021de:	1892      	adds	r2, r2, r2
 80021e0:	f04f 0119 	mov.w	r1, #25
 80021e4:	eb46 0306 	adc.w	r3, r6, r6
 80021e8:	fba0 0101 	umull	r0, r1, r0, r1
 80021ec:	f7fe fc90 	bl	8000b10 <__aeabi_uldivmod>
 80021f0:	4e22      	ldr	r6, [pc, #136]	; (800227c <HAL_UART_Init+0x24c>)
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	fba6 2100 	umull	r2, r1, r6, r0
 80021f8:	094d      	lsrs	r5, r1, #5
 80021fa:	2264      	movs	r2, #100	; 0x64
 80021fc:	fb02 0215 	mls	r2, r2, r5, r0
 8002200:	00d2      	lsls	r2, r2, #3
 8002202:	3232      	adds	r2, #50	; 0x32
 8002204:	fba6 1202 	umull	r1, r2, r6, r2
 8002208:	0952      	lsrs	r2, r2, #5
 800220a:	f002 0107 	and.w	r1, r2, #7
 800220e:	0052      	lsls	r2, r2, #1
 8002210:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8002214:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002218:	440a      	add	r2, r1
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	e7aa      	b.n	8002174 <HAL_UART_Init+0x144>
      pclk = HAL_RCC_GetPCLK2Freq();
 800221e:	f7ff fef7 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 8002222:	e78f      	b.n	8002144 <HAL_UART_Init+0x114>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002224:	f640 31fb 	movw	r1, #3067	; 0xbfb
 8002228:	4812      	ldr	r0, [pc, #72]	; (8002274 <HAL_UART_Init+0x244>)
 800222a:	f000 fc0d 	bl	8002a48 <assert_failed>
 800222e:	e746      	b.n	80020be <HAL_UART_Init+0x8e>
    huart->Lock = HAL_UNLOCKED;
 8002230:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002234:	4620      	mov	r0, r4
 8002236:	f000 fca1 	bl	8002b7c <HAL_UART_MspInit>
 800223a:	e733      	b.n	80020a4 <HAL_UART_Init+0x74>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800223c:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8002240:	480c      	ldr	r0, [pc, #48]	; (8002274 <HAL_UART_Init+0x244>)
 8002242:	f000 fc01 	bl	8002a48 <assert_failed>
 8002246:	e74b      	b.n	80020e0 <HAL_UART_Init+0xb0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002248:	f7ff fee2 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 800224c:	e7c5      	b.n	80021da <HAL_UART_Init+0x1aa>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800224e:	f422 7300 	bic.w	r3, r2, #512	; 0x200
 8002252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002256:	f43f af0c 	beq.w	8002072 <HAL_UART_Init+0x42>
 800225a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800225e:	f43f af08 	beq.w	8002072 <HAL_UART_Init+0x42>
 8002262:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8002266:	4803      	ldr	r0, [pc, #12]	; (8002274 <HAL_UART_Init+0x244>)
 8002268:	f000 fbee 	bl	8002a48 <assert_failed>
 800226c:	e701      	b.n	8002072 <HAL_UART_Init+0x42>
 800226e:	bf00      	nop
 8002270:	40011000 	.word	0x40011000
 8002274:	08004874 	.word	0x08004874
 8002278:	00a037a0 	.word	0x00a037a0
 800227c:	51eb851f 	.word	0x51eb851f

08002280 <HAL_UART_Receive>:
{
 8002280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002284:	460e      	mov	r6, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8002286:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
 800228a:	2920      	cmp	r1, #32
{
 800228c:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 800228e:	d136      	bne.n	80022fe <HAL_UART_Receive+0x7e>
    if ((pData == NULL) || (Size == 0U))
 8002290:	2e00      	cmp	r6, #0
 8002292:	d038      	beq.n	8002306 <HAL_UART_Receive+0x86>
 8002294:	9201      	str	r2, [sp, #4]
 8002296:	2a00      	cmp	r2, #0
 8002298:	d035      	beq.n	8002306 <HAL_UART_Receive+0x86>
 800229a:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 800229c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	4604      	mov	r4, r0
 80022a4:	d02b      	beq.n	80022fe <HAL_UART_Receive+0x7e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a6:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 80022aa:	2101      	movs	r1, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022ac:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ae:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 80022b2:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022b6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 80022ba:	f7fe fe0b 	bl	8000ed4 <HAL_GetTick>
    huart->RxXferSize = Size;
 80022be:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 80022c0:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 80022c4:	4605      	mov	r5, r0
    huart->RxXferSize = Size;
 80022c6:	85a2      	strh	r2, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80022c8:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80022ca:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 80022cc:	b280      	uxth	r0, r0
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d05b      	beq.n	800238a <HAL_UART_Receive+0x10a>
      huart->RxXferCount--;
 80022d2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022d4:	68a3      	ldr	r3, [r4, #8]
      huart->RxXferCount--;
 80022d6:	3a01      	subs	r2, #1
 80022d8:	b292      	uxth	r2, r2
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->RxXferCount--;
 80022de:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022e0:	d01f      	beq.n	8002322 <HAL_UART_Receive+0xa2>
 80022e2:	1c79      	adds	r1, r7, #1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022e4:	6820      	ldr	r0, [r4, #0]
 80022e6:	d12a      	bne.n	800233e <HAL_UART_Receive+0xbe>
 80022e8:	6802      	ldr	r2, [r0, #0]
 80022ea:	0692      	lsls	r2, r2, #26
 80022ec:	d5fc      	bpl.n	80022e8 <HAL_UART_Receive+0x68>
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022ee:	6923      	ldr	r3, [r4, #16]
 80022f0:	1c72      	adds	r2, r6, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d13f      	bne.n	8002376 <HAL_UART_Receive+0xf6>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022f6:	6843      	ldr	r3, [r0, #4]
 80022f8:	7033      	strb	r3, [r6, #0]
 80022fa:	4616      	mov	r6, r2
 80022fc:	e7e5      	b.n	80022ca <HAL_UART_Receive+0x4a>
    return HAL_BUSY;
 80022fe:	2002      	movs	r0, #2
}
 8002300:	b002      	add	sp, #8
 8002302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002306:	2001      	movs	r0, #1
}
 8002308:	b002      	add	sp, #8
 800230a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	0690      	lsls	r0, r2, #26
 8002312:	d40c      	bmi.n	800232e <HAL_UART_Receive+0xae>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002314:	2f00      	cmp	r7, #0
 8002316:	d03d      	beq.n	8002394 <HAL_UART_Receive+0x114>
 8002318:	f7fe fddc 	bl	8000ed4 <HAL_GetTick>
 800231c:	1b40      	subs	r0, r0, r5
 800231e:	4287      	cmp	r7, r0
 8002320:	d337      	bcc.n	8002392 <HAL_UART_Receive+0x112>
 8002322:	1c79      	adds	r1, r7, #1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	d1f2      	bne.n	800230e <HAL_UART_Receive+0x8e>
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	0692      	lsls	r2, r2, #26
 800232c:	d5fc      	bpl.n	8002328 <HAL_UART_Receive+0xa8>
        if (huart->Init.Parity == UART_PARITY_NONE)
 800232e:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002330:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002332:	bb32      	cbnz	r2, 8002382 <HAL_UART_Receive+0x102>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002338:	f826 3b02 	strh.w	r3, [r6], #2
 800233c:	e7c5      	b.n	80022ca <HAL_UART_Receive+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800233e:	6803      	ldr	r3, [r0, #0]
 8002340:	069b      	lsls	r3, r3, #26
 8002342:	d4d4      	bmi.n	80022ee <HAL_UART_Receive+0x6e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002344:	b12f      	cbz	r7, 8002352 <HAL_UART_Receive+0xd2>
 8002346:	f7fe fdc5 	bl	8000ed4 <HAL_GetTick>
 800234a:	1b40      	subs	r0, r0, r5
 800234c:	4287      	cmp	r7, r0
 800234e:	d2c8      	bcs.n	80022e2 <HAL_UART_Receive+0x62>
 8002350:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002352:	68c3      	ldr	r3, [r0, #12]
 8002354:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002358:	60c3      	str	r3, [r0, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800235a:	6943      	ldr	r3, [r0, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800235c:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800235e:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8002362:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002364:	6143      	str	r3, [r0, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002366:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
 800236a:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800236c:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8002370:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8002374:	e7c4      	b.n	8002300 <HAL_UART_Receive+0x80>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002376:	6843      	ldr	r3, [r0, #4]
 8002378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800237c:	7033      	strb	r3, [r6, #0]
 800237e:	4616      	mov	r6, r2
 8002380:	e7a3      	b.n	80022ca <HAL_UART_Receive+0x4a>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f826 3b01 	strh.w	r3, [r6], #1
 8002388:	e79f      	b.n	80022ca <HAL_UART_Receive+0x4a>
    huart->RxState = HAL_UART_STATE_READY;
 800238a:	2320      	movs	r3, #32
 800238c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8002390:	e7b6      	b.n	8002300 <HAL_UART_Receive+0x80>
 8002392:	6823      	ldr	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800239a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800239c:	695a      	ldr	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800239e:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a0:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 80023a4:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a6:	615a      	str	r2, [r3, #20]
          return HAL_TIMEOUT;
 80023a8:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 80023aa:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 80023ae:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 80023b2:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 80023b6:	e7a3      	b.n	8002300 <HAL_UART_Receive+0x80>

080023b8 <HAL_UART_TxCpltCallback>:
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop

080023bc <HAL_UART_RxCpltCallback>:
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop

080023c0 <UART_Receive_IT.part.1>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80023c0:	b510      	push	{r4, lr}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023c2:	6884      	ldr	r4, [r0, #8]
 80023c4:	6901      	ldr	r1, [r0, #16]
 80023c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80023c8:	6802      	ldr	r2, [r0, #0]
 80023ca:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80023ce:	d020      	beq.n	8002412 <UART_Receive_IT.part.1+0x52>
 80023d0:	1c5c      	adds	r4, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023d2:	6852      	ldr	r2, [r2, #4]
 80023d4:	6284      	str	r4, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 80023d6:	b9c9      	cbnz	r1, 800240c <UART_Receive_IT.part.1+0x4c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023d8:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 80023da:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29b      	uxth	r3, r3
 80023e0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80023e2:	b98b      	cbnz	r3, 8002408 <UART_Receive_IT.part.1+0x48>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023e4:	6802      	ldr	r2, [r0, #0]
 80023e6:	68d1      	ldr	r1, [r2, #12]
 80023e8:	f021 0120 	bic.w	r1, r1, #32
 80023ec:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023ee:	68d1      	ldr	r1, [r2, #12]
 80023f0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80023f4:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80023f6:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80023f8:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80023fa:	f021 0101 	bic.w	r1, r1, #1
 80023fe:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002400:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002404:	f7ff ffda 	bl	80023bc <HAL_UART_RxCpltCallback>
}
 8002408:	2000      	movs	r0, #0
 800240a:	bd10      	pop	{r4, pc}
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800240c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002410:	e7e2      	b.n	80023d8 <UART_Receive_IT.part.1+0x18>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002412:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002414:	b929      	cbnz	r1, 8002422 <UART_Receive_IT.part.1+0x62>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002416:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800241a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 800241e:	6283      	str	r3, [r0, #40]	; 0x28
 8002420:	e7db      	b.n	80023da <UART_Receive_IT.part.1+0x1a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8002428:	6283      	str	r3, [r0, #40]	; 0x28
 800242a:	e7d6      	b.n	80023da <UART_Receive_IT.part.1+0x1a>

0800242c <HAL_UART_ErrorCallback>:
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop

08002430 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002430:	6803      	ldr	r3, [r0, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
{
 8002434:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002436:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002438:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800243a:	6959      	ldr	r1, [r3, #20]
{
 800243c:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800243e:	d046      	beq.n	80024ce <HAL_UART_IRQHandler+0x9e>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002440:	f011 0101 	ands.w	r1, r1, #1
 8002444:	d04c      	beq.n	80024e0 <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002446:	07d0      	lsls	r0, r2, #31
 8002448:	d505      	bpl.n	8002456 <HAL_UART_IRQHandler+0x26>
 800244a:	05ee      	lsls	r6, r5, #23
 800244c:	d503      	bpl.n	8002456 <HAL_UART_IRQHandler+0x26>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800244e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002450:	f040 0001 	orr.w	r0, r0, #1
 8002454:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002456:	0750      	lsls	r0, r2, #29
 8002458:	d574      	bpl.n	8002544 <HAL_UART_IRQHandler+0x114>
 800245a:	b129      	cbz	r1, 8002468 <HAL_UART_IRQHandler+0x38>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800245c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800245e:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002460:	f040 0002 	orr.w	r0, r0, #2
 8002464:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002466:	d471      	bmi.n	800254c <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002468:	0716      	lsls	r6, r2, #28
 800246a:	d503      	bpl.n	8002474 <HAL_UART_IRQHandler+0x44>
 800246c:	06a8      	lsls	r0, r5, #26
 800246e:	d472      	bmi.n	8002556 <HAL_UART_IRQHandler+0x126>
 8002470:	2900      	cmp	r1, #0
 8002472:	d170      	bne.n	8002556 <HAL_UART_IRQHandler+0x126>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002474:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002476:	2900      	cmp	r1, #0
 8002478:	d031      	beq.n	80024de <HAL_UART_IRQHandler+0xae>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800247a:	0696      	lsls	r6, r2, #26
 800247c:	d501      	bpl.n	8002482 <HAL_UART_IRQHandler+0x52>
 800247e:	06a8      	lsls	r0, r5, #26
 8002480:	d472      	bmi.n	8002568 <HAL_UART_IRQHandler+0x138>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002482:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002484:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002486:	0709      	lsls	r1, r1, #28
 8002488:	d402      	bmi.n	8002490 <HAL_UART_IRQHandler+0x60>
 800248a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800248e:	d078      	beq.n	8002582 <HAL_UART_IRQHandler+0x152>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002496:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002498:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 800249a:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249c:	f022 0201 	bic.w	r2, r2, #1
 80024a0:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 80024a2:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	0652      	lsls	r2, r2, #25
 80024aa:	d559      	bpl.n	8002560 <HAL_UART_IRQHandler+0x130>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ac:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80024ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024b4:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d052      	beq.n	8002560 <HAL_UART_IRQHandler+0x130>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024ba:	4b3a      	ldr	r3, [pc, #232]	; (80025a4 <HAL_UART_IRQHandler+0x174>)
 80024bc:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024be:	f7fe fde5 	bl	800108c <HAL_DMA_Abort_IT>
 80024c2:	b160      	cbz	r0, 80024de <HAL_UART_IRQHandler+0xae>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024c4:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80024c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024ca:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80024cc:	4718      	bx	r3
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024ce:	0691      	lsls	r1, r2, #26
 80024d0:	d509      	bpl.n	80024e6 <HAL_UART_IRQHandler+0xb6>
 80024d2:	06ae      	lsls	r6, r5, #26
 80024d4:	d507      	bpl.n	80024e6 <HAL_UART_IRQHandler+0xb6>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024d6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80024da:	2b22      	cmp	r3, #34	; 0x22
 80024dc:	d04d      	beq.n	800257a <HAL_UART_IRQHandler+0x14a>
}
 80024de:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024e0:	f415 7f90 	tst.w	r5, #288	; 0x120
 80024e4:	d1af      	bne.n	8002446 <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024e6:	0616      	lsls	r6, r2, #24
 80024e8:	d40e      	bmi.n	8002508 <HAL_UART_IRQHandler+0xd8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024ea:	0651      	lsls	r1, r2, #25
 80024ec:	d5f7      	bpl.n	80024de <HAL_UART_IRQHandler+0xae>
 80024ee:	066a      	lsls	r2, r5, #25
 80024f0:	d5f5      	bpl.n	80024de <HAL_UART_IRQHandler+0xae>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024f2:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80024f4:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024fa:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80024fc:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80024fe:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002502:	f7ff ff59 	bl	80023b8 <HAL_UART_TxCpltCallback>
}
 8002506:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002508:	0628      	lsls	r0, r5, #24
 800250a:	d5ee      	bpl.n	80024ea <HAL_UART_IRQHandler+0xba>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800250c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002510:	2a21      	cmp	r2, #33	; 0x21
 8002512:	d1e4      	bne.n	80024de <HAL_UART_IRQHandler+0xae>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002514:	68a1      	ldr	r1, [r4, #8]
 8002516:	6a22      	ldr	r2, [r4, #32]
 8002518:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800251c:	d036      	beq.n	800258c <HAL_UART_IRQHandler+0x15c>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800251e:	1c51      	adds	r1, r2, #1
 8002520:	6221      	str	r1, [r4, #32]
 8002522:	7812      	ldrb	r2, [r2, #0]
 8002524:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002526:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002528:	3a01      	subs	r2, #1
 800252a:	b292      	uxth	r2, r2
 800252c:	84e2      	strh	r2, [r4, #38]	; 0x26
 800252e:	2a00      	cmp	r2, #0
 8002530:	d1d5      	bne.n	80024de <HAL_UART_IRQHandler+0xae>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002538:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002540:	60da      	str	r2, [r3, #12]
}
 8002542:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002544:	0790      	lsls	r0, r2, #30
 8002546:	d58f      	bpl.n	8002468 <HAL_UART_IRQHandler+0x38>
 8002548:	2900      	cmp	r1, #0
 800254a:	d08d      	beq.n	8002468 <HAL_UART_IRQHandler+0x38>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800254c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800254e:	f040 0004 	orr.w	r0, r0, #4
 8002552:	63e0      	str	r0, [r4, #60]	; 0x3c
 8002554:	e788      	b.n	8002468 <HAL_UART_IRQHandler+0x38>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002556:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002558:	f041 0108 	orr.w	r1, r1, #8
 800255c:	63e1      	str	r1, [r4, #60]	; 0x3c
 800255e:	e789      	b.n	8002474 <HAL_UART_IRQHandler+0x44>
            HAL_UART_ErrorCallback(huart);
 8002560:	4620      	mov	r0, r4
 8002562:	f7ff ff63 	bl	800242c <HAL_UART_ErrorCallback>
}
 8002566:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002568:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 800256c:	2a22      	cmp	r2, #34	; 0x22
 800256e:	d188      	bne.n	8002482 <HAL_UART_IRQHandler+0x52>
 8002570:	4620      	mov	r0, r4
 8002572:	f7ff ff25 	bl	80023c0 <UART_Receive_IT.part.1>
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	e783      	b.n	8002482 <HAL_UART_IRQHandler+0x52>
}
 800257a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800257e:	f7ff bf1f 	b.w	80023c0 <UART_Receive_IT.part.1>
        HAL_UART_ErrorCallback(huart);
 8002582:	4620      	mov	r0, r4
 8002584:	f7ff ff52 	bl	800242c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002588:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 800258a:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800258c:	8811      	ldrh	r1, [r2, #0]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800258e:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002590:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002594:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002596:	b910      	cbnz	r0, 800259e <HAL_UART_IRQHandler+0x16e>
        huart->pTxBuffPtr += 2U;
 8002598:	3202      	adds	r2, #2
 800259a:	6222      	str	r2, [r4, #32]
 800259c:	e7c3      	b.n	8002526 <HAL_UART_IRQHandler+0xf6>
        huart->pTxBuffPtr += 1U;
 800259e:	3201      	adds	r2, #1
 80025a0:	6222      	str	r2, [r4, #32]
 80025a2:	e7c0      	b.n	8002526 <HAL_UART_IRQHandler+0xf6>
 80025a4:	080025a9 	.word	0x080025a9

080025a8 <UART_DMAAbortOnError>:
{
 80025a8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80025ac:	2200      	movs	r2, #0
 80025ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 80025b0:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 80025b2:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80025b4:	f7ff ff3a 	bl	800242c <HAL_UART_ErrorCallback>
}
 80025b8:	bd08      	pop	{r3, pc}
 80025ba:	bf00      	nop

080025bc <Read_Callback>:
	}

    }

void Read_Callback(uint32_t address, uint32_t len)
    {
 80025bc:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <Read_Callback+0x78>)

    uint8_t crc;
    uint8_t* add_ptr = (uint8_t*)address;

    if (address >= USER_FLASH_START_ADDRESS
 80025be:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <Read_Callback+0x7c>)
    {
 80025c0:	b470      	push	{r4, r5, r6}
 80025c2:	681d      	ldr	r5, [r3, #0]
    if (address >= USER_FLASH_START_ADDRESS
 80025c4:	4290      	cmp	r0, r2
 80025c6:	682b      	ldr	r3, [r5, #0]
 80025c8:	d92c      	bls.n	8002624 <Read_Callback+0x68>
	    && address <= USER_FLASH_END_ADDRESS - len)
 80025ca:	f1c1 6200 	rsb	r2, r1, #134217728	; 0x8000000
 80025ce:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
 80025d2:	4282      	cmp	r2, r0
 80025d4:	d326      	bcc.n	8002624 <Read_Callback+0x68>
    BL_UART->Instance->DR = data;
 80025d6:	2290      	movs	r2, #144	; 0x90
 80025d8:	605a      	str	r2, [r3, #4]
    while (__HAL_UART_GET_FLAG(BL_UART,UART_FLAG_TC) == 0);
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	0654      	lsls	r4, r2, #25
 80025de:	d5fc      	bpl.n	80025da <Read_Callback+0x1e>
	{

	BL_UART_Send_Char(CMD_ACK);


	for (uint8_t i = 0; i < len; i++)
 80025e0:	b1d1      	cbz	r1, 8002618 <Read_Callback+0x5c>
 80025e2:	4e16      	ldr	r6, [pc, #88]	; (800263c <Read_Callback+0x80>)
 80025e4:	2400      	movs	r4, #0
	    {
	    TX_Buffer[i] = *add_ptr++;
 80025e6:	7802      	ldrb	r2, [r0, #0]
 80025e8:	5532      	strb	r2, [r6, r4]
    BL_UART->Instance->DR = data;
 80025ea:	682b      	ldr	r3, [r5, #0]
	    TX_Buffer[i] = *add_ptr++;
 80025ec:	3001      	adds	r0, #1
    BL_UART->Instance->DR = data;
 80025ee:	605a      	str	r2, [r3, #4]
    while (__HAL_UART_GET_FLAG(BL_UART,UART_FLAG_TC) == 0);
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	0652      	lsls	r2, r2, #25
 80025f4:	d5fc      	bpl.n	80025f0 <Read_Callback+0x34>
	for (uint8_t i = 0; i < len; i++)
 80025f6:	3401      	adds	r4, #1
 80025f8:	b2e4      	uxtb	r4, r4
 80025fa:	428c      	cmp	r4, r1
 80025fc:	d3f3      	bcc.n	80025e6 <Read_Callback+0x2a>
 80025fe:	480f      	ldr	r0, [pc, #60]	; (800263c <Read_Callback+0x80>)
 8002600:	4d0f      	ldr	r5, [pc, #60]	; (8002640 <Read_Callback+0x84>)
 8002602:	3901      	subs	r1, #1
 8002604:	1c44      	adds	r4, r0, #1
 8002606:	fa54 f481 	uxtab	r4, r4, r1
    uint8_t crc = 0;
 800260a:	2100      	movs	r1, #0
	crc = CRC8_Table[crc^ data[i]];
 800260c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002610:	4051      	eors	r1, r2
    for(uint8_t i=0; i<len; i++)
 8002612:	4284      	cmp	r4, r0
	crc = CRC8_Table[crc^ data[i]];
 8002614:	5c69      	ldrb	r1, [r5, r1]
    for(uint8_t i=0; i<len; i++)
 8002616:	d1f9      	bne.n	800260c <Read_Callback+0x50>
    BL_UART->Instance->DR = data;
 8002618:	6059      	str	r1, [r3, #4]
    while (__HAL_UART_GET_FLAG(BL_UART,UART_FLAG_TC) == 0);
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	0651      	lsls	r1, r2, #25
 800261e:	d5fc      	bpl.n	800261a <Read_Callback+0x5e>
    else
	{
	BL_UART_Send_Char(CMD_NACK);
	}

    }
 8002620:	bc70      	pop	{r4, r5, r6}
 8002622:	4770      	bx	lr
    BL_UART->Instance->DR = data;
 8002624:	2291      	movs	r2, #145	; 0x91
 8002626:	605a      	str	r2, [r3, #4]
    while (__HAL_UART_GET_FLAG(BL_UART,UART_FLAG_TC) == 0);
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	0652      	lsls	r2, r2, #25
 800262c:	d5fc      	bpl.n	8002628 <Read_Callback+0x6c>
    }
 800262e:	bc70      	pop	{r4, r5, r6}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000008 	.word	0x20000008
 8002638:	08007fff 	.word	0x08007fff
 800263c:	200003b8 	.word	0x200003b8
 8002640:	2000000c 	.word	0x2000000c

08002644 <Bootloader>:

    return status;
    }

void Bootloader()
    {
 8002644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002648:	4e65      	ldr	r6, [pc, #404]	; (80027e0 <Bootloader+0x19c>)
 800264a:	4d66      	ldr	r5, [pc, #408]	; (80027e4 <Bootloader+0x1a0>)
 800264c:	4f66      	ldr	r7, [pc, #408]	; (80027e8 <Bootloader+0x1a4>)
 800264e:	b087      	sub	sp, #28
 8002650:	f106 0a01 	add.w	sl, r6, #1
    uint32_t len = 0;

    while (1)
	{

	memset(RX_Buffer, 0x00, RX_BUFFER_SIZE);
 8002654:	4634      	mov	r4, r6
 8002656:	228c      	movs	r2, #140	; 0x8c
 8002658:	2100      	movs	r1, #0
 800265a:	4620      	mov	r0, r4
 800265c:	f000 fb1e 	bl	8002c9c <memset>



	/* wait for sync char*/
	if (HAL_UART_Receive(BL_UART, RX_Buffer, 1, HAL_MAX_DELAY)
 8002660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002664:	2201      	movs	r2, #1
 8002666:	4621      	mov	r1, r4
 8002668:	6828      	ldr	r0, [r5, #0]
 800266a:	f7ff fe09 	bl	8002280 <HAL_UART_Receive>
 800266e:	2800      	cmp	r0, #0
 8002670:	d1f1      	bne.n	8002656 <Bootloader+0x12>
		== HAL_OK)
	    {

	    uint8_t sync_char = RX_Buffer[0];

	    if (sync_char == SYNC_CHAR)
 8002672:	7833      	ldrb	r3, [r6, #0]
 8002674:	2b24      	cmp	r3, #36	; 0x24
 8002676:	d1ee      	bne.n	8002656 <Bootloader+0x12>
		{

		/* wait for packet_len char*/
		if (HAL_UART_Receive(BL_UART, RX_Buffer, 1, 100) == HAL_OK)
 8002678:	2364      	movs	r3, #100	; 0x64
 800267a:	2201      	movs	r2, #1
 800267c:	4621      	mov	r1, r4
 800267e:	6828      	ldr	r0, [r5, #0]
 8002680:	f7ff fdfe 	bl	8002280 <HAL_UART_Receive>
 8002684:	2800      	cmp	r0, #0
 8002686:	d1e6      	bne.n	8002656 <Bootloader+0x12>
		    {

		    uint8_t packet_len = RX_Buffer[0];
 8002688:	f896 8000 	ldrb.w	r8, [r6]

		    if (HAL_UART_Receive(BL_UART, RX_Buffer, packet_len, 1000) == HAL_OK)
 800268c:	6828      	ldr	r0, [r5, #0]
 800268e:	4642      	mov	r2, r8
 8002690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002694:	4621      	mov	r1, r4
 8002696:	f7ff fdf3 	bl	8002280 <HAL_UART_Receive>
 800269a:	2800      	cmp	r0, #0
 800269c:	d1db      	bne.n	8002656 <Bootloader+0x12>
			/* dont care*/
			(void)RX_Buffer[2];
			(void)RX_Buffer[3];

			/* last byte is crc*/
			uint8_t crc_recvd = RX_Buffer[packet_len - 1];
 800269e:	eb06 0308 	add.w	r3, r6, r8
    for(uint8_t i=0; i<len; i++)
 80026a2:	f1b8 0f01 	cmp.w	r8, #1
			uint8_t crc_recvd = RX_Buffer[packet_len - 1];
 80026a6:	f813 cc01 	ldrb.w	ip, [r3, #-1]
    for(uint8_t i=0; i<len; i++)
 80026aa:	d00a      	beq.n	80026c2 <Bootloader+0x7e>
 80026ac:	f1a8 0102 	sub.w	r1, r8, #2
 80026b0:	4a4b      	ldr	r2, [pc, #300]	; (80027e0 <Bootloader+0x19c>)
 80026b2:	fa5a f181 	uxtab	r1, sl, r1
	crc = CRC8_Table[crc^ data[i]];
 80026b6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80026ba:	4043      	eors	r3, r0
    for(uint8_t i=0; i<len; i++)
 80026bc:	428a      	cmp	r2, r1
	crc = CRC8_Table[crc^ data[i]];
 80026be:	5cf8      	ldrb	r0, [r7, r3]
    for(uint8_t i=0; i<len; i++)
 80026c0:	d1f9      	bne.n	80026b6 <Bootloader+0x72>
 80026c2:	6873      	ldr	r3, [r6, #4]
			address = RX_Buffer[4] << 24|
			          RX_Buffer[5] << 16|
			          RX_Buffer[6] << 8 |
			          RX_Buffer[7] << 0;

			if (crc_calc == crc_recvd)
 80026c4:	4584      	cmp	ip, r0
 80026c6:	fa93 f883 	rev.w	r8, r3
 80026ca:	d1c4      	bne.n	8002656 <Bootloader+0x12>
			    {

			    switch (cmd)
 80026cc:	7833      	ldrb	r3, [r6, #0]
			len = RX_Buffer[1]; // number of bytes to write or read if any
 80026ce:	7871      	ldrb	r1, [r6, #1]
			    switch (cmd)
 80026d0:	3b50      	subs	r3, #80	; 0x50
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d8bf      	bhi.n	8002656 <Bootloader+0x12>
 80026d6:	e8df f003 	tbb	[pc, r3]
 80026da:	2226      	.short	0x2226
 80026dc:	0306      	.short	0x0306
 80026de:	39          	.byte	0x39
 80026df:	00          	.byte	0x00
    HAL_NVIC_SystemReset();
 80026e0:	f7fe fc86 	bl	8000ff0 <HAL_NVIC_SystemReset>
 80026e4:	e7b7      	b.n	8002656 <Bootloader+0x12>
    uint32_t error = 0;
 80026e6:	2200      	movs	r2, #0
    flash_erase_handle.Banks = FLASH_BANK_1;
 80026e8:	2101      	movs	r1, #1
    flash_erase_handle.Sector = BL_USED_SECTORS;
 80026ea:	2302      	movs	r3, #2
    flash_erase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 80026ec:	e9cd 2200 	strd	r2, r2, [sp]
    flash_erase_handle.NbSectors = BL_TOTAL_SECTORS - BL_USED_SECTORS;
 80026f0:	2206      	movs	r2, #6
    flash_erase_handle.Sector = BL_USED_SECTORS;
 80026f2:	e9cd 1302 	strd	r1, r3, [sp, #8]
    flash_erase_handle.NbSectors = BL_TOTAL_SECTORS - BL_USED_SECTORS;
 80026f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_FLASH_Unlock();
 80026fa:	f7fe fe19 	bl	8001330 <HAL_FLASH_Unlock>
    if (HAL_FLASHEx_Erase(&flash_erase_handle, &error) == HAL_OK)
 80026fe:	4669      	mov	r1, sp
 8002700:	a801      	add	r0, sp, #4
 8002702:	f7fe fe61 	bl	80013c8 <HAL_FLASHEx_Erase>
 8002706:	2800      	cmp	r0, #0
 8002708:	d133      	bne.n	8002772 <Bootloader+0x12e>
    HAL_FLASH_Lock();
 800270a:	f7fe fe25 	bl	8001358 <HAL_FLASH_Lock>
    BL_UART->Instance->DR = data;
 800270e:	682b      	ldr	r3, [r5, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2290      	movs	r2, #144	; 0x90
 8002714:	605a      	str	r2, [r3, #4]
    while (__HAL_UART_GET_FLAG(BL_UART,UART_FLAG_TC) == 0);
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	0651      	lsls	r1, r2, #25
 800271a:	d5fc      	bpl.n	8002716 <Bootloader+0xd2>
 800271c:	e79b      	b.n	8002656 <Bootloader+0x12>
			    case CMD_WRITE:
				Write_Callback(address, (RX_Buffer + 8), len);
				break;

			    case CMD_READ:
				Read_Callback(address, len);
 800271e:	4640      	mov	r0, r8
 8002720:	f7ff ff4c 	bl	80025bc <Read_Callback>
				break;
 8002724:	e797      	b.n	8002656 <Bootloader+0x12>
    if (address >= USER_FLASH_START_ADDRESS
 8002726:	4b31      	ldr	r3, [pc, #196]	; (80027ec <Bootloader+0x1a8>)
 8002728:	4598      	cmp	r8, r3
 800272a:	d907      	bls.n	800273c <Bootloader+0xf8>
    len /= 4;
 800272c:	ea4f 0991 	mov.w	r9, r1, lsr #2
	    && address <= USER_FLASH_END_ADDRESS - len)
 8002730:	f1c9 6300 	rsb	r3, r9, #134217728	; 0x8000000
 8002734:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8002738:	4543      	cmp	r3, r8
 800273a:	d224      	bcs.n	8002786 <Bootloader+0x142>
    BL_UART->Instance->DR = data;
 800273c:	682b      	ldr	r3, [r5, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	2391      	movs	r3, #145	; 0x91
 8002742:	6053      	str	r3, [r2, #4]
    while (__HAL_UART_GET_FLAG(BL_UART,UART_FLAG_TC) == 0);
 8002744:	6813      	ldr	r3, [r2, #0]
 8002746:	0658      	lsls	r0, r3, #25
 8002748:	d5fc      	bpl.n	8002744 <Bootloader+0x100>
 800274a:	e784      	b.n	8002656 <Bootloader+0x12>
    BL_UART->Instance->DR = data;
 800274c:	682b      	ldr	r3, [r5, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	2390      	movs	r3, #144	; 0x90
 8002752:	6053      	str	r3, [r2, #4]
    while (__HAL_UART_GET_FLAG(BL_UART,UART_FLAG_TC) == 0);
 8002754:	6813      	ldr	r3, [r2, #0]
 8002756:	065b      	lsls	r3, r3, #25
 8002758:	d5fc      	bpl.n	8002754 <Bootloader+0x110>
    HAL_DeInit();
 800275a:	f7fe fb5b 	bl	8000e14 <HAL_DeInit>
    app_adress = *(__IO uint32_t*) (USER_FLASH_START_ADDRESS + 4);
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <Bootloader+0x1ac>)
    Jump_To_App = (pFunction) app_adress;
 8002760:	4924      	ldr	r1, [pc, #144]	; (80027f4 <Bootloader+0x1b0>)
    __set_MSP(*(__IO uint32_t*) USER_FLASH_START_ADDRESS);
 8002762:	4a25      	ldr	r2, [pc, #148]	; (80027f8 <Bootloader+0x1b4>)
    app_adress = *(__IO uint32_t*) (USER_FLASH_START_ADDRESS + 4);
 8002764:	681b      	ldr	r3, [r3, #0]
    Jump_To_App = (pFunction) app_adress;
 8002766:	600b      	str	r3, [r1, #0]
    __set_MSP(*(__IO uint32_t*) USER_FLASH_START_ADDRESS);
 8002768:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800276a:	f382 8808 	msr	MSP, r2
    Jump_To_App();
 800276e:	4798      	blx	r3
 8002770:	e771      	b.n	8002656 <Bootloader+0x12>
    HAL_FLASH_Lock();
 8002772:	f7fe fdf1 	bl	8001358 <HAL_FLASH_Lock>
    BL_UART->Instance->DR = data;
 8002776:	682b      	ldr	r3, [r5, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2291      	movs	r2, #145	; 0x91
 800277c:	605a      	str	r2, [r3, #4]
    while (__HAL_UART_GET_FLAG(BL_UART,UART_FLAG_TC) == 0);
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	0652      	lsls	r2, r2, #25
 8002782:	d5fc      	bpl.n	800277e <Bootloader+0x13a>
 8002784:	e767      	b.n	8002656 <Bootloader+0x12>
	HAL_FLASH_Unlock();
 8002786:	f7fe fdd3 	bl	8001330 <HAL_FLASH_Unlock>
	for (uint32_t i = 0; i < len ; i++)
 800278a:	f1b9 0f00 	cmp.w	r9, #0
 800278e:	d01c      	beq.n	80027ca <Bootloader+0x186>
    uint32_t *aligned_data = (uint32_t*)data;
 8002790:	f8df b068 	ldr.w	fp, [pc, #104]	; 80027fc <Bootloader+0x1b8>
 8002794:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 8002798:	e00b      	b.n	80027b2 <Bootloader+0x16e>
		if (*(uint32_t*) address != *aligned_data)
 800279a:	f8d8 2000 	ldr.w	r2, [r8]
 800279e:	f8db 3000 	ldr.w	r3, [fp]
 80027a2:	429a      	cmp	r2, r3
		address += 4;
 80027a4:	f108 0804 	add.w	r8, r8, #4
		aligned_data ++;
 80027a8:	f10b 0b04 	add.w	fp, fp, #4
		if (*(uint32_t*) address != *aligned_data)
 80027ac:	d10a      	bne.n	80027c4 <Bootloader+0x180>
	for (uint32_t i = 0; i < len ; i++)
 80027ae:	45c1      	cmp	r9, r8
 80027b0:	d00b      	beq.n	80027ca <Bootloader+0x186>
	    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *aligned_data) == HAL_OK)
 80027b2:	f8db 2000 	ldr.w	r2, [fp]
 80027b6:	2300      	movs	r3, #0
 80027b8:	4641      	mov	r1, r8
 80027ba:	2002      	movs	r0, #2
 80027bc:	f7fe fcc0 	bl	8001140 <HAL_FLASH_Program>
 80027c0:	2800      	cmp	r0, #0
 80027c2:	d0ea      	beq.n	800279a <Bootloader+0x156>
	HAL_FLASH_Lock();
 80027c4:	f7fe fdc8 	bl	8001358 <HAL_FLASH_Lock>
 80027c8:	e7b8      	b.n	800273c <Bootloader+0xf8>
 80027ca:	f7fe fdc5 	bl	8001358 <HAL_FLASH_Lock>
    BL_UART->Instance->DR = data;
 80027ce:	682b      	ldr	r3, [r5, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2290      	movs	r2, #144	; 0x90
 80027d4:	605a      	str	r2, [r3, #4]
    while (__HAL_UART_GET_FLAG(BL_UART,UART_FLAG_TC) == 0);
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	0652      	lsls	r2, r2, #25
 80027da:	d5fc      	bpl.n	80027d6 <Bootloader+0x192>
 80027dc:	e73b      	b.n	8002656 <Bootloader+0x12>
 80027de:	bf00      	nop
 80027e0:	2000032c 	.word	0x2000032c
 80027e4:	20000008 	.word	0x20000008
 80027e8:	2000000c 	.word	0x2000000c
 80027ec:	08007fff 	.word	0x08007fff
 80027f0:	08008004 	.word	0x08008004
 80027f4:	200004b8 	.word	0x200004b8
 80027f8:	08008000 	.word	0x08008000
 80027fc:	20000334 	.word	0x20000334

08002800 <BL_Main_Loop>:
    }



void BL_Main_Loop()
    {
 8002800:	b508      	push	{r3, lr}

    HAL_Delay(1);
 8002802:	2001      	movs	r0, #1
 8002804:	f7fe fb6c 	bl	8000ee0 <HAL_Delay>

    /* if pin is reset enter bootloader*/
    //if(HAL_GPIO_ReadPin(Boot_GPIO_Port, Boot_Pin) == GPIO_PIN_RESET)
	{
	Bootloader();
 8002808:	f7ff ff1c 	bl	8002644 <Bootloader>

0800280c <MX_CRC_Init>:

/* CRC init function */
void MX_CRC_Init(void)
{

  hcrc.Instance = CRC;
 800280c:	4805      	ldr	r0, [pc, #20]	; (8002824 <MX_CRC_Init+0x18>)
{
 800280e:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <MX_CRC_Init+0x1c>)
 8002812:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002814:	f7fe fc18 	bl	8001048 <HAL_CRC_Init>
 8002818:	b900      	cbnz	r0, 800281c <MX_CRC_Init+0x10>
  {
    Error_Handler();
  }

}
 800281a:	bd08      	pop	{r3, pc}
 800281c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002820:	f000 b910 	b.w	8002a44 <Error_Handler>
 8002824:	200004bc 	.word	0x200004bc
 8002828:	40023000 	.word	0x40023000

0800282c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 800282c:	6802      	ldr	r2, [r0, #0]
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_CRC_MspInit+0x30>)
 8002830:	429a      	cmp	r2, r3
 8002832:	d000      	beq.n	8002836 <HAL_CRC_MspInit+0xa>
 8002834:	4770      	bx	lr
{
 8002836:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002838:	2200      	movs	r2, #0
 800283a:	9201      	str	r2, [sp, #4]
 800283c:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8002840:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002844:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
 8002848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002856:	b002      	add	sp, #8
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40023000 	.word	0x40023000

08002860 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002860:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002862:	2400      	movs	r4, #0
{
 8002864:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002866:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800286a:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	4b42      	ldr	r3, [pc, #264]	; (8002978 <MX_GPIO_Init+0x118>)
 8002870:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002872:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002876:	4e41      	ldr	r6, [pc, #260]	; (800297c <MX_GPIO_Init+0x11c>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002878:	4f41      	ldr	r7, [pc, #260]	; (8002980 <MX_GPIO_Init+0x120>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800287a:	f042 0204 	orr.w	r2, r2, #4
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
 8002880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002882:	f002 0204 	and.w	r2, r2, #4
 8002886:	9200      	str	r2, [sp, #0]
 8002888:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800288a:	9401      	str	r4, [sp, #4]
 800288c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
 8002894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002896:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800289e:	9402      	str	r4, [sp, #8]
 80028a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
 80028a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028aa:	f002 0201 	and.w	r2, r2, #1
 80028ae:	9202      	str	r2, [sp, #8]
 80028b0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b2:	9403      	str	r4, [sp, #12]
 80028b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028b6:	f042 0202 	orr.w	r2, r2, #2
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
 80028bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028be:	f002 0202 	and.w	r2, r2, #2
 80028c2:	9203      	str	r2, [sp, #12]
 80028c4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028c6:	9404      	str	r4, [sp, #16]
 80028c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ca:	f042 0208 	orr.w	r2, r2, #8
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80028d8:	4622      	mov	r2, r4
 80028da:	4630      	mov	r0, r6
 80028dc:	2120      	movs	r1, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028de:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80028e0:	f7fe ffba 	bl	8001858 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028e4:	4b27      	ldr	r3, [pc, #156]	; (8002984 <MX_GPIO_Init+0x124>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = B1_Pin;
 80028e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028ec:	a905      	add	r1, sp, #20
 80028ee:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028f4:	2503      	movs	r5, #3
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028f6:	f7fe fe61 	bl	80015bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
 80028fa:	f64d 73ff 	movw	r3, #57343	; 0xdfff
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028fe:	4638      	mov	r0, r7
 8002900:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002902:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002908:	f7fe fe58 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800290c:	a905      	add	r1, sp, #20
 800290e:	481e      	ldr	r0, [pc, #120]	; (8002988 <MX_GPIO_Init+0x128>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002912:	e9cd 5505 	strd	r5, r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002916:	f7fe fe51 	bl	80015bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291a:	a905      	add	r1, sp, #20
 800291c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6 
 800291e:	f649 33d3 	movw	r3, #39891	; 0x9bd3
 8002922:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002924:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	e9cd 5406 	strd	r5, r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292a:	f7fe fe47 	bl	80015bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800292e:	a905      	add	r1, sp, #20
 8002930:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LD2_Pin;
 8002932:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002934:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002938:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800293c:	f7fe fe3e 	bl	80015bc <HAL_GPIO_Init>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002940:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8002942:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002946:	4811      	ldr	r0, [pc, #68]	; (800298c <MX_GPIO_Init+0x12c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8002948:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	e9cd 5406 	strd	r5, r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294e:	f7fe fe35 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Boot_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(Boot_GPIO_Port, &GPIO_InitStruct);
 8002952:	4630      	mov	r0, r6
 8002954:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = Boot_Pin;
 8002956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800295a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800295c:	e9cd 4706 	strd	r4, r7, [sp, #24]
  HAL_GPIO_Init(Boot_GPIO_Port, &GPIO_InitStruct);
 8002960:	f7fe fe2c 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002964:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002966:	a905      	add	r1, sp, #20
 8002968:	4809      	ldr	r0, [pc, #36]	; (8002990 <MX_GPIO_Init+0x130>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800296a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	e9cd 5406 	strd	r5, r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002970:	f7fe fe24 	bl	80015bc <HAL_GPIO_Init>

}
 8002974:	b00b      	add	sp, #44	; 0x2c
 8002976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002978:	40023800 	.word	0x40023800
 800297c:	40020000 	.word	0x40020000
 8002980:	40020800 	.word	0x40020800
 8002984:	10210000 	.word	0x10210000
 8002988:	40021c00 	.word	0x40021c00
 800298c:	40020400 	.word	0x40020400
 8002990:	40020c00 	.word	0x40020c00

08002994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002994:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002996:	2400      	movs	r4, #0
{
 8002998:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800299a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800299e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029a2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80029a6:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <SystemClock_Config+0x8c>)
 80029ac:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ae:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029b0:	9403      	str	r4, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80029b4:	4a1b      	ldr	r2, [pc, #108]	; (8002a24 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80029ba:	6419      	str	r1, [r3, #64]	; 0x40
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	9301      	str	r3, [sp, #4]
 80029c4:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80029c6:	9402      	str	r4, [sp, #8]
 80029c8:	6813      	ldr	r3, [r2, #0]
 80029ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029d6:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80029d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029dc:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029de:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029e0:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029e2:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 80029e4:	2108      	movs	r1, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80029e6:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029e8:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029ea:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 84;
 80029ec:	2254      	movs	r2, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80029ee:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029f0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 8;
 80029f2:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80029f4:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80029f6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029f8:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029fa:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029fc:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029fe:	f7fe ff45 	bl	800188c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a02:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a08:	a803      	add	r0, sp, #12
 8002a0a:	4629      	mov	r1, r5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a0c:	e9cd 5404 	strd	r5, r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a10:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a12:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a14:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a16:	f7ff f9e3 	bl	8001de0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002a1a:	b015      	add	sp, #84	; 0x54
 8002a1c:	bd30      	pop	{r4, r5, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40007000 	.word	0x40007000

08002a28 <main>:
{
 8002a28:	b508      	push	{r3, lr}
  HAL_Init();
 8002a2a:	f7fe fa2d 	bl	8000e88 <HAL_Init>
  SystemClock_Config();
 8002a2e:	f7ff ffb1 	bl	8002994 <SystemClock_Config>
  MX_GPIO_Init();
 8002a32:	f7ff ff15 	bl	8002860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002a36:	f000 f883 	bl	8002b40 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8002a3a:	f7ff fee7 	bl	800280c <MX_CRC_Init>
  BL_Main_Loop();
 8002a3e:	f7ff fedf 	bl	8002800 <BL_Main_Loop>
 8002a42:	e7fe      	b.n	8002a42 <main+0x1a>

08002a44 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop

08002a48 <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop

08002a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a4c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <HAL_MspInit+0x34>)
 8002a50:	2100      	movs	r1, #0
 8002a52:	9100      	str	r1, [sp, #0]
 8002a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a5a:	645a      	str	r2, [r3, #68]	; 0x44
 8002a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a5e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002a62:	9200      	str	r2, [sp, #0]
 8002a64:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a66:	9101      	str	r1, [sp, #4]
 8002a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a7a:	b002      	add	sp, #8
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800

08002a84 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop

08002a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a88:	e7fe      	b.n	8002a88 <HardFault_Handler>
 8002a8a:	bf00      	nop

08002a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a8c:	e7fe      	b.n	8002a8c <MemManage_Handler>
 8002a8e:	bf00      	nop

08002a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a90:	e7fe      	b.n	8002a90 <BusFault_Handler>
 8002a92:	bf00      	nop

08002a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a94:	e7fe      	b.n	8002a94 <UsageFault_Handler>
 8002a96:	bf00      	nop

08002a98 <SVC_Handler>:
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop

08002a9c <DebugMon_Handler>:
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop

08002aa0 <PendSV_Handler>:
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop

08002aa4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aa4:	f7fe ba0a 	b.w	8000ebc <HAL_IncTick>

08002aa8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002aa8:	4801      	ldr	r0, [pc, #4]	; (8002ab0 <USART2_IRQHandler+0x8>)
 8002aaa:	f7ff bcc1 	b.w	8002430 <HAL_UART_IRQHandler>
 8002aae:	bf00      	nop
 8002ab0:	200004c4 	.word	0x200004c4

08002ab4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ab4:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <_sbrk+0x34>)
{
 8002ab6:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8002ab8:	6813      	ldr	r3, [r2, #0]
 8002aba:	b133      	cbz	r3, 8002aca <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002abc:	4418      	add	r0, r3
 8002abe:	4669      	mov	r1, sp
 8002ac0:	4288      	cmp	r0, r1
 8002ac2:	d808      	bhi.n	8002ad6 <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8002ac4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <_sbrk+0x38>)
 8002acc:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002ace:	4418      	add	r0, r3
 8002ad0:	4669      	mov	r1, sp
 8002ad2:	4288      	cmp	r0, r1
 8002ad4:	d9f6      	bls.n	8002ac4 <_sbrk+0x10>
		errno = ENOMEM;
 8002ad6:	f000 f8b7 	bl	8002c48 <__errno>
 8002ada:	230c      	movs	r3, #12
 8002adc:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	bd08      	pop	{r3, pc}
 8002ae6:	bf00      	nop
 8002ae8:	200002fc 	.word	0x200002fc
 8002aec:	20000508 	.word	0x20000508

08002af0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002af0:	4910      	ldr	r1, [pc, #64]	; (8002b34 <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002af4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002af8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8002afc:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002afe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002b02:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002b04:	4c0d      	ldr	r4, [pc, #52]	; (8002b3c <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 8002b06:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002b0e:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002b16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b1a:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8002b1c:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002b1e:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b20:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002b24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b28:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 8002b2a:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b2c:	608c      	str	r4, [r1, #8]
#endif
}
 8002b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	24003010 	.word	0x24003010

08002b40 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <MX_USART2_UART_Init+0x30>)
 8002b42:	4a0c      	ldr	r2, [pc, #48]	; (8002b74 <MX_USART2_UART_Init+0x34>)
{
 8002b44:	b510      	push	{r4, lr}
  huart2.Init.BaudRate = 1800000;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b46:	210c      	movs	r1, #12
  huart2.Init.BaudRate = 1800000;
 8002b48:	4c0b      	ldr	r4, [pc, #44]	; (8002b78 <MX_USART2_UART_Init+0x38>)
  huart2.Instance = USART2;
 8002b4a:	601a      	str	r2, [r3, #0]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b4c:	4618      	mov	r0, r3
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b4e:	2200      	movs	r2, #0
  huart2.Init.BaudRate = 1800000;
 8002b50:	605c      	str	r4, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b52:	6159      	str	r1, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b54:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b58:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b5a:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b5e:	f7ff fa67 	bl	8002030 <HAL_UART_Init>
 8002b62:	b900      	cbnz	r0, 8002b66 <MX_USART2_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8002b64:	bd10      	pop	{r4, pc}
 8002b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002b6a:	f7ff bf6b 	b.w	8002a44 <Error_Handler>
 8002b6e:	bf00      	nop
 8002b70:	200004c4 	.word	0x200004c4
 8002b74:	40004400 	.word	0x40004400
 8002b78:	001b7740 	.word	0x001b7740

08002b7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b7c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8002b7e:	6802      	ldr	r2, [r0, #0]
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <HAL_UART_MspInit+0x70>)
{
 8002b82:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART2)
 8002b86:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002b8c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8002b90:	9407      	str	r4, [sp, #28]
  if(uartHandle->Instance==USART2)
 8002b92:	d001      	beq.n	8002b98 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b94:	b008      	add	sp, #32
 8002b96:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b98:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002b9c:	9401      	str	r4, [sp, #4]
 8002b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba0:	4813      	ldr	r0, [pc, #76]	; (8002bf0 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ba2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002baa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002bae:	9201      	str	r2, [sp, #4]
 8002bb0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	9402      	str	r4, [sp, #8]
 8002bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bc6:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bca:	250c      	movs	r5, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bcc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	e9cd 5203 	strd	r5, r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd2:	9e02      	ldr	r6, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd4:	f7fe fcf2 	bl	80015bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bd8:	4622      	mov	r2, r4
 8002bda:	4621      	mov	r1, r4
 8002bdc:	2026      	movs	r0, #38	; 0x26
 8002bde:	f7fe f9ad 	bl	8000f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002be2:	2026      	movs	r0, #38	; 0x26
 8002be4:	f7fe f9f0 	bl	8000fc8 <HAL_NVIC_EnableIRQ>
}
 8002be8:	b008      	add	sp, #32
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
 8002bec:	40004400 	.word	0x40004400
 8002bf0:	40020000 	.word	0x40020000

08002bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002bf8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002bfa:	e003      	b.n	8002c04 <LoopCopyDataInit>

08002bfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002bfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c02:	3104      	adds	r1, #4

08002c04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c04:	480b      	ldr	r0, [pc, #44]	; (8002c34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c0c:	d3f6      	bcc.n	8002bfc <CopyDataInit>
  ldr  r2, =_sbss
 8002c0e:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c10:	e002      	b.n	8002c18 <LoopFillZerobss>

08002c12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c14:	f842 3b04 	str.w	r3, [r2], #4

08002c18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c1c:	d3f9      	bcc.n	8002c12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c1e:	f7ff ff67 	bl	8002af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c22:	f000 f817 	bl	8002c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c26:	f7ff feff 	bl	8002a28 <main>
  bx  lr    
 8002c2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c2c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002c30:	08004b00 	.word	0x08004b00
  ldr  r0, =_sdata
 8002c34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c38:	200002e0 	.word	0x200002e0
  ldr  r2, =_sbss
 8002c3c:	200002e0 	.word	0x200002e0
  ldr  r3, = _ebss
 8002c40:	20000508 	.word	0x20000508

08002c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c44:	e7fe      	b.n	8002c44 <ADC_IRQHandler>
	...

08002c48 <__errno>:
 8002c48:	4b01      	ldr	r3, [pc, #4]	; (8002c50 <__errno+0x8>)
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000110 	.word	0x20000110

08002c54 <__libc_init_array>:
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	4e0d      	ldr	r6, [pc, #52]	; (8002c8c <__libc_init_array+0x38>)
 8002c58:	4c0d      	ldr	r4, [pc, #52]	; (8002c90 <__libc_init_array+0x3c>)
 8002c5a:	1ba4      	subs	r4, r4, r6
 8002c5c:	10a4      	asrs	r4, r4, #2
 8002c5e:	2500      	movs	r5, #0
 8002c60:	42a5      	cmp	r5, r4
 8002c62:	d109      	bne.n	8002c78 <__libc_init_array+0x24>
 8002c64:	4e0b      	ldr	r6, [pc, #44]	; (8002c94 <__libc_init_array+0x40>)
 8002c66:	4c0c      	ldr	r4, [pc, #48]	; (8002c98 <__libc_init_array+0x44>)
 8002c68:	f001 fd44 	bl	80046f4 <_init>
 8002c6c:	1ba4      	subs	r4, r4, r6
 8002c6e:	10a4      	asrs	r4, r4, #2
 8002c70:	2500      	movs	r5, #0
 8002c72:	42a5      	cmp	r5, r4
 8002c74:	d105      	bne.n	8002c82 <__libc_init_array+0x2e>
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
 8002c78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c7c:	4798      	blx	r3
 8002c7e:	3501      	adds	r5, #1
 8002c80:	e7ee      	b.n	8002c60 <__libc_init_array+0xc>
 8002c82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c86:	4798      	blx	r3
 8002c88:	3501      	adds	r5, #1
 8002c8a:	e7f2      	b.n	8002c72 <__libc_init_array+0x1e>
 8002c8c:	08004af8 	.word	0x08004af8
 8002c90:	08004af8 	.word	0x08004af8
 8002c94:	08004af8 	.word	0x08004af8
 8002c98:	08004afc 	.word	0x08004afc

08002c9c <memset>:
 8002c9c:	4402      	add	r2, r0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d100      	bne.n	8002ca6 <memset+0xa>
 8002ca4:	4770      	bx	lr
 8002ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8002caa:	e7f9      	b.n	8002ca0 <memset+0x4>

08002cac <__cvt>:
 8002cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cb0:	ec55 4b10 	vmov	r4, r5, d0
 8002cb4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002cb6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002cba:	2d00      	cmp	r5, #0
 8002cbc:	460e      	mov	r6, r1
 8002cbe:	4691      	mov	r9, r2
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	bfb8      	it	lt
 8002cc4:	4622      	movlt	r2, r4
 8002cc6:	462b      	mov	r3, r5
 8002cc8:	f027 0720 	bic.w	r7, r7, #32
 8002ccc:	bfbb      	ittet	lt
 8002cce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002cd2:	461d      	movlt	r5, r3
 8002cd4:	2300      	movge	r3, #0
 8002cd6:	232d      	movlt	r3, #45	; 0x2d
 8002cd8:	bfb8      	it	lt
 8002cda:	4614      	movlt	r4, r2
 8002cdc:	2f46      	cmp	r7, #70	; 0x46
 8002cde:	700b      	strb	r3, [r1, #0]
 8002ce0:	d004      	beq.n	8002cec <__cvt+0x40>
 8002ce2:	2f45      	cmp	r7, #69	; 0x45
 8002ce4:	d100      	bne.n	8002ce8 <__cvt+0x3c>
 8002ce6:	3601      	adds	r6, #1
 8002ce8:	2102      	movs	r1, #2
 8002cea:	e000      	b.n	8002cee <__cvt+0x42>
 8002cec:	2103      	movs	r1, #3
 8002cee:	ab03      	add	r3, sp, #12
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	ab02      	add	r3, sp, #8
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	4632      	mov	r2, r6
 8002cf8:	4653      	mov	r3, sl
 8002cfa:	ec45 4b10 	vmov	d0, r4, r5
 8002cfe:	f000 fbab 	bl	8003458 <_dtoa_r>
 8002d02:	2f47      	cmp	r7, #71	; 0x47
 8002d04:	4680      	mov	r8, r0
 8002d06:	d102      	bne.n	8002d0e <__cvt+0x62>
 8002d08:	f019 0f01 	tst.w	r9, #1
 8002d0c:	d026      	beq.n	8002d5c <__cvt+0xb0>
 8002d0e:	2f46      	cmp	r7, #70	; 0x46
 8002d10:	eb08 0906 	add.w	r9, r8, r6
 8002d14:	d111      	bne.n	8002d3a <__cvt+0x8e>
 8002d16:	f898 3000 	ldrb.w	r3, [r8]
 8002d1a:	2b30      	cmp	r3, #48	; 0x30
 8002d1c:	d10a      	bne.n	8002d34 <__cvt+0x88>
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2300      	movs	r3, #0
 8002d22:	4620      	mov	r0, r4
 8002d24:	4629      	mov	r1, r5
 8002d26:	f7fd fe83 	bl	8000a30 <__aeabi_dcmpeq>
 8002d2a:	b918      	cbnz	r0, 8002d34 <__cvt+0x88>
 8002d2c:	f1c6 0601 	rsb	r6, r6, #1
 8002d30:	f8ca 6000 	str.w	r6, [sl]
 8002d34:	f8da 3000 	ldr.w	r3, [sl]
 8002d38:	4499      	add	r9, r3
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	4620      	mov	r0, r4
 8002d40:	4629      	mov	r1, r5
 8002d42:	f7fd fe75 	bl	8000a30 <__aeabi_dcmpeq>
 8002d46:	b938      	cbnz	r0, 8002d58 <__cvt+0xac>
 8002d48:	2230      	movs	r2, #48	; 0x30
 8002d4a:	9b03      	ldr	r3, [sp, #12]
 8002d4c:	454b      	cmp	r3, r9
 8002d4e:	d205      	bcs.n	8002d5c <__cvt+0xb0>
 8002d50:	1c59      	adds	r1, r3, #1
 8002d52:	9103      	str	r1, [sp, #12]
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	e7f8      	b.n	8002d4a <__cvt+0x9e>
 8002d58:	f8cd 900c 	str.w	r9, [sp, #12]
 8002d5c:	9b03      	ldr	r3, [sp, #12]
 8002d5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d60:	eba3 0308 	sub.w	r3, r3, r8
 8002d64:	4640      	mov	r0, r8
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	b004      	add	sp, #16
 8002d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002d6e <__exponent>:
 8002d6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d70:	2900      	cmp	r1, #0
 8002d72:	4604      	mov	r4, r0
 8002d74:	bfba      	itte	lt
 8002d76:	4249      	neglt	r1, r1
 8002d78:	232d      	movlt	r3, #45	; 0x2d
 8002d7a:	232b      	movge	r3, #43	; 0x2b
 8002d7c:	2909      	cmp	r1, #9
 8002d7e:	f804 2b02 	strb.w	r2, [r4], #2
 8002d82:	7043      	strb	r3, [r0, #1]
 8002d84:	dd20      	ble.n	8002dc8 <__exponent+0x5a>
 8002d86:	f10d 0307 	add.w	r3, sp, #7
 8002d8a:	461f      	mov	r7, r3
 8002d8c:	260a      	movs	r6, #10
 8002d8e:	fb91 f5f6 	sdiv	r5, r1, r6
 8002d92:	fb06 1115 	mls	r1, r6, r5, r1
 8002d96:	3130      	adds	r1, #48	; 0x30
 8002d98:	2d09      	cmp	r5, #9
 8002d9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002d9e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8002da2:	4629      	mov	r1, r5
 8002da4:	dc09      	bgt.n	8002dba <__exponent+0x4c>
 8002da6:	3130      	adds	r1, #48	; 0x30
 8002da8:	3b02      	subs	r3, #2
 8002daa:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002dae:	42bb      	cmp	r3, r7
 8002db0:	4622      	mov	r2, r4
 8002db2:	d304      	bcc.n	8002dbe <__exponent+0x50>
 8002db4:	1a10      	subs	r0, r2, r0
 8002db6:	b003      	add	sp, #12
 8002db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dba:	4613      	mov	r3, r2
 8002dbc:	e7e7      	b.n	8002d8e <__exponent+0x20>
 8002dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dc2:	f804 2b01 	strb.w	r2, [r4], #1
 8002dc6:	e7f2      	b.n	8002dae <__exponent+0x40>
 8002dc8:	2330      	movs	r3, #48	; 0x30
 8002dca:	4419      	add	r1, r3
 8002dcc:	7083      	strb	r3, [r0, #2]
 8002dce:	1d02      	adds	r2, r0, #4
 8002dd0:	70c1      	strb	r1, [r0, #3]
 8002dd2:	e7ef      	b.n	8002db4 <__exponent+0x46>

08002dd4 <_printf_float>:
 8002dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dd8:	b08d      	sub	sp, #52	; 0x34
 8002dda:	460c      	mov	r4, r1
 8002ddc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002de0:	4616      	mov	r6, r2
 8002de2:	461f      	mov	r7, r3
 8002de4:	4605      	mov	r5, r0
 8002de6:	f001 f8ef 	bl	8003fc8 <_localeconv_r>
 8002dea:	6803      	ldr	r3, [r0, #0]
 8002dec:	9304      	str	r3, [sp, #16]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd f9f2 	bl	80001d8 <strlen>
 8002df4:	2300      	movs	r3, #0
 8002df6:	930a      	str	r3, [sp, #40]	; 0x28
 8002df8:	f8d8 3000 	ldr.w	r3, [r8]
 8002dfc:	9005      	str	r0, [sp, #20]
 8002dfe:	3307      	adds	r3, #7
 8002e00:	f023 0307 	bic.w	r3, r3, #7
 8002e04:	f103 0208 	add.w	r2, r3, #8
 8002e08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002e0c:	f8d4 b000 	ldr.w	fp, [r4]
 8002e10:	f8c8 2000 	str.w	r2, [r8]
 8002e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e18:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002e1c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002e20:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002e24:	9307      	str	r3, [sp, #28]
 8002e26:	f8cd 8018 	str.w	r8, [sp, #24]
 8002e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e2e:	4ba7      	ldr	r3, [pc, #668]	; (80030cc <_printf_float+0x2f8>)
 8002e30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e34:	f7fd fe2e 	bl	8000a94 <__aeabi_dcmpun>
 8002e38:	bb70      	cbnz	r0, 8002e98 <_printf_float+0xc4>
 8002e3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e3e:	4ba3      	ldr	r3, [pc, #652]	; (80030cc <_printf_float+0x2f8>)
 8002e40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e44:	f7fd fe08 	bl	8000a58 <__aeabi_dcmple>
 8002e48:	bb30      	cbnz	r0, 8002e98 <_printf_float+0xc4>
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	4640      	mov	r0, r8
 8002e50:	4649      	mov	r1, r9
 8002e52:	f7fd fdf7 	bl	8000a44 <__aeabi_dcmplt>
 8002e56:	b110      	cbz	r0, 8002e5e <_printf_float+0x8a>
 8002e58:	232d      	movs	r3, #45	; 0x2d
 8002e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e5e:	4a9c      	ldr	r2, [pc, #624]	; (80030d0 <_printf_float+0x2fc>)
 8002e60:	4b9c      	ldr	r3, [pc, #624]	; (80030d4 <_printf_float+0x300>)
 8002e62:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002e66:	bf8c      	ite	hi
 8002e68:	4690      	movhi	r8, r2
 8002e6a:	4698      	movls	r8, r3
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	f02b 0204 	bic.w	r2, fp, #4
 8002e72:	6123      	str	r3, [r4, #16]
 8002e74:	6022      	str	r2, [r4, #0]
 8002e76:	f04f 0900 	mov.w	r9, #0
 8002e7a:	9700      	str	r7, [sp, #0]
 8002e7c:	4633      	mov	r3, r6
 8002e7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8002e80:	4621      	mov	r1, r4
 8002e82:	4628      	mov	r0, r5
 8002e84:	f000 f9e6 	bl	8003254 <_printf_common>
 8002e88:	3001      	adds	r0, #1
 8002e8a:	f040 808d 	bne.w	8002fa8 <_printf_float+0x1d4>
 8002e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e92:	b00d      	add	sp, #52	; 0x34
 8002e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e98:	4642      	mov	r2, r8
 8002e9a:	464b      	mov	r3, r9
 8002e9c:	4640      	mov	r0, r8
 8002e9e:	4649      	mov	r1, r9
 8002ea0:	f7fd fdf8 	bl	8000a94 <__aeabi_dcmpun>
 8002ea4:	b110      	cbz	r0, 8002eac <_printf_float+0xd8>
 8002ea6:	4a8c      	ldr	r2, [pc, #560]	; (80030d8 <_printf_float+0x304>)
 8002ea8:	4b8c      	ldr	r3, [pc, #560]	; (80030dc <_printf_float+0x308>)
 8002eaa:	e7da      	b.n	8002e62 <_printf_float+0x8e>
 8002eac:	6861      	ldr	r1, [r4, #4]
 8002eae:	1c4b      	adds	r3, r1, #1
 8002eb0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002eb4:	a80a      	add	r0, sp, #40	; 0x28
 8002eb6:	d13e      	bne.n	8002f36 <_printf_float+0x162>
 8002eb8:	2306      	movs	r3, #6
 8002eba:	6063      	str	r3, [r4, #4]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002ec2:	ab09      	add	r3, sp, #36	; 0x24
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	ec49 8b10 	vmov	d0, r8, r9
 8002eca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002ece:	6022      	str	r2, [r4, #0]
 8002ed0:	f8cd a004 	str.w	sl, [sp, #4]
 8002ed4:	6861      	ldr	r1, [r4, #4]
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	f7ff fee8 	bl	8002cac <__cvt>
 8002edc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002ee0:	2b47      	cmp	r3, #71	; 0x47
 8002ee2:	4680      	mov	r8, r0
 8002ee4:	d109      	bne.n	8002efa <_printf_float+0x126>
 8002ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ee8:	1cd8      	adds	r0, r3, #3
 8002eea:	db02      	blt.n	8002ef2 <_printf_float+0x11e>
 8002eec:	6862      	ldr	r2, [r4, #4]
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	dd47      	ble.n	8002f82 <_printf_float+0x1ae>
 8002ef2:	f1aa 0a02 	sub.w	sl, sl, #2
 8002ef6:	fa5f fa8a 	uxtb.w	sl, sl
 8002efa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002efe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f00:	d824      	bhi.n	8002f4c <_printf_float+0x178>
 8002f02:	3901      	subs	r1, #1
 8002f04:	4652      	mov	r2, sl
 8002f06:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002f0a:	9109      	str	r1, [sp, #36]	; 0x24
 8002f0c:	f7ff ff2f 	bl	8002d6e <__exponent>
 8002f10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f12:	1813      	adds	r3, r2, r0
 8002f14:	2a01      	cmp	r2, #1
 8002f16:	4681      	mov	r9, r0
 8002f18:	6123      	str	r3, [r4, #16]
 8002f1a:	dc02      	bgt.n	8002f22 <_printf_float+0x14e>
 8002f1c:	6822      	ldr	r2, [r4, #0]
 8002f1e:	07d1      	lsls	r1, r2, #31
 8002f20:	d501      	bpl.n	8002f26 <_printf_float+0x152>
 8002f22:	3301      	adds	r3, #1
 8002f24:	6123      	str	r3, [r4, #16]
 8002f26:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0a5      	beq.n	8002e7a <_printf_float+0xa6>
 8002f2e:	232d      	movs	r3, #45	; 0x2d
 8002f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f34:	e7a1      	b.n	8002e7a <_printf_float+0xa6>
 8002f36:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002f3a:	f000 8177 	beq.w	800322c <_printf_float+0x458>
 8002f3e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002f42:	d1bb      	bne.n	8002ebc <_printf_float+0xe8>
 8002f44:	2900      	cmp	r1, #0
 8002f46:	d1b9      	bne.n	8002ebc <_printf_float+0xe8>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e7b6      	b.n	8002eba <_printf_float+0xe6>
 8002f4c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8002f50:	d119      	bne.n	8002f86 <_printf_float+0x1b2>
 8002f52:	2900      	cmp	r1, #0
 8002f54:	6863      	ldr	r3, [r4, #4]
 8002f56:	dd0c      	ble.n	8002f72 <_printf_float+0x19e>
 8002f58:	6121      	str	r1, [r4, #16]
 8002f5a:	b913      	cbnz	r3, 8002f62 <_printf_float+0x18e>
 8002f5c:	6822      	ldr	r2, [r4, #0]
 8002f5e:	07d2      	lsls	r2, r2, #31
 8002f60:	d502      	bpl.n	8002f68 <_printf_float+0x194>
 8002f62:	3301      	adds	r3, #1
 8002f64:	440b      	add	r3, r1
 8002f66:	6123      	str	r3, [r4, #16]
 8002f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f6a:	65a3      	str	r3, [r4, #88]	; 0x58
 8002f6c:	f04f 0900 	mov.w	r9, #0
 8002f70:	e7d9      	b.n	8002f26 <_printf_float+0x152>
 8002f72:	b913      	cbnz	r3, 8002f7a <_printf_float+0x1a6>
 8002f74:	6822      	ldr	r2, [r4, #0]
 8002f76:	07d0      	lsls	r0, r2, #31
 8002f78:	d501      	bpl.n	8002f7e <_printf_float+0x1aa>
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	e7f3      	b.n	8002f66 <_printf_float+0x192>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e7f1      	b.n	8002f66 <_printf_float+0x192>
 8002f82:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8002f86:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	db05      	blt.n	8002f9a <_printf_float+0x1c6>
 8002f8e:	6822      	ldr	r2, [r4, #0]
 8002f90:	6123      	str	r3, [r4, #16]
 8002f92:	07d1      	lsls	r1, r2, #31
 8002f94:	d5e8      	bpl.n	8002f68 <_printf_float+0x194>
 8002f96:	3301      	adds	r3, #1
 8002f98:	e7e5      	b.n	8002f66 <_printf_float+0x192>
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bfd4      	ite	le
 8002f9e:	f1c3 0302 	rsble	r3, r3, #2
 8002fa2:	2301      	movgt	r3, #1
 8002fa4:	4413      	add	r3, r2
 8002fa6:	e7de      	b.n	8002f66 <_printf_float+0x192>
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	055a      	lsls	r2, r3, #21
 8002fac:	d407      	bmi.n	8002fbe <_printf_float+0x1ea>
 8002fae:	6923      	ldr	r3, [r4, #16]
 8002fb0:	4642      	mov	r2, r8
 8002fb2:	4631      	mov	r1, r6
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	47b8      	blx	r7
 8002fb8:	3001      	adds	r0, #1
 8002fba:	d12b      	bne.n	8003014 <_printf_float+0x240>
 8002fbc:	e767      	b.n	8002e8e <_printf_float+0xba>
 8002fbe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002fc2:	f240 80dc 	bls.w	800317e <_printf_float+0x3aa>
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002fce:	f7fd fd2f 	bl	8000a30 <__aeabi_dcmpeq>
 8002fd2:	2800      	cmp	r0, #0
 8002fd4:	d033      	beq.n	800303e <_printf_float+0x26a>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	4a41      	ldr	r2, [pc, #260]	; (80030e0 <_printf_float+0x30c>)
 8002fda:	4631      	mov	r1, r6
 8002fdc:	4628      	mov	r0, r5
 8002fde:	47b8      	blx	r7
 8002fe0:	3001      	adds	r0, #1
 8002fe2:	f43f af54 	beq.w	8002e8e <_printf_float+0xba>
 8002fe6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002fea:	429a      	cmp	r2, r3
 8002fec:	db02      	blt.n	8002ff4 <_printf_float+0x220>
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	07d8      	lsls	r0, r3, #31
 8002ff2:	d50f      	bpl.n	8003014 <_printf_float+0x240>
 8002ff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002ff8:	4631      	mov	r1, r6
 8002ffa:	4628      	mov	r0, r5
 8002ffc:	47b8      	blx	r7
 8002ffe:	3001      	adds	r0, #1
 8003000:	f43f af45 	beq.w	8002e8e <_printf_float+0xba>
 8003004:	f04f 0800 	mov.w	r8, #0
 8003008:	f104 091a 	add.w	r9, r4, #26
 800300c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800300e:	3b01      	subs	r3, #1
 8003010:	4543      	cmp	r3, r8
 8003012:	dc09      	bgt.n	8003028 <_printf_float+0x254>
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	079b      	lsls	r3, r3, #30
 8003018:	f100 8103 	bmi.w	8003222 <_printf_float+0x44e>
 800301c:	68e0      	ldr	r0, [r4, #12]
 800301e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003020:	4298      	cmp	r0, r3
 8003022:	bfb8      	it	lt
 8003024:	4618      	movlt	r0, r3
 8003026:	e734      	b.n	8002e92 <_printf_float+0xbe>
 8003028:	2301      	movs	r3, #1
 800302a:	464a      	mov	r2, r9
 800302c:	4631      	mov	r1, r6
 800302e:	4628      	mov	r0, r5
 8003030:	47b8      	blx	r7
 8003032:	3001      	adds	r0, #1
 8003034:	f43f af2b 	beq.w	8002e8e <_printf_float+0xba>
 8003038:	f108 0801 	add.w	r8, r8, #1
 800303c:	e7e6      	b.n	800300c <_printf_float+0x238>
 800303e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003040:	2b00      	cmp	r3, #0
 8003042:	dc2b      	bgt.n	800309c <_printf_float+0x2c8>
 8003044:	2301      	movs	r3, #1
 8003046:	4a26      	ldr	r2, [pc, #152]	; (80030e0 <_printf_float+0x30c>)
 8003048:	4631      	mov	r1, r6
 800304a:	4628      	mov	r0, r5
 800304c:	47b8      	blx	r7
 800304e:	3001      	adds	r0, #1
 8003050:	f43f af1d 	beq.w	8002e8e <_printf_float+0xba>
 8003054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003056:	b923      	cbnz	r3, 8003062 <_printf_float+0x28e>
 8003058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800305a:	b913      	cbnz	r3, 8003062 <_printf_float+0x28e>
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	07d9      	lsls	r1, r3, #31
 8003060:	d5d8      	bpl.n	8003014 <_printf_float+0x240>
 8003062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003066:	4631      	mov	r1, r6
 8003068:	4628      	mov	r0, r5
 800306a:	47b8      	blx	r7
 800306c:	3001      	adds	r0, #1
 800306e:	f43f af0e 	beq.w	8002e8e <_printf_float+0xba>
 8003072:	f04f 0900 	mov.w	r9, #0
 8003076:	f104 0a1a 	add.w	sl, r4, #26
 800307a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800307c:	425b      	negs	r3, r3
 800307e:	454b      	cmp	r3, r9
 8003080:	dc01      	bgt.n	8003086 <_printf_float+0x2b2>
 8003082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003084:	e794      	b.n	8002fb0 <_printf_float+0x1dc>
 8003086:	2301      	movs	r3, #1
 8003088:	4652      	mov	r2, sl
 800308a:	4631      	mov	r1, r6
 800308c:	4628      	mov	r0, r5
 800308e:	47b8      	blx	r7
 8003090:	3001      	adds	r0, #1
 8003092:	f43f aefc 	beq.w	8002e8e <_printf_float+0xba>
 8003096:	f109 0901 	add.w	r9, r9, #1
 800309a:	e7ee      	b.n	800307a <_printf_float+0x2a6>
 800309c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800309e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030a0:	429a      	cmp	r2, r3
 80030a2:	bfa8      	it	ge
 80030a4:	461a      	movge	r2, r3
 80030a6:	2a00      	cmp	r2, #0
 80030a8:	4691      	mov	r9, r2
 80030aa:	dd07      	ble.n	80030bc <_printf_float+0x2e8>
 80030ac:	4613      	mov	r3, r2
 80030ae:	4631      	mov	r1, r6
 80030b0:	4642      	mov	r2, r8
 80030b2:	4628      	mov	r0, r5
 80030b4:	47b8      	blx	r7
 80030b6:	3001      	adds	r0, #1
 80030b8:	f43f aee9 	beq.w	8002e8e <_printf_float+0xba>
 80030bc:	f104 031a 	add.w	r3, r4, #26
 80030c0:	f04f 0b00 	mov.w	fp, #0
 80030c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030c8:	9306      	str	r3, [sp, #24]
 80030ca:	e015      	b.n	80030f8 <_printf_float+0x324>
 80030cc:	7fefffff 	.word	0x7fefffff
 80030d0:	080048cc 	.word	0x080048cc
 80030d4:	080048c8 	.word	0x080048c8
 80030d8:	080048d4 	.word	0x080048d4
 80030dc:	080048d0 	.word	0x080048d0
 80030e0:	080048d8 	.word	0x080048d8
 80030e4:	2301      	movs	r3, #1
 80030e6:	9a06      	ldr	r2, [sp, #24]
 80030e8:	4631      	mov	r1, r6
 80030ea:	4628      	mov	r0, r5
 80030ec:	47b8      	blx	r7
 80030ee:	3001      	adds	r0, #1
 80030f0:	f43f aecd 	beq.w	8002e8e <_printf_float+0xba>
 80030f4:	f10b 0b01 	add.w	fp, fp, #1
 80030f8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80030fc:	ebaa 0309 	sub.w	r3, sl, r9
 8003100:	455b      	cmp	r3, fp
 8003102:	dcef      	bgt.n	80030e4 <_printf_float+0x310>
 8003104:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003108:	429a      	cmp	r2, r3
 800310a:	44d0      	add	r8, sl
 800310c:	db15      	blt.n	800313a <_printf_float+0x366>
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	07da      	lsls	r2, r3, #31
 8003112:	d412      	bmi.n	800313a <_printf_float+0x366>
 8003114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003116:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003118:	eba3 020a 	sub.w	r2, r3, sl
 800311c:	eba3 0a01 	sub.w	sl, r3, r1
 8003120:	4592      	cmp	sl, r2
 8003122:	bfa8      	it	ge
 8003124:	4692      	movge	sl, r2
 8003126:	f1ba 0f00 	cmp.w	sl, #0
 800312a:	dc0e      	bgt.n	800314a <_printf_float+0x376>
 800312c:	f04f 0800 	mov.w	r8, #0
 8003130:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003134:	f104 091a 	add.w	r9, r4, #26
 8003138:	e019      	b.n	800316e <_printf_float+0x39a>
 800313a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800313e:	4631      	mov	r1, r6
 8003140:	4628      	mov	r0, r5
 8003142:	47b8      	blx	r7
 8003144:	3001      	adds	r0, #1
 8003146:	d1e5      	bne.n	8003114 <_printf_float+0x340>
 8003148:	e6a1      	b.n	8002e8e <_printf_float+0xba>
 800314a:	4653      	mov	r3, sl
 800314c:	4642      	mov	r2, r8
 800314e:	4631      	mov	r1, r6
 8003150:	4628      	mov	r0, r5
 8003152:	47b8      	blx	r7
 8003154:	3001      	adds	r0, #1
 8003156:	d1e9      	bne.n	800312c <_printf_float+0x358>
 8003158:	e699      	b.n	8002e8e <_printf_float+0xba>
 800315a:	2301      	movs	r3, #1
 800315c:	464a      	mov	r2, r9
 800315e:	4631      	mov	r1, r6
 8003160:	4628      	mov	r0, r5
 8003162:	47b8      	blx	r7
 8003164:	3001      	adds	r0, #1
 8003166:	f43f ae92 	beq.w	8002e8e <_printf_float+0xba>
 800316a:	f108 0801 	add.w	r8, r8, #1
 800316e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	eba3 030a 	sub.w	r3, r3, sl
 8003178:	4543      	cmp	r3, r8
 800317a:	dcee      	bgt.n	800315a <_printf_float+0x386>
 800317c:	e74a      	b.n	8003014 <_printf_float+0x240>
 800317e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003180:	2a01      	cmp	r2, #1
 8003182:	dc01      	bgt.n	8003188 <_printf_float+0x3b4>
 8003184:	07db      	lsls	r3, r3, #31
 8003186:	d53a      	bpl.n	80031fe <_printf_float+0x42a>
 8003188:	2301      	movs	r3, #1
 800318a:	4642      	mov	r2, r8
 800318c:	4631      	mov	r1, r6
 800318e:	4628      	mov	r0, r5
 8003190:	47b8      	blx	r7
 8003192:	3001      	adds	r0, #1
 8003194:	f43f ae7b 	beq.w	8002e8e <_printf_float+0xba>
 8003198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800319c:	4631      	mov	r1, r6
 800319e:	4628      	mov	r0, r5
 80031a0:	47b8      	blx	r7
 80031a2:	3001      	adds	r0, #1
 80031a4:	f108 0801 	add.w	r8, r8, #1
 80031a8:	f43f ae71 	beq.w	8002e8e <_printf_float+0xba>
 80031ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031ae:	2200      	movs	r2, #0
 80031b0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80031b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80031b8:	2300      	movs	r3, #0
 80031ba:	f7fd fc39 	bl	8000a30 <__aeabi_dcmpeq>
 80031be:	b9c8      	cbnz	r0, 80031f4 <_printf_float+0x420>
 80031c0:	4653      	mov	r3, sl
 80031c2:	4642      	mov	r2, r8
 80031c4:	4631      	mov	r1, r6
 80031c6:	4628      	mov	r0, r5
 80031c8:	47b8      	blx	r7
 80031ca:	3001      	adds	r0, #1
 80031cc:	d10e      	bne.n	80031ec <_printf_float+0x418>
 80031ce:	e65e      	b.n	8002e8e <_printf_float+0xba>
 80031d0:	2301      	movs	r3, #1
 80031d2:	4652      	mov	r2, sl
 80031d4:	4631      	mov	r1, r6
 80031d6:	4628      	mov	r0, r5
 80031d8:	47b8      	blx	r7
 80031da:	3001      	adds	r0, #1
 80031dc:	f43f ae57 	beq.w	8002e8e <_printf_float+0xba>
 80031e0:	f108 0801 	add.w	r8, r8, #1
 80031e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031e6:	3b01      	subs	r3, #1
 80031e8:	4543      	cmp	r3, r8
 80031ea:	dcf1      	bgt.n	80031d0 <_printf_float+0x3fc>
 80031ec:	464b      	mov	r3, r9
 80031ee:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80031f2:	e6de      	b.n	8002fb2 <_printf_float+0x1de>
 80031f4:	f04f 0800 	mov.w	r8, #0
 80031f8:	f104 0a1a 	add.w	sl, r4, #26
 80031fc:	e7f2      	b.n	80031e4 <_printf_float+0x410>
 80031fe:	2301      	movs	r3, #1
 8003200:	e7df      	b.n	80031c2 <_printf_float+0x3ee>
 8003202:	2301      	movs	r3, #1
 8003204:	464a      	mov	r2, r9
 8003206:	4631      	mov	r1, r6
 8003208:	4628      	mov	r0, r5
 800320a:	47b8      	blx	r7
 800320c:	3001      	adds	r0, #1
 800320e:	f43f ae3e 	beq.w	8002e8e <_printf_float+0xba>
 8003212:	f108 0801 	add.w	r8, r8, #1
 8003216:	68e3      	ldr	r3, [r4, #12]
 8003218:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	4543      	cmp	r3, r8
 800321e:	dcf0      	bgt.n	8003202 <_printf_float+0x42e>
 8003220:	e6fc      	b.n	800301c <_printf_float+0x248>
 8003222:	f04f 0800 	mov.w	r8, #0
 8003226:	f104 0919 	add.w	r9, r4, #25
 800322a:	e7f4      	b.n	8003216 <_printf_float+0x442>
 800322c:	2900      	cmp	r1, #0
 800322e:	f43f ae8b 	beq.w	8002f48 <_printf_float+0x174>
 8003232:	2300      	movs	r3, #0
 8003234:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003238:	ab09      	add	r3, sp, #36	; 0x24
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	ec49 8b10 	vmov	d0, r8, r9
 8003240:	6022      	str	r2, [r4, #0]
 8003242:	f8cd a004 	str.w	sl, [sp, #4]
 8003246:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800324a:	4628      	mov	r0, r5
 800324c:	f7ff fd2e 	bl	8002cac <__cvt>
 8003250:	4680      	mov	r8, r0
 8003252:	e648      	b.n	8002ee6 <_printf_float+0x112>

08003254 <_printf_common>:
 8003254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003258:	4691      	mov	r9, r2
 800325a:	461f      	mov	r7, r3
 800325c:	688a      	ldr	r2, [r1, #8]
 800325e:	690b      	ldr	r3, [r1, #16]
 8003260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003264:	4293      	cmp	r3, r2
 8003266:	bfb8      	it	lt
 8003268:	4613      	movlt	r3, r2
 800326a:	f8c9 3000 	str.w	r3, [r9]
 800326e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003272:	4606      	mov	r6, r0
 8003274:	460c      	mov	r4, r1
 8003276:	b112      	cbz	r2, 800327e <_printf_common+0x2a>
 8003278:	3301      	adds	r3, #1
 800327a:	f8c9 3000 	str.w	r3, [r9]
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	0699      	lsls	r1, r3, #26
 8003282:	bf42      	ittt	mi
 8003284:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003288:	3302      	addmi	r3, #2
 800328a:	f8c9 3000 	strmi.w	r3, [r9]
 800328e:	6825      	ldr	r5, [r4, #0]
 8003290:	f015 0506 	ands.w	r5, r5, #6
 8003294:	d107      	bne.n	80032a6 <_printf_common+0x52>
 8003296:	f104 0a19 	add.w	sl, r4, #25
 800329a:	68e3      	ldr	r3, [r4, #12]
 800329c:	f8d9 2000 	ldr.w	r2, [r9]
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	42ab      	cmp	r3, r5
 80032a4:	dc28      	bgt.n	80032f8 <_printf_common+0xa4>
 80032a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80032aa:	6822      	ldr	r2, [r4, #0]
 80032ac:	3300      	adds	r3, #0
 80032ae:	bf18      	it	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	0692      	lsls	r2, r2, #26
 80032b4:	d42d      	bmi.n	8003312 <_printf_common+0xbe>
 80032b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032ba:	4639      	mov	r1, r7
 80032bc:	4630      	mov	r0, r6
 80032be:	47c0      	blx	r8
 80032c0:	3001      	adds	r0, #1
 80032c2:	d020      	beq.n	8003306 <_printf_common+0xb2>
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	68e5      	ldr	r5, [r4, #12]
 80032c8:	f8d9 2000 	ldr.w	r2, [r9]
 80032cc:	f003 0306 	and.w	r3, r3, #6
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	bf08      	it	eq
 80032d4:	1aad      	subeq	r5, r5, r2
 80032d6:	68a3      	ldr	r3, [r4, #8]
 80032d8:	6922      	ldr	r2, [r4, #16]
 80032da:	bf0c      	ite	eq
 80032dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032e0:	2500      	movne	r5, #0
 80032e2:	4293      	cmp	r3, r2
 80032e4:	bfc4      	itt	gt
 80032e6:	1a9b      	subgt	r3, r3, r2
 80032e8:	18ed      	addgt	r5, r5, r3
 80032ea:	f04f 0900 	mov.w	r9, #0
 80032ee:	341a      	adds	r4, #26
 80032f0:	454d      	cmp	r5, r9
 80032f2:	d11a      	bne.n	800332a <_printf_common+0xd6>
 80032f4:	2000      	movs	r0, #0
 80032f6:	e008      	b.n	800330a <_printf_common+0xb6>
 80032f8:	2301      	movs	r3, #1
 80032fa:	4652      	mov	r2, sl
 80032fc:	4639      	mov	r1, r7
 80032fe:	4630      	mov	r0, r6
 8003300:	47c0      	blx	r8
 8003302:	3001      	adds	r0, #1
 8003304:	d103      	bne.n	800330e <_printf_common+0xba>
 8003306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800330a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800330e:	3501      	adds	r5, #1
 8003310:	e7c3      	b.n	800329a <_printf_common+0x46>
 8003312:	18e1      	adds	r1, r4, r3
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	2030      	movs	r0, #48	; 0x30
 8003318:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800331c:	4422      	add	r2, r4
 800331e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003322:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003326:	3302      	adds	r3, #2
 8003328:	e7c5      	b.n	80032b6 <_printf_common+0x62>
 800332a:	2301      	movs	r3, #1
 800332c:	4622      	mov	r2, r4
 800332e:	4639      	mov	r1, r7
 8003330:	4630      	mov	r0, r6
 8003332:	47c0      	blx	r8
 8003334:	3001      	adds	r0, #1
 8003336:	d0e6      	beq.n	8003306 <_printf_common+0xb2>
 8003338:	f109 0901 	add.w	r9, r9, #1
 800333c:	e7d8      	b.n	80032f0 <_printf_common+0x9c>

0800333e <quorem>:
 800333e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003342:	6903      	ldr	r3, [r0, #16]
 8003344:	690c      	ldr	r4, [r1, #16]
 8003346:	42a3      	cmp	r3, r4
 8003348:	4680      	mov	r8, r0
 800334a:	f2c0 8082 	blt.w	8003452 <quorem+0x114>
 800334e:	3c01      	subs	r4, #1
 8003350:	f101 0714 	add.w	r7, r1, #20
 8003354:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003358:	f100 0614 	add.w	r6, r0, #20
 800335c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003360:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003364:	eb06 030c 	add.w	r3, r6, ip
 8003368:	3501      	adds	r5, #1
 800336a:	eb07 090c 	add.w	r9, r7, ip
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	fbb0 f5f5 	udiv	r5, r0, r5
 8003374:	b395      	cbz	r5, 80033dc <quorem+0x9e>
 8003376:	f04f 0a00 	mov.w	sl, #0
 800337a:	4638      	mov	r0, r7
 800337c:	46b6      	mov	lr, r6
 800337e:	46d3      	mov	fp, sl
 8003380:	f850 2b04 	ldr.w	r2, [r0], #4
 8003384:	b293      	uxth	r3, r2
 8003386:	fb05 a303 	mla	r3, r5, r3, sl
 800338a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800338e:	b29b      	uxth	r3, r3
 8003390:	ebab 0303 	sub.w	r3, fp, r3
 8003394:	0c12      	lsrs	r2, r2, #16
 8003396:	f8de b000 	ldr.w	fp, [lr]
 800339a:	fb05 a202 	mla	r2, r5, r2, sl
 800339e:	fa13 f38b 	uxtah	r3, r3, fp
 80033a2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80033a6:	fa1f fb82 	uxth.w	fp, r2
 80033aa:	f8de 2000 	ldr.w	r2, [lr]
 80033ae:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80033b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033bc:	4581      	cmp	r9, r0
 80033be:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80033c2:	f84e 3b04 	str.w	r3, [lr], #4
 80033c6:	d2db      	bcs.n	8003380 <quorem+0x42>
 80033c8:	f856 300c 	ldr.w	r3, [r6, ip]
 80033cc:	b933      	cbnz	r3, 80033dc <quorem+0x9e>
 80033ce:	9b01      	ldr	r3, [sp, #4]
 80033d0:	3b04      	subs	r3, #4
 80033d2:	429e      	cmp	r6, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	d330      	bcc.n	800343a <quorem+0xfc>
 80033d8:	f8c8 4010 	str.w	r4, [r8, #16]
 80033dc:	4640      	mov	r0, r8
 80033de:	f001 f829 	bl	8004434 <__mcmp>
 80033e2:	2800      	cmp	r0, #0
 80033e4:	db25      	blt.n	8003432 <quorem+0xf4>
 80033e6:	3501      	adds	r5, #1
 80033e8:	4630      	mov	r0, r6
 80033ea:	f04f 0c00 	mov.w	ip, #0
 80033ee:	f857 2b04 	ldr.w	r2, [r7], #4
 80033f2:	f8d0 e000 	ldr.w	lr, [r0]
 80033f6:	b293      	uxth	r3, r2
 80033f8:	ebac 0303 	sub.w	r3, ip, r3
 80033fc:	0c12      	lsrs	r2, r2, #16
 80033fe:	fa13 f38e 	uxtah	r3, r3, lr
 8003402:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003406:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800340a:	b29b      	uxth	r3, r3
 800340c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003410:	45b9      	cmp	r9, r7
 8003412:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003416:	f840 3b04 	str.w	r3, [r0], #4
 800341a:	d2e8      	bcs.n	80033ee <quorem+0xb0>
 800341c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003420:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003424:	b92a      	cbnz	r2, 8003432 <quorem+0xf4>
 8003426:	3b04      	subs	r3, #4
 8003428:	429e      	cmp	r6, r3
 800342a:	461a      	mov	r2, r3
 800342c:	d30b      	bcc.n	8003446 <quorem+0x108>
 800342e:	f8c8 4010 	str.w	r4, [r8, #16]
 8003432:	4628      	mov	r0, r5
 8003434:	b003      	add	sp, #12
 8003436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	3b04      	subs	r3, #4
 800343e:	2a00      	cmp	r2, #0
 8003440:	d1ca      	bne.n	80033d8 <quorem+0x9a>
 8003442:	3c01      	subs	r4, #1
 8003444:	e7c5      	b.n	80033d2 <quorem+0x94>
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	3b04      	subs	r3, #4
 800344a:	2a00      	cmp	r2, #0
 800344c:	d1ef      	bne.n	800342e <quorem+0xf0>
 800344e:	3c01      	subs	r4, #1
 8003450:	e7ea      	b.n	8003428 <quorem+0xea>
 8003452:	2000      	movs	r0, #0
 8003454:	e7ee      	b.n	8003434 <quorem+0xf6>
	...

08003458 <_dtoa_r>:
 8003458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800345c:	ec57 6b10 	vmov	r6, r7, d0
 8003460:	b097      	sub	sp, #92	; 0x5c
 8003462:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003464:	9106      	str	r1, [sp, #24]
 8003466:	4604      	mov	r4, r0
 8003468:	920b      	str	r2, [sp, #44]	; 0x2c
 800346a:	9312      	str	r3, [sp, #72]	; 0x48
 800346c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003470:	e9cd 6700 	strd	r6, r7, [sp]
 8003474:	b93d      	cbnz	r5, 8003486 <_dtoa_r+0x2e>
 8003476:	2010      	movs	r0, #16
 8003478:	f000 fdb4 	bl	8003fe4 <malloc>
 800347c:	6260      	str	r0, [r4, #36]	; 0x24
 800347e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003482:	6005      	str	r5, [r0, #0]
 8003484:	60c5      	str	r5, [r0, #12]
 8003486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003488:	6819      	ldr	r1, [r3, #0]
 800348a:	b151      	cbz	r1, 80034a2 <_dtoa_r+0x4a>
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	604a      	str	r2, [r1, #4]
 8003490:	2301      	movs	r3, #1
 8003492:	4093      	lsls	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
 8003496:	4620      	mov	r0, r4
 8003498:	f000 fdeb 	bl	8004072 <_Bfree>
 800349c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	1e3b      	subs	r3, r7, #0
 80034a4:	bfbb      	ittet	lt
 80034a6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80034aa:	9301      	strlt	r3, [sp, #4]
 80034ac:	2300      	movge	r3, #0
 80034ae:	2201      	movlt	r2, #1
 80034b0:	bfac      	ite	ge
 80034b2:	f8c8 3000 	strge.w	r3, [r8]
 80034b6:	f8c8 2000 	strlt.w	r2, [r8]
 80034ba:	4baf      	ldr	r3, [pc, #700]	; (8003778 <_dtoa_r+0x320>)
 80034bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80034c0:	ea33 0308 	bics.w	r3, r3, r8
 80034c4:	d114      	bne.n	80034f0 <_dtoa_r+0x98>
 80034c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80034c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	9b00      	ldr	r3, [sp, #0]
 80034d0:	b923      	cbnz	r3, 80034dc <_dtoa_r+0x84>
 80034d2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80034d6:	2800      	cmp	r0, #0
 80034d8:	f000 8542 	beq.w	8003f60 <_dtoa_r+0xb08>
 80034dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034de:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800378c <_dtoa_r+0x334>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8544 	beq.w	8003f70 <_dtoa_r+0xb18>
 80034e8:	f10b 0303 	add.w	r3, fp, #3
 80034ec:	f000 bd3e 	b.w	8003f6c <_dtoa_r+0xb14>
 80034f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80034f4:	2200      	movs	r2, #0
 80034f6:	2300      	movs	r3, #0
 80034f8:	4630      	mov	r0, r6
 80034fa:	4639      	mov	r1, r7
 80034fc:	f7fd fa98 	bl	8000a30 <__aeabi_dcmpeq>
 8003500:	4681      	mov	r9, r0
 8003502:	b168      	cbz	r0, 8003520 <_dtoa_r+0xc8>
 8003504:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003506:	2301      	movs	r3, #1
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8524 	beq.w	8003f5a <_dtoa_r+0xb02>
 8003512:	4b9a      	ldr	r3, [pc, #616]	; (800377c <_dtoa_r+0x324>)
 8003514:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003516:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	f000 bd28 	b.w	8003f70 <_dtoa_r+0xb18>
 8003520:	aa14      	add	r2, sp, #80	; 0x50
 8003522:	a915      	add	r1, sp, #84	; 0x54
 8003524:	ec47 6b10 	vmov	d0, r6, r7
 8003528:	4620      	mov	r0, r4
 800352a:	f000 fffa 	bl	8004522 <__d2b>
 800352e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003532:	9004      	str	r0, [sp, #16]
 8003534:	2d00      	cmp	r5, #0
 8003536:	d07c      	beq.n	8003632 <_dtoa_r+0x1da>
 8003538:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800353c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8003540:	46b2      	mov	sl, r6
 8003542:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8003546:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800354a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800354e:	2200      	movs	r2, #0
 8003550:	4b8b      	ldr	r3, [pc, #556]	; (8003780 <_dtoa_r+0x328>)
 8003552:	4650      	mov	r0, sl
 8003554:	4659      	mov	r1, fp
 8003556:	f7fc fe4b 	bl	80001f0 <__aeabi_dsub>
 800355a:	a381      	add	r3, pc, #516	; (adr r3, 8003760 <_dtoa_r+0x308>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	f7fc fffe 	bl	8000560 <__aeabi_dmul>
 8003564:	a380      	add	r3, pc, #512	; (adr r3, 8003768 <_dtoa_r+0x310>)
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f7fc fe43 	bl	80001f4 <__adddf3>
 800356e:	4606      	mov	r6, r0
 8003570:	4628      	mov	r0, r5
 8003572:	460f      	mov	r7, r1
 8003574:	f7fc ff8a 	bl	800048c <__aeabi_i2d>
 8003578:	a37d      	add	r3, pc, #500	; (adr r3, 8003770 <_dtoa_r+0x318>)
 800357a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357e:	f7fc ffef 	bl	8000560 <__aeabi_dmul>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4630      	mov	r0, r6
 8003588:	4639      	mov	r1, r7
 800358a:	f7fc fe33 	bl	80001f4 <__adddf3>
 800358e:	4606      	mov	r6, r0
 8003590:	460f      	mov	r7, r1
 8003592:	f7fd fa95 	bl	8000ac0 <__aeabi_d2iz>
 8003596:	2200      	movs	r2, #0
 8003598:	4682      	mov	sl, r0
 800359a:	2300      	movs	r3, #0
 800359c:	4630      	mov	r0, r6
 800359e:	4639      	mov	r1, r7
 80035a0:	f7fd fa50 	bl	8000a44 <__aeabi_dcmplt>
 80035a4:	b148      	cbz	r0, 80035ba <_dtoa_r+0x162>
 80035a6:	4650      	mov	r0, sl
 80035a8:	f7fc ff70 	bl	800048c <__aeabi_i2d>
 80035ac:	4632      	mov	r2, r6
 80035ae:	463b      	mov	r3, r7
 80035b0:	f7fd fa3e 	bl	8000a30 <__aeabi_dcmpeq>
 80035b4:	b908      	cbnz	r0, 80035ba <_dtoa_r+0x162>
 80035b6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80035ba:	f1ba 0f16 	cmp.w	sl, #22
 80035be:	d859      	bhi.n	8003674 <_dtoa_r+0x21c>
 80035c0:	4970      	ldr	r1, [pc, #448]	; (8003784 <_dtoa_r+0x32c>)
 80035c2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80035c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80035ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035ce:	f7fd fa57 	bl	8000a80 <__aeabi_dcmpgt>
 80035d2:	2800      	cmp	r0, #0
 80035d4:	d050      	beq.n	8003678 <_dtoa_r+0x220>
 80035d6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80035da:	2300      	movs	r3, #0
 80035dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80035de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80035e0:	1b5d      	subs	r5, r3, r5
 80035e2:	f1b5 0801 	subs.w	r8, r5, #1
 80035e6:	bf49      	itett	mi
 80035e8:	f1c5 0301 	rsbmi	r3, r5, #1
 80035ec:	2300      	movpl	r3, #0
 80035ee:	9305      	strmi	r3, [sp, #20]
 80035f0:	f04f 0800 	movmi.w	r8, #0
 80035f4:	bf58      	it	pl
 80035f6:	9305      	strpl	r3, [sp, #20]
 80035f8:	f1ba 0f00 	cmp.w	sl, #0
 80035fc:	db3e      	blt.n	800367c <_dtoa_r+0x224>
 80035fe:	2300      	movs	r3, #0
 8003600:	44d0      	add	r8, sl
 8003602:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003606:	9307      	str	r3, [sp, #28]
 8003608:	9b06      	ldr	r3, [sp, #24]
 800360a:	2b09      	cmp	r3, #9
 800360c:	f200 8090 	bhi.w	8003730 <_dtoa_r+0x2d8>
 8003610:	2b05      	cmp	r3, #5
 8003612:	bfc4      	itt	gt
 8003614:	3b04      	subgt	r3, #4
 8003616:	9306      	strgt	r3, [sp, #24]
 8003618:	9b06      	ldr	r3, [sp, #24]
 800361a:	f1a3 0302 	sub.w	r3, r3, #2
 800361e:	bfcc      	ite	gt
 8003620:	2500      	movgt	r5, #0
 8003622:	2501      	movle	r5, #1
 8003624:	2b03      	cmp	r3, #3
 8003626:	f200 808f 	bhi.w	8003748 <_dtoa_r+0x2f0>
 800362a:	e8df f003 	tbb	[pc, r3]
 800362e:	7f7d      	.short	0x7f7d
 8003630:	7131      	.short	0x7131
 8003632:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8003636:	441d      	add	r5, r3
 8003638:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800363c:	2820      	cmp	r0, #32
 800363e:	dd13      	ble.n	8003668 <_dtoa_r+0x210>
 8003640:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003644:	9b00      	ldr	r3, [sp, #0]
 8003646:	fa08 f800 	lsl.w	r8, r8, r0
 800364a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800364e:	fa23 f000 	lsr.w	r0, r3, r0
 8003652:	ea48 0000 	orr.w	r0, r8, r0
 8003656:	f7fc ff09 	bl	800046c <__aeabi_ui2d>
 800365a:	2301      	movs	r3, #1
 800365c:	4682      	mov	sl, r0
 800365e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8003662:	3d01      	subs	r5, #1
 8003664:	9313      	str	r3, [sp, #76]	; 0x4c
 8003666:	e772      	b.n	800354e <_dtoa_r+0xf6>
 8003668:	9b00      	ldr	r3, [sp, #0]
 800366a:	f1c0 0020 	rsb	r0, r0, #32
 800366e:	fa03 f000 	lsl.w	r0, r3, r0
 8003672:	e7f0      	b.n	8003656 <_dtoa_r+0x1fe>
 8003674:	2301      	movs	r3, #1
 8003676:	e7b1      	b.n	80035dc <_dtoa_r+0x184>
 8003678:	900f      	str	r0, [sp, #60]	; 0x3c
 800367a:	e7b0      	b.n	80035de <_dtoa_r+0x186>
 800367c:	9b05      	ldr	r3, [sp, #20]
 800367e:	eba3 030a 	sub.w	r3, r3, sl
 8003682:	9305      	str	r3, [sp, #20]
 8003684:	f1ca 0300 	rsb	r3, sl, #0
 8003688:	9307      	str	r3, [sp, #28]
 800368a:	2300      	movs	r3, #0
 800368c:	930e      	str	r3, [sp, #56]	; 0x38
 800368e:	e7bb      	b.n	8003608 <_dtoa_r+0x1b0>
 8003690:	2301      	movs	r3, #1
 8003692:	930a      	str	r3, [sp, #40]	; 0x28
 8003694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003696:	2b00      	cmp	r3, #0
 8003698:	dd59      	ble.n	800374e <_dtoa_r+0x2f6>
 800369a:	9302      	str	r3, [sp, #8]
 800369c:	4699      	mov	r9, r3
 800369e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80036a0:	2200      	movs	r2, #0
 80036a2:	6072      	str	r2, [r6, #4]
 80036a4:	2204      	movs	r2, #4
 80036a6:	f102 0014 	add.w	r0, r2, #20
 80036aa:	4298      	cmp	r0, r3
 80036ac:	6871      	ldr	r1, [r6, #4]
 80036ae:	d953      	bls.n	8003758 <_dtoa_r+0x300>
 80036b0:	4620      	mov	r0, r4
 80036b2:	f000 fcaa 	bl	800400a <_Balloc>
 80036b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036b8:	6030      	str	r0, [r6, #0]
 80036ba:	f1b9 0f0e 	cmp.w	r9, #14
 80036be:	f8d3 b000 	ldr.w	fp, [r3]
 80036c2:	f200 80e6 	bhi.w	8003892 <_dtoa_r+0x43a>
 80036c6:	2d00      	cmp	r5, #0
 80036c8:	f000 80e3 	beq.w	8003892 <_dtoa_r+0x43a>
 80036cc:	ed9d 7b00 	vldr	d7, [sp]
 80036d0:	f1ba 0f00 	cmp.w	sl, #0
 80036d4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80036d8:	dd74      	ble.n	80037c4 <_dtoa_r+0x36c>
 80036da:	4a2a      	ldr	r2, [pc, #168]	; (8003784 <_dtoa_r+0x32c>)
 80036dc:	f00a 030f 	and.w	r3, sl, #15
 80036e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80036e4:	ed93 7b00 	vldr	d7, [r3]
 80036e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80036ec:	06f0      	lsls	r0, r6, #27
 80036ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 80036f2:	d565      	bpl.n	80037c0 <_dtoa_r+0x368>
 80036f4:	4b24      	ldr	r3, [pc, #144]	; (8003788 <_dtoa_r+0x330>)
 80036f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80036fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80036fe:	f7fd f859 	bl	80007b4 <__aeabi_ddiv>
 8003702:	e9cd 0100 	strd	r0, r1, [sp]
 8003706:	f006 060f 	and.w	r6, r6, #15
 800370a:	2503      	movs	r5, #3
 800370c:	4f1e      	ldr	r7, [pc, #120]	; (8003788 <_dtoa_r+0x330>)
 800370e:	e04c      	b.n	80037aa <_dtoa_r+0x352>
 8003710:	2301      	movs	r3, #1
 8003712:	930a      	str	r3, [sp, #40]	; 0x28
 8003714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003716:	4453      	add	r3, sl
 8003718:	f103 0901 	add.w	r9, r3, #1
 800371c:	9302      	str	r3, [sp, #8]
 800371e:	464b      	mov	r3, r9
 8003720:	2b01      	cmp	r3, #1
 8003722:	bfb8      	it	lt
 8003724:	2301      	movlt	r3, #1
 8003726:	e7ba      	b.n	800369e <_dtoa_r+0x246>
 8003728:	2300      	movs	r3, #0
 800372a:	e7b2      	b.n	8003692 <_dtoa_r+0x23a>
 800372c:	2300      	movs	r3, #0
 800372e:	e7f0      	b.n	8003712 <_dtoa_r+0x2ba>
 8003730:	2501      	movs	r5, #1
 8003732:	2300      	movs	r3, #0
 8003734:	9306      	str	r3, [sp, #24]
 8003736:	950a      	str	r5, [sp, #40]	; 0x28
 8003738:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800373c:	9302      	str	r3, [sp, #8]
 800373e:	4699      	mov	r9, r3
 8003740:	2200      	movs	r2, #0
 8003742:	2312      	movs	r3, #18
 8003744:	920b      	str	r2, [sp, #44]	; 0x2c
 8003746:	e7aa      	b.n	800369e <_dtoa_r+0x246>
 8003748:	2301      	movs	r3, #1
 800374a:	930a      	str	r3, [sp, #40]	; 0x28
 800374c:	e7f4      	b.n	8003738 <_dtoa_r+0x2e0>
 800374e:	2301      	movs	r3, #1
 8003750:	9302      	str	r3, [sp, #8]
 8003752:	4699      	mov	r9, r3
 8003754:	461a      	mov	r2, r3
 8003756:	e7f5      	b.n	8003744 <_dtoa_r+0x2ec>
 8003758:	3101      	adds	r1, #1
 800375a:	6071      	str	r1, [r6, #4]
 800375c:	0052      	lsls	r2, r2, #1
 800375e:	e7a2      	b.n	80036a6 <_dtoa_r+0x24e>
 8003760:	636f4361 	.word	0x636f4361
 8003764:	3fd287a7 	.word	0x3fd287a7
 8003768:	8b60c8b3 	.word	0x8b60c8b3
 800376c:	3fc68a28 	.word	0x3fc68a28
 8003770:	509f79fb 	.word	0x509f79fb
 8003774:	3fd34413 	.word	0x3fd34413
 8003778:	7ff00000 	.word	0x7ff00000
 800377c:	080048d9 	.word	0x080048d9
 8003780:	3ff80000 	.word	0x3ff80000
 8003784:	08004910 	.word	0x08004910
 8003788:	080048e8 	.word	0x080048e8
 800378c:	080048e3 	.word	0x080048e3
 8003790:	07f1      	lsls	r1, r6, #31
 8003792:	d508      	bpl.n	80037a6 <_dtoa_r+0x34e>
 8003794:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800379c:	f7fc fee0 	bl	8000560 <__aeabi_dmul>
 80037a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80037a4:	3501      	adds	r5, #1
 80037a6:	1076      	asrs	r6, r6, #1
 80037a8:	3708      	adds	r7, #8
 80037aa:	2e00      	cmp	r6, #0
 80037ac:	d1f0      	bne.n	8003790 <_dtoa_r+0x338>
 80037ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80037b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037b6:	f7fc fffd 	bl	80007b4 <__aeabi_ddiv>
 80037ba:	e9cd 0100 	strd	r0, r1, [sp]
 80037be:	e01a      	b.n	80037f6 <_dtoa_r+0x39e>
 80037c0:	2502      	movs	r5, #2
 80037c2:	e7a3      	b.n	800370c <_dtoa_r+0x2b4>
 80037c4:	f000 80a0 	beq.w	8003908 <_dtoa_r+0x4b0>
 80037c8:	f1ca 0600 	rsb	r6, sl, #0
 80037cc:	4b9f      	ldr	r3, [pc, #636]	; (8003a4c <_dtoa_r+0x5f4>)
 80037ce:	4fa0      	ldr	r7, [pc, #640]	; (8003a50 <_dtoa_r+0x5f8>)
 80037d0:	f006 020f 	and.w	r2, r6, #15
 80037d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80037e0:	f7fc febe 	bl	8000560 <__aeabi_dmul>
 80037e4:	e9cd 0100 	strd	r0, r1, [sp]
 80037e8:	1136      	asrs	r6, r6, #4
 80037ea:	2300      	movs	r3, #0
 80037ec:	2502      	movs	r5, #2
 80037ee:	2e00      	cmp	r6, #0
 80037f0:	d17f      	bne.n	80038f2 <_dtoa_r+0x49a>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e1      	bne.n	80037ba <_dtoa_r+0x362>
 80037f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8087 	beq.w	800390c <_dtoa_r+0x4b4>
 80037fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003802:	2200      	movs	r2, #0
 8003804:	4b93      	ldr	r3, [pc, #588]	; (8003a54 <_dtoa_r+0x5fc>)
 8003806:	4630      	mov	r0, r6
 8003808:	4639      	mov	r1, r7
 800380a:	f7fd f91b 	bl	8000a44 <__aeabi_dcmplt>
 800380e:	2800      	cmp	r0, #0
 8003810:	d07c      	beq.n	800390c <_dtoa_r+0x4b4>
 8003812:	f1b9 0f00 	cmp.w	r9, #0
 8003816:	d079      	beq.n	800390c <_dtoa_r+0x4b4>
 8003818:	9b02      	ldr	r3, [sp, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	dd35      	ble.n	800388a <_dtoa_r+0x432>
 800381e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8003822:	9308      	str	r3, [sp, #32]
 8003824:	4639      	mov	r1, r7
 8003826:	2200      	movs	r2, #0
 8003828:	4b8b      	ldr	r3, [pc, #556]	; (8003a58 <_dtoa_r+0x600>)
 800382a:	4630      	mov	r0, r6
 800382c:	f7fc fe98 	bl	8000560 <__aeabi_dmul>
 8003830:	e9cd 0100 	strd	r0, r1, [sp]
 8003834:	9f02      	ldr	r7, [sp, #8]
 8003836:	3501      	adds	r5, #1
 8003838:	4628      	mov	r0, r5
 800383a:	f7fc fe27 	bl	800048c <__aeabi_i2d>
 800383e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003842:	f7fc fe8d 	bl	8000560 <__aeabi_dmul>
 8003846:	2200      	movs	r2, #0
 8003848:	4b84      	ldr	r3, [pc, #528]	; (8003a5c <_dtoa_r+0x604>)
 800384a:	f7fc fcd3 	bl	80001f4 <__adddf3>
 800384e:	4605      	mov	r5, r0
 8003850:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003854:	2f00      	cmp	r7, #0
 8003856:	d15d      	bne.n	8003914 <_dtoa_r+0x4bc>
 8003858:	2200      	movs	r2, #0
 800385a:	4b81      	ldr	r3, [pc, #516]	; (8003a60 <_dtoa_r+0x608>)
 800385c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003860:	f7fc fcc6 	bl	80001f0 <__aeabi_dsub>
 8003864:	462a      	mov	r2, r5
 8003866:	4633      	mov	r3, r6
 8003868:	e9cd 0100 	strd	r0, r1, [sp]
 800386c:	f7fd f908 	bl	8000a80 <__aeabi_dcmpgt>
 8003870:	2800      	cmp	r0, #0
 8003872:	f040 8288 	bne.w	8003d86 <_dtoa_r+0x92e>
 8003876:	462a      	mov	r2, r5
 8003878:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800387c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003880:	f7fd f8e0 	bl	8000a44 <__aeabi_dcmplt>
 8003884:	2800      	cmp	r0, #0
 8003886:	f040 827c 	bne.w	8003d82 <_dtoa_r+0x92a>
 800388a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800388e:	e9cd 2300 	strd	r2, r3, [sp]
 8003892:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003894:	2b00      	cmp	r3, #0
 8003896:	f2c0 8150 	blt.w	8003b3a <_dtoa_r+0x6e2>
 800389a:	f1ba 0f0e 	cmp.w	sl, #14
 800389e:	f300 814c 	bgt.w	8003b3a <_dtoa_r+0x6e2>
 80038a2:	4b6a      	ldr	r3, [pc, #424]	; (8003a4c <_dtoa_r+0x5f4>)
 80038a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80038a8:	ed93 7b00 	vldr	d7, [r3]
 80038ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80038b4:	f280 80d8 	bge.w	8003a68 <_dtoa_r+0x610>
 80038b8:	f1b9 0f00 	cmp.w	r9, #0
 80038bc:	f300 80d4 	bgt.w	8003a68 <_dtoa_r+0x610>
 80038c0:	f040 825e 	bne.w	8003d80 <_dtoa_r+0x928>
 80038c4:	2200      	movs	r2, #0
 80038c6:	4b66      	ldr	r3, [pc, #408]	; (8003a60 <_dtoa_r+0x608>)
 80038c8:	ec51 0b17 	vmov	r0, r1, d7
 80038cc:	f7fc fe48 	bl	8000560 <__aeabi_dmul>
 80038d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038d4:	f7fd f8ca 	bl	8000a6c <__aeabi_dcmpge>
 80038d8:	464f      	mov	r7, r9
 80038da:	464e      	mov	r6, r9
 80038dc:	2800      	cmp	r0, #0
 80038de:	f040 8234 	bne.w	8003d4a <_dtoa_r+0x8f2>
 80038e2:	2331      	movs	r3, #49	; 0x31
 80038e4:	f10b 0501 	add.w	r5, fp, #1
 80038e8:	f88b 3000 	strb.w	r3, [fp]
 80038ec:	f10a 0a01 	add.w	sl, sl, #1
 80038f0:	e22f      	b.n	8003d52 <_dtoa_r+0x8fa>
 80038f2:	07f2      	lsls	r2, r6, #31
 80038f4:	d505      	bpl.n	8003902 <_dtoa_r+0x4aa>
 80038f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038fa:	f7fc fe31 	bl	8000560 <__aeabi_dmul>
 80038fe:	3501      	adds	r5, #1
 8003900:	2301      	movs	r3, #1
 8003902:	1076      	asrs	r6, r6, #1
 8003904:	3708      	adds	r7, #8
 8003906:	e772      	b.n	80037ee <_dtoa_r+0x396>
 8003908:	2502      	movs	r5, #2
 800390a:	e774      	b.n	80037f6 <_dtoa_r+0x39e>
 800390c:	f8cd a020 	str.w	sl, [sp, #32]
 8003910:	464f      	mov	r7, r9
 8003912:	e791      	b.n	8003838 <_dtoa_r+0x3e0>
 8003914:	4b4d      	ldr	r3, [pc, #308]	; (8003a4c <_dtoa_r+0x5f4>)
 8003916:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800391a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800391e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003920:	2b00      	cmp	r3, #0
 8003922:	d047      	beq.n	80039b4 <_dtoa_r+0x55c>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	2000      	movs	r0, #0
 800392a:	494e      	ldr	r1, [pc, #312]	; (8003a64 <_dtoa_r+0x60c>)
 800392c:	f7fc ff42 	bl	80007b4 <__aeabi_ddiv>
 8003930:	462a      	mov	r2, r5
 8003932:	4633      	mov	r3, r6
 8003934:	f7fc fc5c 	bl	80001f0 <__aeabi_dsub>
 8003938:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800393c:	465d      	mov	r5, fp
 800393e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003942:	f7fd f8bd 	bl	8000ac0 <__aeabi_d2iz>
 8003946:	4606      	mov	r6, r0
 8003948:	f7fc fda0 	bl	800048c <__aeabi_i2d>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003954:	f7fc fc4c 	bl	80001f0 <__aeabi_dsub>
 8003958:	3630      	adds	r6, #48	; 0x30
 800395a:	f805 6b01 	strb.w	r6, [r5], #1
 800395e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003962:	e9cd 0100 	strd	r0, r1, [sp]
 8003966:	f7fd f86d 	bl	8000a44 <__aeabi_dcmplt>
 800396a:	2800      	cmp	r0, #0
 800396c:	d163      	bne.n	8003a36 <_dtoa_r+0x5de>
 800396e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003972:	2000      	movs	r0, #0
 8003974:	4937      	ldr	r1, [pc, #220]	; (8003a54 <_dtoa_r+0x5fc>)
 8003976:	f7fc fc3b 	bl	80001f0 <__aeabi_dsub>
 800397a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800397e:	f7fd f861 	bl	8000a44 <__aeabi_dcmplt>
 8003982:	2800      	cmp	r0, #0
 8003984:	f040 80b7 	bne.w	8003af6 <_dtoa_r+0x69e>
 8003988:	eba5 030b 	sub.w	r3, r5, fp
 800398c:	429f      	cmp	r7, r3
 800398e:	f77f af7c 	ble.w	800388a <_dtoa_r+0x432>
 8003992:	2200      	movs	r2, #0
 8003994:	4b30      	ldr	r3, [pc, #192]	; (8003a58 <_dtoa_r+0x600>)
 8003996:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800399a:	f7fc fde1 	bl	8000560 <__aeabi_dmul>
 800399e:	2200      	movs	r2, #0
 80039a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80039a4:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <_dtoa_r+0x600>)
 80039a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039aa:	f7fc fdd9 	bl	8000560 <__aeabi_dmul>
 80039ae:	e9cd 0100 	strd	r0, r1, [sp]
 80039b2:	e7c4      	b.n	800393e <_dtoa_r+0x4e6>
 80039b4:	462a      	mov	r2, r5
 80039b6:	4633      	mov	r3, r6
 80039b8:	f7fc fdd2 	bl	8000560 <__aeabi_dmul>
 80039bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80039c0:	eb0b 0507 	add.w	r5, fp, r7
 80039c4:	465e      	mov	r6, fp
 80039c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039ca:	f7fd f879 	bl	8000ac0 <__aeabi_d2iz>
 80039ce:	4607      	mov	r7, r0
 80039d0:	f7fc fd5c 	bl	800048c <__aeabi_i2d>
 80039d4:	3730      	adds	r7, #48	; 0x30
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039de:	f7fc fc07 	bl	80001f0 <__aeabi_dsub>
 80039e2:	f806 7b01 	strb.w	r7, [r6], #1
 80039e6:	42ae      	cmp	r6, r5
 80039e8:	e9cd 0100 	strd	r0, r1, [sp]
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	d126      	bne.n	8003a40 <_dtoa_r+0x5e8>
 80039f2:	4b1c      	ldr	r3, [pc, #112]	; (8003a64 <_dtoa_r+0x60c>)
 80039f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80039f8:	f7fc fbfc 	bl	80001f4 <__adddf3>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a04:	f7fd f83c 	bl	8000a80 <__aeabi_dcmpgt>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d174      	bne.n	8003af6 <_dtoa_r+0x69e>
 8003a0c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003a10:	2000      	movs	r0, #0
 8003a12:	4914      	ldr	r1, [pc, #80]	; (8003a64 <_dtoa_r+0x60c>)
 8003a14:	f7fc fbec 	bl	80001f0 <__aeabi_dsub>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a20:	f7fd f810 	bl	8000a44 <__aeabi_dcmplt>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	f43f af30 	beq.w	800388a <_dtoa_r+0x432>
 8003a2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003a2e:	2b30      	cmp	r3, #48	; 0x30
 8003a30:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003a34:	d002      	beq.n	8003a3c <_dtoa_r+0x5e4>
 8003a36:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003a3a:	e04a      	b.n	8003ad2 <_dtoa_r+0x67a>
 8003a3c:	4615      	mov	r5, r2
 8003a3e:	e7f4      	b.n	8003a2a <_dtoa_r+0x5d2>
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <_dtoa_r+0x600>)
 8003a42:	f7fc fd8d 	bl	8000560 <__aeabi_dmul>
 8003a46:	e9cd 0100 	strd	r0, r1, [sp]
 8003a4a:	e7bc      	b.n	80039c6 <_dtoa_r+0x56e>
 8003a4c:	08004910 	.word	0x08004910
 8003a50:	080048e8 	.word	0x080048e8
 8003a54:	3ff00000 	.word	0x3ff00000
 8003a58:	40240000 	.word	0x40240000
 8003a5c:	401c0000 	.word	0x401c0000
 8003a60:	40140000 	.word	0x40140000
 8003a64:	3fe00000 	.word	0x3fe00000
 8003a68:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003a6c:	465d      	mov	r5, fp
 8003a6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a72:	4630      	mov	r0, r6
 8003a74:	4639      	mov	r1, r7
 8003a76:	f7fc fe9d 	bl	80007b4 <__aeabi_ddiv>
 8003a7a:	f7fd f821 	bl	8000ac0 <__aeabi_d2iz>
 8003a7e:	4680      	mov	r8, r0
 8003a80:	f7fc fd04 	bl	800048c <__aeabi_i2d>
 8003a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a88:	f7fc fd6a 	bl	8000560 <__aeabi_dmul>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4630      	mov	r0, r6
 8003a92:	4639      	mov	r1, r7
 8003a94:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8003a98:	f7fc fbaa 	bl	80001f0 <__aeabi_dsub>
 8003a9c:	f805 6b01 	strb.w	r6, [r5], #1
 8003aa0:	eba5 060b 	sub.w	r6, r5, fp
 8003aa4:	45b1      	cmp	r9, r6
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	d139      	bne.n	8003b20 <_dtoa_r+0x6c8>
 8003aac:	f7fc fba2 	bl	80001f4 <__adddf3>
 8003ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ab4:	4606      	mov	r6, r0
 8003ab6:	460f      	mov	r7, r1
 8003ab8:	f7fc ffe2 	bl	8000a80 <__aeabi_dcmpgt>
 8003abc:	b9c8      	cbnz	r0, 8003af2 <_dtoa_r+0x69a>
 8003abe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	4639      	mov	r1, r7
 8003ac6:	f7fc ffb3 	bl	8000a30 <__aeabi_dcmpeq>
 8003aca:	b110      	cbz	r0, 8003ad2 <_dtoa_r+0x67a>
 8003acc:	f018 0f01 	tst.w	r8, #1
 8003ad0:	d10f      	bne.n	8003af2 <_dtoa_r+0x69a>
 8003ad2:	9904      	ldr	r1, [sp, #16]
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f000 facc 	bl	8004072 <_Bfree>
 8003ada:	2300      	movs	r3, #0
 8003adc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003ade:	702b      	strb	r3, [r5, #0]
 8003ae0:	f10a 0301 	add.w	r3, sl, #1
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8241 	beq.w	8003f70 <_dtoa_r+0xb18>
 8003aee:	601d      	str	r5, [r3, #0]
 8003af0:	e23e      	b.n	8003f70 <_dtoa_r+0xb18>
 8003af2:	f8cd a020 	str.w	sl, [sp, #32]
 8003af6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003afa:	2a39      	cmp	r2, #57	; 0x39
 8003afc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8003b00:	d108      	bne.n	8003b14 <_dtoa_r+0x6bc>
 8003b02:	459b      	cmp	fp, r3
 8003b04:	d10a      	bne.n	8003b1c <_dtoa_r+0x6c4>
 8003b06:	9b08      	ldr	r3, [sp, #32]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	9308      	str	r3, [sp, #32]
 8003b0c:	2330      	movs	r3, #48	; 0x30
 8003b0e:	f88b 3000 	strb.w	r3, [fp]
 8003b12:	465b      	mov	r3, fp
 8003b14:	781a      	ldrb	r2, [r3, #0]
 8003b16:	3201      	adds	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	e78c      	b.n	8003a36 <_dtoa_r+0x5de>
 8003b1c:	461d      	mov	r5, r3
 8003b1e:	e7ea      	b.n	8003af6 <_dtoa_r+0x69e>
 8003b20:	2200      	movs	r2, #0
 8003b22:	4b9b      	ldr	r3, [pc, #620]	; (8003d90 <_dtoa_r+0x938>)
 8003b24:	f7fc fd1c 	bl	8000560 <__aeabi_dmul>
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	4606      	mov	r6, r0
 8003b2e:	460f      	mov	r7, r1
 8003b30:	f7fc ff7e 	bl	8000a30 <__aeabi_dcmpeq>
 8003b34:	2800      	cmp	r0, #0
 8003b36:	d09a      	beq.n	8003a6e <_dtoa_r+0x616>
 8003b38:	e7cb      	b.n	8003ad2 <_dtoa_r+0x67a>
 8003b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b3c:	2a00      	cmp	r2, #0
 8003b3e:	f000 808b 	beq.w	8003c58 <_dtoa_r+0x800>
 8003b42:	9a06      	ldr	r2, [sp, #24]
 8003b44:	2a01      	cmp	r2, #1
 8003b46:	dc6e      	bgt.n	8003c26 <_dtoa_r+0x7ce>
 8003b48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003b4a:	2a00      	cmp	r2, #0
 8003b4c:	d067      	beq.n	8003c1e <_dtoa_r+0x7c6>
 8003b4e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003b52:	9f07      	ldr	r7, [sp, #28]
 8003b54:	9d05      	ldr	r5, [sp, #20]
 8003b56:	9a05      	ldr	r2, [sp, #20]
 8003b58:	2101      	movs	r1, #1
 8003b5a:	441a      	add	r2, r3
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	9205      	str	r2, [sp, #20]
 8003b60:	4498      	add	r8, r3
 8003b62:	f000 fb26 	bl	80041b2 <__i2b>
 8003b66:	4606      	mov	r6, r0
 8003b68:	2d00      	cmp	r5, #0
 8003b6a:	dd0c      	ble.n	8003b86 <_dtoa_r+0x72e>
 8003b6c:	f1b8 0f00 	cmp.w	r8, #0
 8003b70:	dd09      	ble.n	8003b86 <_dtoa_r+0x72e>
 8003b72:	4545      	cmp	r5, r8
 8003b74:	9a05      	ldr	r2, [sp, #20]
 8003b76:	462b      	mov	r3, r5
 8003b78:	bfa8      	it	ge
 8003b7a:	4643      	movge	r3, r8
 8003b7c:	1ad2      	subs	r2, r2, r3
 8003b7e:	9205      	str	r2, [sp, #20]
 8003b80:	1aed      	subs	r5, r5, r3
 8003b82:	eba8 0803 	sub.w	r8, r8, r3
 8003b86:	9b07      	ldr	r3, [sp, #28]
 8003b88:	b1eb      	cbz	r3, 8003bc6 <_dtoa_r+0x76e>
 8003b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d067      	beq.n	8003c60 <_dtoa_r+0x808>
 8003b90:	b18f      	cbz	r7, 8003bb6 <_dtoa_r+0x75e>
 8003b92:	4631      	mov	r1, r6
 8003b94:	463a      	mov	r2, r7
 8003b96:	4620      	mov	r0, r4
 8003b98:	f000 fbaa 	bl	80042f0 <__pow5mult>
 8003b9c:	9a04      	ldr	r2, [sp, #16]
 8003b9e:	4601      	mov	r1, r0
 8003ba0:	4606      	mov	r6, r0
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f000 fb0e 	bl	80041c4 <__multiply>
 8003ba8:	9904      	ldr	r1, [sp, #16]
 8003baa:	9008      	str	r0, [sp, #32]
 8003bac:	4620      	mov	r0, r4
 8003bae:	f000 fa60 	bl	8004072 <_Bfree>
 8003bb2:	9b08      	ldr	r3, [sp, #32]
 8003bb4:	9304      	str	r3, [sp, #16]
 8003bb6:	9b07      	ldr	r3, [sp, #28]
 8003bb8:	1bda      	subs	r2, r3, r7
 8003bba:	d004      	beq.n	8003bc6 <_dtoa_r+0x76e>
 8003bbc:	9904      	ldr	r1, [sp, #16]
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	f000 fb96 	bl	80042f0 <__pow5mult>
 8003bc4:	9004      	str	r0, [sp, #16]
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f000 faf2 	bl	80041b2 <__i2b>
 8003bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bd0:	4607      	mov	r7, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 81d0 	beq.w	8003f78 <_dtoa_r+0xb20>
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4601      	mov	r1, r0
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f000 fb87 	bl	80042f0 <__pow5mult>
 8003be2:	9b06      	ldr	r3, [sp, #24]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	4607      	mov	r7, r0
 8003be8:	dc40      	bgt.n	8003c6c <_dtoa_r+0x814>
 8003bea:	9b00      	ldr	r3, [sp, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d139      	bne.n	8003c64 <_dtoa_r+0x80c>
 8003bf0:	9b01      	ldr	r3, [sp, #4]
 8003bf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d136      	bne.n	8003c68 <_dtoa_r+0x810>
 8003bfa:	9b01      	ldr	r3, [sp, #4]
 8003bfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c00:	0d1b      	lsrs	r3, r3, #20
 8003c02:	051b      	lsls	r3, r3, #20
 8003c04:	b12b      	cbz	r3, 8003c12 <_dtoa_r+0x7ba>
 8003c06:	9b05      	ldr	r3, [sp, #20]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	9305      	str	r3, [sp, #20]
 8003c0c:	f108 0801 	add.w	r8, r8, #1
 8003c10:	2301      	movs	r3, #1
 8003c12:	9307      	str	r3, [sp, #28]
 8003c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d12a      	bne.n	8003c70 <_dtoa_r+0x818>
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	e030      	b.n	8003c80 <_dtoa_r+0x828>
 8003c1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003c20:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003c24:	e795      	b.n	8003b52 <_dtoa_r+0x6fa>
 8003c26:	9b07      	ldr	r3, [sp, #28]
 8003c28:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8003c2c:	42bb      	cmp	r3, r7
 8003c2e:	bfbf      	itttt	lt
 8003c30:	9b07      	ldrlt	r3, [sp, #28]
 8003c32:	9707      	strlt	r7, [sp, #28]
 8003c34:	1afa      	sublt	r2, r7, r3
 8003c36:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003c38:	bfbb      	ittet	lt
 8003c3a:	189b      	addlt	r3, r3, r2
 8003c3c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003c3e:	1bdf      	subge	r7, r3, r7
 8003c40:	2700      	movlt	r7, #0
 8003c42:	f1b9 0f00 	cmp.w	r9, #0
 8003c46:	bfb5      	itete	lt
 8003c48:	9b05      	ldrlt	r3, [sp, #20]
 8003c4a:	9d05      	ldrge	r5, [sp, #20]
 8003c4c:	eba3 0509 	sublt.w	r5, r3, r9
 8003c50:	464b      	movge	r3, r9
 8003c52:	bfb8      	it	lt
 8003c54:	2300      	movlt	r3, #0
 8003c56:	e77e      	b.n	8003b56 <_dtoa_r+0x6fe>
 8003c58:	9f07      	ldr	r7, [sp, #28]
 8003c5a:	9d05      	ldr	r5, [sp, #20]
 8003c5c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003c5e:	e783      	b.n	8003b68 <_dtoa_r+0x710>
 8003c60:	9a07      	ldr	r2, [sp, #28]
 8003c62:	e7ab      	b.n	8003bbc <_dtoa_r+0x764>
 8003c64:	2300      	movs	r3, #0
 8003c66:	e7d4      	b.n	8003c12 <_dtoa_r+0x7ba>
 8003c68:	9b00      	ldr	r3, [sp, #0]
 8003c6a:	e7d2      	b.n	8003c12 <_dtoa_r+0x7ba>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	9307      	str	r3, [sp, #28]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003c76:	6918      	ldr	r0, [r3, #16]
 8003c78:	f000 fa4d 	bl	8004116 <__hi0bits>
 8003c7c:	f1c0 0020 	rsb	r0, r0, #32
 8003c80:	4440      	add	r0, r8
 8003c82:	f010 001f 	ands.w	r0, r0, #31
 8003c86:	d047      	beq.n	8003d18 <_dtoa_r+0x8c0>
 8003c88:	f1c0 0320 	rsb	r3, r0, #32
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	dd3b      	ble.n	8003d08 <_dtoa_r+0x8b0>
 8003c90:	9b05      	ldr	r3, [sp, #20]
 8003c92:	f1c0 001c 	rsb	r0, r0, #28
 8003c96:	4403      	add	r3, r0
 8003c98:	9305      	str	r3, [sp, #20]
 8003c9a:	4405      	add	r5, r0
 8003c9c:	4480      	add	r8, r0
 8003c9e:	9b05      	ldr	r3, [sp, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	dd05      	ble.n	8003cb0 <_dtoa_r+0x858>
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	9904      	ldr	r1, [sp, #16]
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f000 fb6f 	bl	800438c <__lshift>
 8003cae:	9004      	str	r0, [sp, #16]
 8003cb0:	f1b8 0f00 	cmp.w	r8, #0
 8003cb4:	dd05      	ble.n	8003cc2 <_dtoa_r+0x86a>
 8003cb6:	4639      	mov	r1, r7
 8003cb8:	4642      	mov	r2, r8
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f000 fb66 	bl	800438c <__lshift>
 8003cc0:	4607      	mov	r7, r0
 8003cc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cc4:	b353      	cbz	r3, 8003d1c <_dtoa_r+0x8c4>
 8003cc6:	4639      	mov	r1, r7
 8003cc8:	9804      	ldr	r0, [sp, #16]
 8003cca:	f000 fbb3 	bl	8004434 <__mcmp>
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	da24      	bge.n	8003d1c <_dtoa_r+0x8c4>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	220a      	movs	r2, #10
 8003cd6:	9904      	ldr	r1, [sp, #16]
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f000 f9e1 	bl	80040a0 <__multadd>
 8003cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ce0:	9004      	str	r0, [sp, #16]
 8003ce2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 814d 	beq.w	8003f86 <_dtoa_r+0xb2e>
 8003cec:	2300      	movs	r3, #0
 8003cee:	4631      	mov	r1, r6
 8003cf0:	220a      	movs	r2, #10
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f000 f9d4 	bl	80040a0 <__multadd>
 8003cf8:	9b02      	ldr	r3, [sp, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	4606      	mov	r6, r0
 8003cfe:	dc4f      	bgt.n	8003da0 <_dtoa_r+0x948>
 8003d00:	9b06      	ldr	r3, [sp, #24]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	dd4c      	ble.n	8003da0 <_dtoa_r+0x948>
 8003d06:	e011      	b.n	8003d2c <_dtoa_r+0x8d4>
 8003d08:	d0c9      	beq.n	8003c9e <_dtoa_r+0x846>
 8003d0a:	9a05      	ldr	r2, [sp, #20]
 8003d0c:	331c      	adds	r3, #28
 8003d0e:	441a      	add	r2, r3
 8003d10:	9205      	str	r2, [sp, #20]
 8003d12:	441d      	add	r5, r3
 8003d14:	4498      	add	r8, r3
 8003d16:	e7c2      	b.n	8003c9e <_dtoa_r+0x846>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	e7f6      	b.n	8003d0a <_dtoa_r+0x8b2>
 8003d1c:	f1b9 0f00 	cmp.w	r9, #0
 8003d20:	dc38      	bgt.n	8003d94 <_dtoa_r+0x93c>
 8003d22:	9b06      	ldr	r3, [sp, #24]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	dd35      	ble.n	8003d94 <_dtoa_r+0x93c>
 8003d28:	f8cd 9008 	str.w	r9, [sp, #8]
 8003d2c:	9b02      	ldr	r3, [sp, #8]
 8003d2e:	b963      	cbnz	r3, 8003d4a <_dtoa_r+0x8f2>
 8003d30:	4639      	mov	r1, r7
 8003d32:	2205      	movs	r2, #5
 8003d34:	4620      	mov	r0, r4
 8003d36:	f000 f9b3 	bl	80040a0 <__multadd>
 8003d3a:	4601      	mov	r1, r0
 8003d3c:	4607      	mov	r7, r0
 8003d3e:	9804      	ldr	r0, [sp, #16]
 8003d40:	f000 fb78 	bl	8004434 <__mcmp>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	f73f adcc 	bgt.w	80038e2 <_dtoa_r+0x48a>
 8003d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d4c:	465d      	mov	r5, fp
 8003d4e:	ea6f 0a03 	mvn.w	sl, r3
 8003d52:	f04f 0900 	mov.w	r9, #0
 8003d56:	4639      	mov	r1, r7
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f000 f98a 	bl	8004072 <_Bfree>
 8003d5e:	2e00      	cmp	r6, #0
 8003d60:	f43f aeb7 	beq.w	8003ad2 <_dtoa_r+0x67a>
 8003d64:	f1b9 0f00 	cmp.w	r9, #0
 8003d68:	d005      	beq.n	8003d76 <_dtoa_r+0x91e>
 8003d6a:	45b1      	cmp	r9, r6
 8003d6c:	d003      	beq.n	8003d76 <_dtoa_r+0x91e>
 8003d6e:	4649      	mov	r1, r9
 8003d70:	4620      	mov	r0, r4
 8003d72:	f000 f97e 	bl	8004072 <_Bfree>
 8003d76:	4631      	mov	r1, r6
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f000 f97a 	bl	8004072 <_Bfree>
 8003d7e:	e6a8      	b.n	8003ad2 <_dtoa_r+0x67a>
 8003d80:	2700      	movs	r7, #0
 8003d82:	463e      	mov	r6, r7
 8003d84:	e7e1      	b.n	8003d4a <_dtoa_r+0x8f2>
 8003d86:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003d8a:	463e      	mov	r6, r7
 8003d8c:	e5a9      	b.n	80038e2 <_dtoa_r+0x48a>
 8003d8e:	bf00      	nop
 8003d90:	40240000 	.word	0x40240000
 8003d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d96:	f8cd 9008 	str.w	r9, [sp, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 80fa 	beq.w	8003f94 <_dtoa_r+0xb3c>
 8003da0:	2d00      	cmp	r5, #0
 8003da2:	dd05      	ble.n	8003db0 <_dtoa_r+0x958>
 8003da4:	4631      	mov	r1, r6
 8003da6:	462a      	mov	r2, r5
 8003da8:	4620      	mov	r0, r4
 8003daa:	f000 faef 	bl	800438c <__lshift>
 8003dae:	4606      	mov	r6, r0
 8003db0:	9b07      	ldr	r3, [sp, #28]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d04c      	beq.n	8003e50 <_dtoa_r+0x9f8>
 8003db6:	6871      	ldr	r1, [r6, #4]
 8003db8:	4620      	mov	r0, r4
 8003dba:	f000 f926 	bl	800400a <_Balloc>
 8003dbe:	6932      	ldr	r2, [r6, #16]
 8003dc0:	3202      	adds	r2, #2
 8003dc2:	4605      	mov	r5, r0
 8003dc4:	0092      	lsls	r2, r2, #2
 8003dc6:	f106 010c 	add.w	r1, r6, #12
 8003dca:	300c      	adds	r0, #12
 8003dcc:	f000 f912 	bl	8003ff4 <memcpy>
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	f000 fad9 	bl	800438c <__lshift>
 8003dda:	9b00      	ldr	r3, [sp, #0]
 8003ddc:	f8cd b014 	str.w	fp, [sp, #20]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	46b1      	mov	r9, r6
 8003de6:	9307      	str	r3, [sp, #28]
 8003de8:	4606      	mov	r6, r0
 8003dea:	4639      	mov	r1, r7
 8003dec:	9804      	ldr	r0, [sp, #16]
 8003dee:	f7ff faa6 	bl	800333e <quorem>
 8003df2:	4649      	mov	r1, r9
 8003df4:	4605      	mov	r5, r0
 8003df6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003dfa:	9804      	ldr	r0, [sp, #16]
 8003dfc:	f000 fb1a 	bl	8004434 <__mcmp>
 8003e00:	4632      	mov	r2, r6
 8003e02:	9000      	str	r0, [sp, #0]
 8003e04:	4639      	mov	r1, r7
 8003e06:	4620      	mov	r0, r4
 8003e08:	f000 fb2e 	bl	8004468 <__mdiff>
 8003e0c:	68c3      	ldr	r3, [r0, #12]
 8003e0e:	4602      	mov	r2, r0
 8003e10:	bb03      	cbnz	r3, 8003e54 <_dtoa_r+0x9fc>
 8003e12:	4601      	mov	r1, r0
 8003e14:	9008      	str	r0, [sp, #32]
 8003e16:	9804      	ldr	r0, [sp, #16]
 8003e18:	f000 fb0c 	bl	8004434 <__mcmp>
 8003e1c:	9a08      	ldr	r2, [sp, #32]
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4611      	mov	r1, r2
 8003e22:	4620      	mov	r0, r4
 8003e24:	9308      	str	r3, [sp, #32]
 8003e26:	f000 f924 	bl	8004072 <_Bfree>
 8003e2a:	9b08      	ldr	r3, [sp, #32]
 8003e2c:	b9a3      	cbnz	r3, 8003e58 <_dtoa_r+0xa00>
 8003e2e:	9a06      	ldr	r2, [sp, #24]
 8003e30:	b992      	cbnz	r2, 8003e58 <_dtoa_r+0xa00>
 8003e32:	9a07      	ldr	r2, [sp, #28]
 8003e34:	b982      	cbnz	r2, 8003e58 <_dtoa_r+0xa00>
 8003e36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003e3a:	d029      	beq.n	8003e90 <_dtoa_r+0xa38>
 8003e3c:	9b00      	ldr	r3, [sp, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	dd01      	ble.n	8003e46 <_dtoa_r+0x9ee>
 8003e42:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003e46:	9b05      	ldr	r3, [sp, #20]
 8003e48:	1c5d      	adds	r5, r3, #1
 8003e4a:	f883 8000 	strb.w	r8, [r3]
 8003e4e:	e782      	b.n	8003d56 <_dtoa_r+0x8fe>
 8003e50:	4630      	mov	r0, r6
 8003e52:	e7c2      	b.n	8003dda <_dtoa_r+0x982>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e7e3      	b.n	8003e20 <_dtoa_r+0x9c8>
 8003e58:	9a00      	ldr	r2, [sp, #0]
 8003e5a:	2a00      	cmp	r2, #0
 8003e5c:	db04      	blt.n	8003e68 <_dtoa_r+0xa10>
 8003e5e:	d125      	bne.n	8003eac <_dtoa_r+0xa54>
 8003e60:	9a06      	ldr	r2, [sp, #24]
 8003e62:	bb1a      	cbnz	r2, 8003eac <_dtoa_r+0xa54>
 8003e64:	9a07      	ldr	r2, [sp, #28]
 8003e66:	bb0a      	cbnz	r2, 8003eac <_dtoa_r+0xa54>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	ddec      	ble.n	8003e46 <_dtoa_r+0x9ee>
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	9904      	ldr	r1, [sp, #16]
 8003e70:	4620      	mov	r0, r4
 8003e72:	f000 fa8b 	bl	800438c <__lshift>
 8003e76:	4639      	mov	r1, r7
 8003e78:	9004      	str	r0, [sp, #16]
 8003e7a:	f000 fadb 	bl	8004434 <__mcmp>
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	dc03      	bgt.n	8003e8a <_dtoa_r+0xa32>
 8003e82:	d1e0      	bne.n	8003e46 <_dtoa_r+0x9ee>
 8003e84:	f018 0f01 	tst.w	r8, #1
 8003e88:	d0dd      	beq.n	8003e46 <_dtoa_r+0x9ee>
 8003e8a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003e8e:	d1d8      	bne.n	8003e42 <_dtoa_r+0x9ea>
 8003e90:	9b05      	ldr	r3, [sp, #20]
 8003e92:	9a05      	ldr	r2, [sp, #20]
 8003e94:	1c5d      	adds	r5, r3, #1
 8003e96:	2339      	movs	r3, #57	; 0x39
 8003e98:	7013      	strb	r3, [r2, #0]
 8003e9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003e9e:	2b39      	cmp	r3, #57	; 0x39
 8003ea0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003ea4:	d04f      	beq.n	8003f46 <_dtoa_r+0xaee>
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	7013      	strb	r3, [r2, #0]
 8003eaa:	e754      	b.n	8003d56 <_dtoa_r+0x8fe>
 8003eac:	9a05      	ldr	r2, [sp, #20]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f102 0501 	add.w	r5, r2, #1
 8003eb4:	dd06      	ble.n	8003ec4 <_dtoa_r+0xa6c>
 8003eb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003eba:	d0e9      	beq.n	8003e90 <_dtoa_r+0xa38>
 8003ebc:	f108 0801 	add.w	r8, r8, #1
 8003ec0:	9b05      	ldr	r3, [sp, #20]
 8003ec2:	e7c2      	b.n	8003e4a <_dtoa_r+0x9f2>
 8003ec4:	9a02      	ldr	r2, [sp, #8]
 8003ec6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003eca:	eba5 030b 	sub.w	r3, r5, fp
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d021      	beq.n	8003f16 <_dtoa_r+0xabe>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	220a      	movs	r2, #10
 8003ed6:	9904      	ldr	r1, [sp, #16]
 8003ed8:	4620      	mov	r0, r4
 8003eda:	f000 f8e1 	bl	80040a0 <__multadd>
 8003ede:	45b1      	cmp	r9, r6
 8003ee0:	9004      	str	r0, [sp, #16]
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	f04f 020a 	mov.w	r2, #10
 8003eea:	4649      	mov	r1, r9
 8003eec:	4620      	mov	r0, r4
 8003eee:	d105      	bne.n	8003efc <_dtoa_r+0xaa4>
 8003ef0:	f000 f8d6 	bl	80040a0 <__multadd>
 8003ef4:	4681      	mov	r9, r0
 8003ef6:	4606      	mov	r6, r0
 8003ef8:	9505      	str	r5, [sp, #20]
 8003efa:	e776      	b.n	8003dea <_dtoa_r+0x992>
 8003efc:	f000 f8d0 	bl	80040a0 <__multadd>
 8003f00:	4631      	mov	r1, r6
 8003f02:	4681      	mov	r9, r0
 8003f04:	2300      	movs	r3, #0
 8003f06:	220a      	movs	r2, #10
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f000 f8c9 	bl	80040a0 <__multadd>
 8003f0e:	4606      	mov	r6, r0
 8003f10:	e7f2      	b.n	8003ef8 <_dtoa_r+0xaa0>
 8003f12:	f04f 0900 	mov.w	r9, #0
 8003f16:	2201      	movs	r2, #1
 8003f18:	9904      	ldr	r1, [sp, #16]
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f000 fa36 	bl	800438c <__lshift>
 8003f20:	4639      	mov	r1, r7
 8003f22:	9004      	str	r0, [sp, #16]
 8003f24:	f000 fa86 	bl	8004434 <__mcmp>
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	dcb6      	bgt.n	8003e9a <_dtoa_r+0xa42>
 8003f2c:	d102      	bne.n	8003f34 <_dtoa_r+0xadc>
 8003f2e:	f018 0f01 	tst.w	r8, #1
 8003f32:	d1b2      	bne.n	8003e9a <_dtoa_r+0xa42>
 8003f34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f38:	2b30      	cmp	r3, #48	; 0x30
 8003f3a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003f3e:	f47f af0a 	bne.w	8003d56 <_dtoa_r+0x8fe>
 8003f42:	4615      	mov	r5, r2
 8003f44:	e7f6      	b.n	8003f34 <_dtoa_r+0xadc>
 8003f46:	4593      	cmp	fp, r2
 8003f48:	d105      	bne.n	8003f56 <_dtoa_r+0xafe>
 8003f4a:	2331      	movs	r3, #49	; 0x31
 8003f4c:	f10a 0a01 	add.w	sl, sl, #1
 8003f50:	f88b 3000 	strb.w	r3, [fp]
 8003f54:	e6ff      	b.n	8003d56 <_dtoa_r+0x8fe>
 8003f56:	4615      	mov	r5, r2
 8003f58:	e79f      	b.n	8003e9a <_dtoa_r+0xa42>
 8003f5a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8003fc0 <_dtoa_r+0xb68>
 8003f5e:	e007      	b.n	8003f70 <_dtoa_r+0xb18>
 8003f60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f62:	f8df b060 	ldr.w	fp, [pc, #96]	; 8003fc4 <_dtoa_r+0xb6c>
 8003f66:	b11b      	cbz	r3, 8003f70 <_dtoa_r+0xb18>
 8003f68:	f10b 0308 	add.w	r3, fp, #8
 8003f6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	4658      	mov	r0, fp
 8003f72:	b017      	add	sp, #92	; 0x5c
 8003f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f78:	9b06      	ldr	r3, [sp, #24]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	f77f ae35 	ble.w	8003bea <_dtoa_r+0x792>
 8003f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f82:	9307      	str	r3, [sp, #28]
 8003f84:	e649      	b.n	8003c1a <_dtoa_r+0x7c2>
 8003f86:	9b02      	ldr	r3, [sp, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	dc03      	bgt.n	8003f94 <_dtoa_r+0xb3c>
 8003f8c:	9b06      	ldr	r3, [sp, #24]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	f73f aecc 	bgt.w	8003d2c <_dtoa_r+0x8d4>
 8003f94:	465d      	mov	r5, fp
 8003f96:	4639      	mov	r1, r7
 8003f98:	9804      	ldr	r0, [sp, #16]
 8003f9a:	f7ff f9d0 	bl	800333e <quorem>
 8003f9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003fa2:	f805 8b01 	strb.w	r8, [r5], #1
 8003fa6:	9a02      	ldr	r2, [sp, #8]
 8003fa8:	eba5 030b 	sub.w	r3, r5, fp
 8003fac:	429a      	cmp	r2, r3
 8003fae:	ddb0      	ble.n	8003f12 <_dtoa_r+0xaba>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	220a      	movs	r2, #10
 8003fb4:	9904      	ldr	r1, [sp, #16]
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f000 f872 	bl	80040a0 <__multadd>
 8003fbc:	9004      	str	r0, [sp, #16]
 8003fbe:	e7ea      	b.n	8003f96 <_dtoa_r+0xb3e>
 8003fc0:	080048d8 	.word	0x080048d8
 8003fc4:	080048da 	.word	0x080048da

08003fc8 <_localeconv_r>:
 8003fc8:	4b04      	ldr	r3, [pc, #16]	; (8003fdc <_localeconv_r+0x14>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6a18      	ldr	r0, [r3, #32]
 8003fce:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <_localeconv_r+0x18>)
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	bf08      	it	eq
 8003fd4:	4618      	moveq	r0, r3
 8003fd6:	30f0      	adds	r0, #240	; 0xf0
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	20000110 	.word	0x20000110
 8003fe0:	20000174 	.word	0x20000174

08003fe4 <malloc>:
 8003fe4:	4b02      	ldr	r3, [pc, #8]	; (8003ff0 <malloc+0xc>)
 8003fe6:	4601      	mov	r1, r0
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	f000 baf7 	b.w	80045dc <_malloc_r>
 8003fee:	bf00      	nop
 8003ff0:	20000110 	.word	0x20000110

08003ff4 <memcpy>:
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	1e43      	subs	r3, r0, #1
 8003ff8:	440a      	add	r2, r1
 8003ffa:	4291      	cmp	r1, r2
 8003ffc:	d100      	bne.n	8004000 <memcpy+0xc>
 8003ffe:	bd10      	pop	{r4, pc}
 8004000:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004004:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004008:	e7f7      	b.n	8003ffa <memcpy+0x6>

0800400a <_Balloc>:
 800400a:	b570      	push	{r4, r5, r6, lr}
 800400c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800400e:	4604      	mov	r4, r0
 8004010:	460e      	mov	r6, r1
 8004012:	b93d      	cbnz	r5, 8004024 <_Balloc+0x1a>
 8004014:	2010      	movs	r0, #16
 8004016:	f7ff ffe5 	bl	8003fe4 <malloc>
 800401a:	6260      	str	r0, [r4, #36]	; 0x24
 800401c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004020:	6005      	str	r5, [r0, #0]
 8004022:	60c5      	str	r5, [r0, #12]
 8004024:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004026:	68eb      	ldr	r3, [r5, #12]
 8004028:	b183      	cbz	r3, 800404c <_Balloc+0x42>
 800402a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004032:	b9b8      	cbnz	r0, 8004064 <_Balloc+0x5a>
 8004034:	2101      	movs	r1, #1
 8004036:	fa01 f506 	lsl.w	r5, r1, r6
 800403a:	1d6a      	adds	r2, r5, #5
 800403c:	0092      	lsls	r2, r2, #2
 800403e:	4620      	mov	r0, r4
 8004040:	f000 fabe 	bl	80045c0 <_calloc_r>
 8004044:	b160      	cbz	r0, 8004060 <_Balloc+0x56>
 8004046:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800404a:	e00e      	b.n	800406a <_Balloc+0x60>
 800404c:	2221      	movs	r2, #33	; 0x21
 800404e:	2104      	movs	r1, #4
 8004050:	4620      	mov	r0, r4
 8004052:	f000 fab5 	bl	80045c0 <_calloc_r>
 8004056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004058:	60e8      	str	r0, [r5, #12]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e4      	bne.n	800402a <_Balloc+0x20>
 8004060:	2000      	movs	r0, #0
 8004062:	bd70      	pop	{r4, r5, r6, pc}
 8004064:	6802      	ldr	r2, [r0, #0]
 8004066:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800406a:	2300      	movs	r3, #0
 800406c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004070:	e7f7      	b.n	8004062 <_Balloc+0x58>

08004072 <_Bfree>:
 8004072:	b570      	push	{r4, r5, r6, lr}
 8004074:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004076:	4606      	mov	r6, r0
 8004078:	460d      	mov	r5, r1
 800407a:	b93c      	cbnz	r4, 800408c <_Bfree+0x1a>
 800407c:	2010      	movs	r0, #16
 800407e:	f7ff ffb1 	bl	8003fe4 <malloc>
 8004082:	6270      	str	r0, [r6, #36]	; 0x24
 8004084:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004088:	6004      	str	r4, [r0, #0]
 800408a:	60c4      	str	r4, [r0, #12]
 800408c:	b13d      	cbz	r5, 800409e <_Bfree+0x2c>
 800408e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004090:	686a      	ldr	r2, [r5, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004098:	6029      	str	r1, [r5, #0]
 800409a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800409e:	bd70      	pop	{r4, r5, r6, pc}

080040a0 <__multadd>:
 80040a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a4:	690d      	ldr	r5, [r1, #16]
 80040a6:	461f      	mov	r7, r3
 80040a8:	4606      	mov	r6, r0
 80040aa:	460c      	mov	r4, r1
 80040ac:	f101 0c14 	add.w	ip, r1, #20
 80040b0:	2300      	movs	r3, #0
 80040b2:	f8dc 0000 	ldr.w	r0, [ip]
 80040b6:	b281      	uxth	r1, r0
 80040b8:	fb02 7101 	mla	r1, r2, r1, r7
 80040bc:	0c0f      	lsrs	r7, r1, #16
 80040be:	0c00      	lsrs	r0, r0, #16
 80040c0:	fb02 7000 	mla	r0, r2, r0, r7
 80040c4:	b289      	uxth	r1, r1
 80040c6:	3301      	adds	r3, #1
 80040c8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80040cc:	429d      	cmp	r5, r3
 80040ce:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80040d2:	f84c 1b04 	str.w	r1, [ip], #4
 80040d6:	dcec      	bgt.n	80040b2 <__multadd+0x12>
 80040d8:	b1d7      	cbz	r7, 8004110 <__multadd+0x70>
 80040da:	68a3      	ldr	r3, [r4, #8]
 80040dc:	42ab      	cmp	r3, r5
 80040de:	dc12      	bgt.n	8004106 <__multadd+0x66>
 80040e0:	6861      	ldr	r1, [r4, #4]
 80040e2:	4630      	mov	r0, r6
 80040e4:	3101      	adds	r1, #1
 80040e6:	f7ff ff90 	bl	800400a <_Balloc>
 80040ea:	6922      	ldr	r2, [r4, #16]
 80040ec:	3202      	adds	r2, #2
 80040ee:	f104 010c 	add.w	r1, r4, #12
 80040f2:	4680      	mov	r8, r0
 80040f4:	0092      	lsls	r2, r2, #2
 80040f6:	300c      	adds	r0, #12
 80040f8:	f7ff ff7c 	bl	8003ff4 <memcpy>
 80040fc:	4621      	mov	r1, r4
 80040fe:	4630      	mov	r0, r6
 8004100:	f7ff ffb7 	bl	8004072 <_Bfree>
 8004104:	4644      	mov	r4, r8
 8004106:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800410a:	3501      	adds	r5, #1
 800410c:	615f      	str	r7, [r3, #20]
 800410e:	6125      	str	r5, [r4, #16]
 8004110:	4620      	mov	r0, r4
 8004112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004116 <__hi0bits>:
 8004116:	0c02      	lsrs	r2, r0, #16
 8004118:	0412      	lsls	r2, r2, #16
 800411a:	4603      	mov	r3, r0
 800411c:	b9b2      	cbnz	r2, 800414c <__hi0bits+0x36>
 800411e:	0403      	lsls	r3, r0, #16
 8004120:	2010      	movs	r0, #16
 8004122:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004126:	bf04      	itt	eq
 8004128:	021b      	lsleq	r3, r3, #8
 800412a:	3008      	addeq	r0, #8
 800412c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004130:	bf04      	itt	eq
 8004132:	011b      	lsleq	r3, r3, #4
 8004134:	3004      	addeq	r0, #4
 8004136:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800413a:	bf04      	itt	eq
 800413c:	009b      	lsleq	r3, r3, #2
 800413e:	3002      	addeq	r0, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	db06      	blt.n	8004152 <__hi0bits+0x3c>
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	d503      	bpl.n	8004150 <__hi0bits+0x3a>
 8004148:	3001      	adds	r0, #1
 800414a:	4770      	bx	lr
 800414c:	2000      	movs	r0, #0
 800414e:	e7e8      	b.n	8004122 <__hi0bits+0xc>
 8004150:	2020      	movs	r0, #32
 8004152:	4770      	bx	lr

08004154 <__lo0bits>:
 8004154:	6803      	ldr	r3, [r0, #0]
 8004156:	f013 0207 	ands.w	r2, r3, #7
 800415a:	4601      	mov	r1, r0
 800415c:	d00b      	beq.n	8004176 <__lo0bits+0x22>
 800415e:	07da      	lsls	r2, r3, #31
 8004160:	d423      	bmi.n	80041aa <__lo0bits+0x56>
 8004162:	0798      	lsls	r0, r3, #30
 8004164:	bf49      	itett	mi
 8004166:	085b      	lsrmi	r3, r3, #1
 8004168:	089b      	lsrpl	r3, r3, #2
 800416a:	2001      	movmi	r0, #1
 800416c:	600b      	strmi	r3, [r1, #0]
 800416e:	bf5c      	itt	pl
 8004170:	600b      	strpl	r3, [r1, #0]
 8004172:	2002      	movpl	r0, #2
 8004174:	4770      	bx	lr
 8004176:	b298      	uxth	r0, r3
 8004178:	b9a8      	cbnz	r0, 80041a6 <__lo0bits+0x52>
 800417a:	0c1b      	lsrs	r3, r3, #16
 800417c:	2010      	movs	r0, #16
 800417e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004182:	bf04      	itt	eq
 8004184:	0a1b      	lsreq	r3, r3, #8
 8004186:	3008      	addeq	r0, #8
 8004188:	071a      	lsls	r2, r3, #28
 800418a:	bf04      	itt	eq
 800418c:	091b      	lsreq	r3, r3, #4
 800418e:	3004      	addeq	r0, #4
 8004190:	079a      	lsls	r2, r3, #30
 8004192:	bf04      	itt	eq
 8004194:	089b      	lsreq	r3, r3, #2
 8004196:	3002      	addeq	r0, #2
 8004198:	07da      	lsls	r2, r3, #31
 800419a:	d402      	bmi.n	80041a2 <__lo0bits+0x4e>
 800419c:	085b      	lsrs	r3, r3, #1
 800419e:	d006      	beq.n	80041ae <__lo0bits+0x5a>
 80041a0:	3001      	adds	r0, #1
 80041a2:	600b      	str	r3, [r1, #0]
 80041a4:	4770      	bx	lr
 80041a6:	4610      	mov	r0, r2
 80041a8:	e7e9      	b.n	800417e <__lo0bits+0x2a>
 80041aa:	2000      	movs	r0, #0
 80041ac:	4770      	bx	lr
 80041ae:	2020      	movs	r0, #32
 80041b0:	4770      	bx	lr

080041b2 <__i2b>:
 80041b2:	b510      	push	{r4, lr}
 80041b4:	460c      	mov	r4, r1
 80041b6:	2101      	movs	r1, #1
 80041b8:	f7ff ff27 	bl	800400a <_Balloc>
 80041bc:	2201      	movs	r2, #1
 80041be:	6144      	str	r4, [r0, #20]
 80041c0:	6102      	str	r2, [r0, #16]
 80041c2:	bd10      	pop	{r4, pc}

080041c4 <__multiply>:
 80041c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c8:	4614      	mov	r4, r2
 80041ca:	690a      	ldr	r2, [r1, #16]
 80041cc:	6923      	ldr	r3, [r4, #16]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	bfb8      	it	lt
 80041d2:	460b      	movlt	r3, r1
 80041d4:	4688      	mov	r8, r1
 80041d6:	bfbc      	itt	lt
 80041d8:	46a0      	movlt	r8, r4
 80041da:	461c      	movlt	r4, r3
 80041dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80041e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80041e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80041e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80041ec:	eb07 0609 	add.w	r6, r7, r9
 80041f0:	42b3      	cmp	r3, r6
 80041f2:	bfb8      	it	lt
 80041f4:	3101      	addlt	r1, #1
 80041f6:	f7ff ff08 	bl	800400a <_Balloc>
 80041fa:	f100 0514 	add.w	r5, r0, #20
 80041fe:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004202:	462b      	mov	r3, r5
 8004204:	2200      	movs	r2, #0
 8004206:	4573      	cmp	r3, lr
 8004208:	d316      	bcc.n	8004238 <__multiply+0x74>
 800420a:	f104 0214 	add.w	r2, r4, #20
 800420e:	f108 0114 	add.w	r1, r8, #20
 8004212:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004216:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	9b00      	ldr	r3, [sp, #0]
 800421e:	9201      	str	r2, [sp, #4]
 8004220:	4293      	cmp	r3, r2
 8004222:	d80c      	bhi.n	800423e <__multiply+0x7a>
 8004224:	2e00      	cmp	r6, #0
 8004226:	dd03      	ble.n	8004230 <__multiply+0x6c>
 8004228:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800422c:	2b00      	cmp	r3, #0
 800422e:	d05d      	beq.n	80042ec <__multiply+0x128>
 8004230:	6106      	str	r6, [r0, #16]
 8004232:	b003      	add	sp, #12
 8004234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004238:	f843 2b04 	str.w	r2, [r3], #4
 800423c:	e7e3      	b.n	8004206 <__multiply+0x42>
 800423e:	f8b2 b000 	ldrh.w	fp, [r2]
 8004242:	f1bb 0f00 	cmp.w	fp, #0
 8004246:	d023      	beq.n	8004290 <__multiply+0xcc>
 8004248:	4689      	mov	r9, r1
 800424a:	46ac      	mov	ip, r5
 800424c:	f04f 0800 	mov.w	r8, #0
 8004250:	f859 4b04 	ldr.w	r4, [r9], #4
 8004254:	f8dc a000 	ldr.w	sl, [ip]
 8004258:	b2a3      	uxth	r3, r4
 800425a:	fa1f fa8a 	uxth.w	sl, sl
 800425e:	fb0b a303 	mla	r3, fp, r3, sl
 8004262:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004266:	f8dc 4000 	ldr.w	r4, [ip]
 800426a:	4443      	add	r3, r8
 800426c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004270:	fb0b 840a 	mla	r4, fp, sl, r8
 8004274:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004278:	46e2      	mov	sl, ip
 800427a:	b29b      	uxth	r3, r3
 800427c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004280:	454f      	cmp	r7, r9
 8004282:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004286:	f84a 3b04 	str.w	r3, [sl], #4
 800428a:	d82b      	bhi.n	80042e4 <__multiply+0x120>
 800428c:	f8cc 8004 	str.w	r8, [ip, #4]
 8004290:	9b01      	ldr	r3, [sp, #4]
 8004292:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004296:	3204      	adds	r2, #4
 8004298:	f1ba 0f00 	cmp.w	sl, #0
 800429c:	d020      	beq.n	80042e0 <__multiply+0x11c>
 800429e:	682b      	ldr	r3, [r5, #0]
 80042a0:	4689      	mov	r9, r1
 80042a2:	46a8      	mov	r8, r5
 80042a4:	f04f 0b00 	mov.w	fp, #0
 80042a8:	f8b9 c000 	ldrh.w	ip, [r9]
 80042ac:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80042b0:	fb0a 440c 	mla	r4, sl, ip, r4
 80042b4:	445c      	add	r4, fp
 80042b6:	46c4      	mov	ip, r8
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80042be:	f84c 3b04 	str.w	r3, [ip], #4
 80042c2:	f859 3b04 	ldr.w	r3, [r9], #4
 80042c6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80042ca:	0c1b      	lsrs	r3, r3, #16
 80042cc:	fb0a b303 	mla	r3, sl, r3, fp
 80042d0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80042d4:	454f      	cmp	r7, r9
 80042d6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80042da:	d805      	bhi.n	80042e8 <__multiply+0x124>
 80042dc:	f8c8 3004 	str.w	r3, [r8, #4]
 80042e0:	3504      	adds	r5, #4
 80042e2:	e79b      	b.n	800421c <__multiply+0x58>
 80042e4:	46d4      	mov	ip, sl
 80042e6:	e7b3      	b.n	8004250 <__multiply+0x8c>
 80042e8:	46e0      	mov	r8, ip
 80042ea:	e7dd      	b.n	80042a8 <__multiply+0xe4>
 80042ec:	3e01      	subs	r6, #1
 80042ee:	e799      	b.n	8004224 <__multiply+0x60>

080042f0 <__pow5mult>:
 80042f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042f4:	4615      	mov	r5, r2
 80042f6:	f012 0203 	ands.w	r2, r2, #3
 80042fa:	4606      	mov	r6, r0
 80042fc:	460f      	mov	r7, r1
 80042fe:	d007      	beq.n	8004310 <__pow5mult+0x20>
 8004300:	3a01      	subs	r2, #1
 8004302:	4c21      	ldr	r4, [pc, #132]	; (8004388 <__pow5mult+0x98>)
 8004304:	2300      	movs	r3, #0
 8004306:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800430a:	f7ff fec9 	bl	80040a0 <__multadd>
 800430e:	4607      	mov	r7, r0
 8004310:	10ad      	asrs	r5, r5, #2
 8004312:	d035      	beq.n	8004380 <__pow5mult+0x90>
 8004314:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004316:	b93c      	cbnz	r4, 8004328 <__pow5mult+0x38>
 8004318:	2010      	movs	r0, #16
 800431a:	f7ff fe63 	bl	8003fe4 <malloc>
 800431e:	6270      	str	r0, [r6, #36]	; 0x24
 8004320:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004324:	6004      	str	r4, [r0, #0]
 8004326:	60c4      	str	r4, [r0, #12]
 8004328:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800432c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004330:	b94c      	cbnz	r4, 8004346 <__pow5mult+0x56>
 8004332:	f240 2171 	movw	r1, #625	; 0x271
 8004336:	4630      	mov	r0, r6
 8004338:	f7ff ff3b 	bl	80041b2 <__i2b>
 800433c:	2300      	movs	r3, #0
 800433e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004342:	4604      	mov	r4, r0
 8004344:	6003      	str	r3, [r0, #0]
 8004346:	f04f 0800 	mov.w	r8, #0
 800434a:	07eb      	lsls	r3, r5, #31
 800434c:	d50a      	bpl.n	8004364 <__pow5mult+0x74>
 800434e:	4639      	mov	r1, r7
 8004350:	4622      	mov	r2, r4
 8004352:	4630      	mov	r0, r6
 8004354:	f7ff ff36 	bl	80041c4 <__multiply>
 8004358:	4639      	mov	r1, r7
 800435a:	4681      	mov	r9, r0
 800435c:	4630      	mov	r0, r6
 800435e:	f7ff fe88 	bl	8004072 <_Bfree>
 8004362:	464f      	mov	r7, r9
 8004364:	106d      	asrs	r5, r5, #1
 8004366:	d00b      	beq.n	8004380 <__pow5mult+0x90>
 8004368:	6820      	ldr	r0, [r4, #0]
 800436a:	b938      	cbnz	r0, 800437c <__pow5mult+0x8c>
 800436c:	4622      	mov	r2, r4
 800436e:	4621      	mov	r1, r4
 8004370:	4630      	mov	r0, r6
 8004372:	f7ff ff27 	bl	80041c4 <__multiply>
 8004376:	6020      	str	r0, [r4, #0]
 8004378:	f8c0 8000 	str.w	r8, [r0]
 800437c:	4604      	mov	r4, r0
 800437e:	e7e4      	b.n	800434a <__pow5mult+0x5a>
 8004380:	4638      	mov	r0, r7
 8004382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004386:	bf00      	nop
 8004388:	080049d8 	.word	0x080049d8

0800438c <__lshift>:
 800438c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004390:	460c      	mov	r4, r1
 8004392:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004396:	6923      	ldr	r3, [r4, #16]
 8004398:	6849      	ldr	r1, [r1, #4]
 800439a:	eb0a 0903 	add.w	r9, sl, r3
 800439e:	68a3      	ldr	r3, [r4, #8]
 80043a0:	4607      	mov	r7, r0
 80043a2:	4616      	mov	r6, r2
 80043a4:	f109 0501 	add.w	r5, r9, #1
 80043a8:	42ab      	cmp	r3, r5
 80043aa:	db32      	blt.n	8004412 <__lshift+0x86>
 80043ac:	4638      	mov	r0, r7
 80043ae:	f7ff fe2c 	bl	800400a <_Balloc>
 80043b2:	2300      	movs	r3, #0
 80043b4:	4680      	mov	r8, r0
 80043b6:	f100 0114 	add.w	r1, r0, #20
 80043ba:	461a      	mov	r2, r3
 80043bc:	4553      	cmp	r3, sl
 80043be:	db2b      	blt.n	8004418 <__lshift+0x8c>
 80043c0:	6920      	ldr	r0, [r4, #16]
 80043c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80043c6:	f104 0314 	add.w	r3, r4, #20
 80043ca:	f016 021f 	ands.w	r2, r6, #31
 80043ce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80043d2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80043d6:	d025      	beq.n	8004424 <__lshift+0x98>
 80043d8:	f1c2 0e20 	rsb	lr, r2, #32
 80043dc:	2000      	movs	r0, #0
 80043de:	681e      	ldr	r6, [r3, #0]
 80043e0:	468a      	mov	sl, r1
 80043e2:	4096      	lsls	r6, r2
 80043e4:	4330      	orrs	r0, r6
 80043e6:	f84a 0b04 	str.w	r0, [sl], #4
 80043ea:	f853 0b04 	ldr.w	r0, [r3], #4
 80043ee:	459c      	cmp	ip, r3
 80043f0:	fa20 f00e 	lsr.w	r0, r0, lr
 80043f4:	d814      	bhi.n	8004420 <__lshift+0x94>
 80043f6:	6048      	str	r0, [r1, #4]
 80043f8:	b108      	cbz	r0, 80043fe <__lshift+0x72>
 80043fa:	f109 0502 	add.w	r5, r9, #2
 80043fe:	3d01      	subs	r5, #1
 8004400:	4638      	mov	r0, r7
 8004402:	f8c8 5010 	str.w	r5, [r8, #16]
 8004406:	4621      	mov	r1, r4
 8004408:	f7ff fe33 	bl	8004072 <_Bfree>
 800440c:	4640      	mov	r0, r8
 800440e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004412:	3101      	adds	r1, #1
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	e7c7      	b.n	80043a8 <__lshift+0x1c>
 8004418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800441c:	3301      	adds	r3, #1
 800441e:	e7cd      	b.n	80043bc <__lshift+0x30>
 8004420:	4651      	mov	r1, sl
 8004422:	e7dc      	b.n	80043de <__lshift+0x52>
 8004424:	3904      	subs	r1, #4
 8004426:	f853 2b04 	ldr.w	r2, [r3], #4
 800442a:	f841 2f04 	str.w	r2, [r1, #4]!
 800442e:	459c      	cmp	ip, r3
 8004430:	d8f9      	bhi.n	8004426 <__lshift+0x9a>
 8004432:	e7e4      	b.n	80043fe <__lshift+0x72>

08004434 <__mcmp>:
 8004434:	6903      	ldr	r3, [r0, #16]
 8004436:	690a      	ldr	r2, [r1, #16]
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	b530      	push	{r4, r5, lr}
 800443c:	d10c      	bne.n	8004458 <__mcmp+0x24>
 800443e:	0092      	lsls	r2, r2, #2
 8004440:	3014      	adds	r0, #20
 8004442:	3114      	adds	r1, #20
 8004444:	1884      	adds	r4, r0, r2
 8004446:	4411      	add	r1, r2
 8004448:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800444c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004450:	4295      	cmp	r5, r2
 8004452:	d003      	beq.n	800445c <__mcmp+0x28>
 8004454:	d305      	bcc.n	8004462 <__mcmp+0x2e>
 8004456:	2301      	movs	r3, #1
 8004458:	4618      	mov	r0, r3
 800445a:	bd30      	pop	{r4, r5, pc}
 800445c:	42a0      	cmp	r0, r4
 800445e:	d3f3      	bcc.n	8004448 <__mcmp+0x14>
 8004460:	e7fa      	b.n	8004458 <__mcmp+0x24>
 8004462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004466:	e7f7      	b.n	8004458 <__mcmp+0x24>

08004468 <__mdiff>:
 8004468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800446c:	460d      	mov	r5, r1
 800446e:	4607      	mov	r7, r0
 8004470:	4611      	mov	r1, r2
 8004472:	4628      	mov	r0, r5
 8004474:	4614      	mov	r4, r2
 8004476:	f7ff ffdd 	bl	8004434 <__mcmp>
 800447a:	1e06      	subs	r6, r0, #0
 800447c:	d108      	bne.n	8004490 <__mdiff+0x28>
 800447e:	4631      	mov	r1, r6
 8004480:	4638      	mov	r0, r7
 8004482:	f7ff fdc2 	bl	800400a <_Balloc>
 8004486:	2301      	movs	r3, #1
 8004488:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800448c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004490:	bfa4      	itt	ge
 8004492:	4623      	movge	r3, r4
 8004494:	462c      	movge	r4, r5
 8004496:	4638      	mov	r0, r7
 8004498:	6861      	ldr	r1, [r4, #4]
 800449a:	bfa6      	itte	ge
 800449c:	461d      	movge	r5, r3
 800449e:	2600      	movge	r6, #0
 80044a0:	2601      	movlt	r6, #1
 80044a2:	f7ff fdb2 	bl	800400a <_Balloc>
 80044a6:	692b      	ldr	r3, [r5, #16]
 80044a8:	60c6      	str	r6, [r0, #12]
 80044aa:	6926      	ldr	r6, [r4, #16]
 80044ac:	f105 0914 	add.w	r9, r5, #20
 80044b0:	f104 0214 	add.w	r2, r4, #20
 80044b4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80044b8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80044bc:	f100 0514 	add.w	r5, r0, #20
 80044c0:	f04f 0e00 	mov.w	lr, #0
 80044c4:	f852 ab04 	ldr.w	sl, [r2], #4
 80044c8:	f859 4b04 	ldr.w	r4, [r9], #4
 80044cc:	fa1e f18a 	uxtah	r1, lr, sl
 80044d0:	b2a3      	uxth	r3, r4
 80044d2:	1ac9      	subs	r1, r1, r3
 80044d4:	0c23      	lsrs	r3, r4, #16
 80044d6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80044da:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80044de:	b289      	uxth	r1, r1
 80044e0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80044e4:	45c8      	cmp	r8, r9
 80044e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80044ea:	4694      	mov	ip, r2
 80044ec:	f845 3b04 	str.w	r3, [r5], #4
 80044f0:	d8e8      	bhi.n	80044c4 <__mdiff+0x5c>
 80044f2:	45bc      	cmp	ip, r7
 80044f4:	d304      	bcc.n	8004500 <__mdiff+0x98>
 80044f6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80044fa:	b183      	cbz	r3, 800451e <__mdiff+0xb6>
 80044fc:	6106      	str	r6, [r0, #16]
 80044fe:	e7c5      	b.n	800448c <__mdiff+0x24>
 8004500:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004504:	fa1e f381 	uxtah	r3, lr, r1
 8004508:	141a      	asrs	r2, r3, #16
 800450a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800450e:	b29b      	uxth	r3, r3
 8004510:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004514:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004518:	f845 3b04 	str.w	r3, [r5], #4
 800451c:	e7e9      	b.n	80044f2 <__mdiff+0x8a>
 800451e:	3e01      	subs	r6, #1
 8004520:	e7e9      	b.n	80044f6 <__mdiff+0x8e>

08004522 <__d2b>:
 8004522:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004526:	460e      	mov	r6, r1
 8004528:	2101      	movs	r1, #1
 800452a:	ec59 8b10 	vmov	r8, r9, d0
 800452e:	4615      	mov	r5, r2
 8004530:	f7ff fd6b 	bl	800400a <_Balloc>
 8004534:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004538:	4607      	mov	r7, r0
 800453a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800453e:	bb34      	cbnz	r4, 800458e <__d2b+0x6c>
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	f1b8 0300 	subs.w	r3, r8, #0
 8004546:	d027      	beq.n	8004598 <__d2b+0x76>
 8004548:	a802      	add	r0, sp, #8
 800454a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800454e:	f7ff fe01 	bl	8004154 <__lo0bits>
 8004552:	9900      	ldr	r1, [sp, #0]
 8004554:	b1f0      	cbz	r0, 8004594 <__d2b+0x72>
 8004556:	9a01      	ldr	r2, [sp, #4]
 8004558:	f1c0 0320 	rsb	r3, r0, #32
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	430b      	orrs	r3, r1
 8004562:	40c2      	lsrs	r2, r0
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	9201      	str	r2, [sp, #4]
 8004568:	9b01      	ldr	r3, [sp, #4]
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	2b00      	cmp	r3, #0
 800456e:	bf14      	ite	ne
 8004570:	2102      	movne	r1, #2
 8004572:	2101      	moveq	r1, #1
 8004574:	6139      	str	r1, [r7, #16]
 8004576:	b1c4      	cbz	r4, 80045aa <__d2b+0x88>
 8004578:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800457c:	4404      	add	r4, r0
 800457e:	6034      	str	r4, [r6, #0]
 8004580:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004584:	6028      	str	r0, [r5, #0]
 8004586:	4638      	mov	r0, r7
 8004588:	b003      	add	sp, #12
 800458a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800458e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004592:	e7d5      	b.n	8004540 <__d2b+0x1e>
 8004594:	6179      	str	r1, [r7, #20]
 8004596:	e7e7      	b.n	8004568 <__d2b+0x46>
 8004598:	a801      	add	r0, sp, #4
 800459a:	f7ff fddb 	bl	8004154 <__lo0bits>
 800459e:	9b01      	ldr	r3, [sp, #4]
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	2101      	movs	r1, #1
 80045a4:	6139      	str	r1, [r7, #16]
 80045a6:	3020      	adds	r0, #32
 80045a8:	e7e5      	b.n	8004576 <__d2b+0x54>
 80045aa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80045ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80045b2:	6030      	str	r0, [r6, #0]
 80045b4:	6918      	ldr	r0, [r3, #16]
 80045b6:	f7ff fdae 	bl	8004116 <__hi0bits>
 80045ba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80045be:	e7e1      	b.n	8004584 <__d2b+0x62>

080045c0 <_calloc_r>:
 80045c0:	b538      	push	{r3, r4, r5, lr}
 80045c2:	fb02 f401 	mul.w	r4, r2, r1
 80045c6:	4621      	mov	r1, r4
 80045c8:	f000 f808 	bl	80045dc <_malloc_r>
 80045cc:	4605      	mov	r5, r0
 80045ce:	b118      	cbz	r0, 80045d8 <_calloc_r+0x18>
 80045d0:	4622      	mov	r2, r4
 80045d2:	2100      	movs	r1, #0
 80045d4:	f7fe fb62 	bl	8002c9c <memset>
 80045d8:	4628      	mov	r0, r5
 80045da:	bd38      	pop	{r3, r4, r5, pc}

080045dc <_malloc_r>:
 80045dc:	b570      	push	{r4, r5, r6, lr}
 80045de:	1ccd      	adds	r5, r1, #3
 80045e0:	f025 0503 	bic.w	r5, r5, #3
 80045e4:	3508      	adds	r5, #8
 80045e6:	2d0c      	cmp	r5, #12
 80045e8:	bf38      	it	cc
 80045ea:	250c      	movcc	r5, #12
 80045ec:	2d00      	cmp	r5, #0
 80045ee:	4606      	mov	r6, r0
 80045f0:	db01      	blt.n	80045f6 <_malloc_r+0x1a>
 80045f2:	42a9      	cmp	r1, r5
 80045f4:	d903      	bls.n	80045fe <_malloc_r+0x22>
 80045f6:	230c      	movs	r3, #12
 80045f8:	6033      	str	r3, [r6, #0]
 80045fa:	2000      	movs	r0, #0
 80045fc:	bd70      	pop	{r4, r5, r6, pc}
 80045fe:	f000 f869 	bl	80046d4 <__malloc_lock>
 8004602:	4a21      	ldr	r2, [pc, #132]	; (8004688 <_malloc_r+0xac>)
 8004604:	6814      	ldr	r4, [r2, #0]
 8004606:	4621      	mov	r1, r4
 8004608:	b991      	cbnz	r1, 8004630 <_malloc_r+0x54>
 800460a:	4c20      	ldr	r4, [pc, #128]	; (800468c <_malloc_r+0xb0>)
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	b91b      	cbnz	r3, 8004618 <_malloc_r+0x3c>
 8004610:	4630      	mov	r0, r6
 8004612:	f000 f83d 	bl	8004690 <_sbrk_r>
 8004616:	6020      	str	r0, [r4, #0]
 8004618:	4629      	mov	r1, r5
 800461a:	4630      	mov	r0, r6
 800461c:	f000 f838 	bl	8004690 <_sbrk_r>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d124      	bne.n	800466e <_malloc_r+0x92>
 8004624:	230c      	movs	r3, #12
 8004626:	6033      	str	r3, [r6, #0]
 8004628:	4630      	mov	r0, r6
 800462a:	f000 f854 	bl	80046d6 <__malloc_unlock>
 800462e:	e7e4      	b.n	80045fa <_malloc_r+0x1e>
 8004630:	680b      	ldr	r3, [r1, #0]
 8004632:	1b5b      	subs	r3, r3, r5
 8004634:	d418      	bmi.n	8004668 <_malloc_r+0x8c>
 8004636:	2b0b      	cmp	r3, #11
 8004638:	d90f      	bls.n	800465a <_malloc_r+0x7e>
 800463a:	600b      	str	r3, [r1, #0]
 800463c:	50cd      	str	r5, [r1, r3]
 800463e:	18cc      	adds	r4, r1, r3
 8004640:	4630      	mov	r0, r6
 8004642:	f000 f848 	bl	80046d6 <__malloc_unlock>
 8004646:	f104 000b 	add.w	r0, r4, #11
 800464a:	1d23      	adds	r3, r4, #4
 800464c:	f020 0007 	bic.w	r0, r0, #7
 8004650:	1ac3      	subs	r3, r0, r3
 8004652:	d0d3      	beq.n	80045fc <_malloc_r+0x20>
 8004654:	425a      	negs	r2, r3
 8004656:	50e2      	str	r2, [r4, r3]
 8004658:	e7d0      	b.n	80045fc <_malloc_r+0x20>
 800465a:	428c      	cmp	r4, r1
 800465c:	684b      	ldr	r3, [r1, #4]
 800465e:	bf16      	itet	ne
 8004660:	6063      	strne	r3, [r4, #4]
 8004662:	6013      	streq	r3, [r2, #0]
 8004664:	460c      	movne	r4, r1
 8004666:	e7eb      	b.n	8004640 <_malloc_r+0x64>
 8004668:	460c      	mov	r4, r1
 800466a:	6849      	ldr	r1, [r1, #4]
 800466c:	e7cc      	b.n	8004608 <_malloc_r+0x2c>
 800466e:	1cc4      	adds	r4, r0, #3
 8004670:	f024 0403 	bic.w	r4, r4, #3
 8004674:	42a0      	cmp	r0, r4
 8004676:	d005      	beq.n	8004684 <_malloc_r+0xa8>
 8004678:	1a21      	subs	r1, r4, r0
 800467a:	4630      	mov	r0, r6
 800467c:	f000 f808 	bl	8004690 <_sbrk_r>
 8004680:	3001      	adds	r0, #1
 8004682:	d0cf      	beq.n	8004624 <_malloc_r+0x48>
 8004684:	6025      	str	r5, [r4, #0]
 8004686:	e7db      	b.n	8004640 <_malloc_r+0x64>
 8004688:	20000300 	.word	0x20000300
 800468c:	20000304 	.word	0x20000304

08004690 <_sbrk_r>:
 8004690:	b538      	push	{r3, r4, r5, lr}
 8004692:	4c06      	ldr	r4, [pc, #24]	; (80046ac <_sbrk_r+0x1c>)
 8004694:	2300      	movs	r3, #0
 8004696:	4605      	mov	r5, r0
 8004698:	4608      	mov	r0, r1
 800469a:	6023      	str	r3, [r4, #0]
 800469c:	f7fe fa0a 	bl	8002ab4 <_sbrk>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d102      	bne.n	80046aa <_sbrk_r+0x1a>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	b103      	cbz	r3, 80046aa <_sbrk_r+0x1a>
 80046a8:	602b      	str	r3, [r5, #0]
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	20000504 	.word	0x20000504

080046b0 <__ascii_mbtowc>:
 80046b0:	b082      	sub	sp, #8
 80046b2:	b901      	cbnz	r1, 80046b6 <__ascii_mbtowc+0x6>
 80046b4:	a901      	add	r1, sp, #4
 80046b6:	b142      	cbz	r2, 80046ca <__ascii_mbtowc+0x1a>
 80046b8:	b14b      	cbz	r3, 80046ce <__ascii_mbtowc+0x1e>
 80046ba:	7813      	ldrb	r3, [r2, #0]
 80046bc:	600b      	str	r3, [r1, #0]
 80046be:	7812      	ldrb	r2, [r2, #0]
 80046c0:	1c10      	adds	r0, r2, #0
 80046c2:	bf18      	it	ne
 80046c4:	2001      	movne	r0, #1
 80046c6:	b002      	add	sp, #8
 80046c8:	4770      	bx	lr
 80046ca:	4610      	mov	r0, r2
 80046cc:	e7fb      	b.n	80046c6 <__ascii_mbtowc+0x16>
 80046ce:	f06f 0001 	mvn.w	r0, #1
 80046d2:	e7f8      	b.n	80046c6 <__ascii_mbtowc+0x16>

080046d4 <__malloc_lock>:
 80046d4:	4770      	bx	lr

080046d6 <__malloc_unlock>:
 80046d6:	4770      	bx	lr

080046d8 <__ascii_wctomb>:
 80046d8:	b149      	cbz	r1, 80046ee <__ascii_wctomb+0x16>
 80046da:	2aff      	cmp	r2, #255	; 0xff
 80046dc:	bf85      	ittet	hi
 80046de:	238a      	movhi	r3, #138	; 0x8a
 80046e0:	6003      	strhi	r3, [r0, #0]
 80046e2:	700a      	strbls	r2, [r1, #0]
 80046e4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80046e8:	bf98      	it	ls
 80046ea:	2001      	movls	r0, #1
 80046ec:	4770      	bx	lr
 80046ee:	4608      	mov	r0, r1
 80046f0:	4770      	bx	lr
	...

080046f4 <_init>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	bf00      	nop
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr

08004700 <_fini>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	bf00      	nop
 8004704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004706:	bc08      	pop	{r3}
 8004708:	469e      	mov	lr, r3
 800470a:	4770      	bx	lr
